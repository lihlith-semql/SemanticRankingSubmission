{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13400313700803768, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.18057706634871085, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.19801829383366448, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1983107981119219, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.21563483469840528, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22079618588410152, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24454276404302933, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2478868063111299, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.25555204278142435, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.25998219822686197, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.26271489576858953, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2724680288514248, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29637505324438684, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.30776918601581504, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3798185558467221, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.342728355819526, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.34287063366039405, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.36005377020424206, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.3666754859482225, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3675221433658623, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.36766541885658266, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Bytes)", "score": -0.38209442424651446, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3822367020873826, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Track.TrackId),Track.Bytes)", "score": -0.38231998665812794, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.38993163531046854, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.40058482395684836, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.4007851853620341, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,AB), Track.UnitPrice),Track.Milliseconds))", "score": -0.41850149263039527, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,AB), Track.Bytes),Track.Milliseconds))", "score": -0.43128282193443496, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,AB), Employee.BirthDate),Track.Milliseconds))", "score": -0.44177408289779285, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22878780807534438, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23450592982008184, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27080168590977194, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2806207319621938, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2862036629757648, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2902551928703975, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3095707589953335, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3115537302578604, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31461432663820393, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Genre),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3218746157812535, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32323239049428526, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.3523113097623423, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.3566020490700417, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.36819795567365404, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38089446321532416, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.1909105531667592, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.38341248304956693, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3879390919079619, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,!=,Rock And Roll), Track.Name),Track.Milliseconds))", "score": -0.38997004700649995, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.39819022722063374, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.4074302575944672, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Track.Name))", "score": -0.4093827559133069, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.41092447171937363, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.4262767579265534, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Track.Name))", "score": -0.4365654570966604, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4399180591968692, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Album.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.44106968339944547, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4426577856588336, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.444559019191541, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.4827822803583873, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.18119306302833138, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.2561928722934681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.3500639740304905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.43985667338470147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4408989250587183, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.4742834065036732, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.49204030073451577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.496007451780315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.515898734323855, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Address))", "score": -0.5348637164047384, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.5492832157688099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5497662667112309, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Employee.Address),Customer.Address))", "score": -0.5522204134540516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5587579300554353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.5710072358997422, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22372772170473326, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22835338626313195, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCity,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24744748829869184, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCity,=,Amsterdam),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28051372809494673, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,>,Amsterdam), Genre.Name),Genre.Name))", "score": -0.28157211848931113, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,>,Amsterdam), Genre.Name),Genre.Name))", "score": -0.29348287345316953, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2953378494519873, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2969736474050989, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29996351179997977, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30409101122100674, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.31338600358137186, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.32764385235536286, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33488640189326985, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3403547473010871, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.34973207827833336, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.023674826874606515, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.7111253997005618, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7579254399353168, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.784778087692669, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7865842397441156, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8842745041395441, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.9054483098693451, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9147705485799258, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -0.9295362543638026, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Fax),Artist.Name))", "score": -0.953077862647783, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9606654410523207, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.0106085345116187, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.0963612978816482, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.0998136507688225, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -1.1107890451262805, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.03893867835722631, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.4812224386478192, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.5201017591389245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.5519713196190423, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.FirstName))", "score": -0.5533107896553702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.5546510596977896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.5549304809173918, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.5610052724587149, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.5821000770883984, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Phone),Customer.FirstName))", "score": -0.6126539143951959, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.FirstName),Customer.FirstName))", "score": -0.6386205586823053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6468247352386243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca),getData(Customer),Employee.EmployeeId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.6506178010383444, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.LastName))", "score": -0.7100675483452505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Phone))", "score": -0.7232950111138052, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.20535483916930497, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.24251449887915486, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.24710583088493723, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.26411112483556576, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Album.Title))", "score": -0.28171565419868044, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.2943461794459475, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.29840210001441403, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3046376401237019, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.3091848022661028, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.32176822101113745, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.3218614370817517, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Bytes))", "score": -0.32768449554958556, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3289981809872065, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.3370304669091685, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.3372178069943338, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.311353080071945, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.32105354173590245, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3326351157442087, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3523057088120792, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.353248115251171, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.37810238052833706, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.38506385175197866, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.38884550523065436, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3954731373487295, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3985823716442924, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3987179104849897, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.39945918239654576, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4047251162165491, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4079698893528093, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.4100888803517844, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.23424757566549717, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.257777162280855, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2604560061713899, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.2741357920829002, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.3003442225887929, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3010681166074939, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3070776976856529, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32037541931422414, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3272765471133866, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.33186027672340557, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.3409563330248969, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3444331607130876, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3477472382640528, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3602797573115658, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.36187391556388093, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.32581671879547897, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,Erzs\u00e9bet krt. 58.),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.3638346745535817, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), MediaType.Name),Track.UnitPrice))", "score": -0.397212532908879, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.41251934374690896, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,BC),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), MediaType.Name),Track.UnitPrice))", "score": -0.4313214539918649, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.4343783332321217, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.45288486530516514, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.47452408940151836, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.4774159204611267, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.477537693642379, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.48042952470198735, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.49331721948694357, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.496209059915161, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.4963307787584805, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.49922256110132146, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.35547860740916803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.HireDate))", "score": -0.3962213623453863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.BirthDate))", "score": -0.4235921654035337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.City))", "score": -0.44645530759589747, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.HireDate))", "score": -0.464334920339752, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.BirthDate))", "score": -0.4746890965034254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.5012676666338147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.City))", "score": -0.5145688655902632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.HireDate))", "score": -0.5154318514396437, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.City))", "score": -0.5413172110923984, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(min(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,590 Columbia Boulevard West),Employee.BirthDate),Employee.BirthDate))", "score": -0.543154860261008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.Email))", "score": -0.5506770688225515, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.BirthDate))", "score": -0.5540283908164154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.5570640157093294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.HireDate))", "score": -0.5635120793870545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3462619022601845, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38871288141979327, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4036643790450337, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42431038449648834, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4461154177514038, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46676136365609705, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4676749982747411, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.47299562572794457, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.47355452526086844, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4891440987591608, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.49502362574528813, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.498272176104164, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.500445143003736, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.506324659781847, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5259455702779072, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5154021920432803, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5386021487420222, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5398371645864701, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5446515958749617, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5454987940289295, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Rock), Invoice.Total),Invoice.Total))", "score": -0.5471929686773365, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5547102415300762, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5593668596173319, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Rock), Invoice.Total),Invoice.Total))", "score": -0.5601115601766651, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5665424191126572, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5725918662455968, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5749715833276636, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5817316340535782, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.58285882436376, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5879243120987381, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.3438666577202046, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.34590537793261367, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.36693958731855664, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Genre.Name),Album.Title))", "score": -0.3772467434205366, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Genre.Name),Genre.Name))", "score": -0.3792854636329457, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Album.Title),Album.Title))", "score": -0.4346661337624357, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Album.Title),Genre.Name))", "score": -0.4367048539748447, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,None), Album.Title),Album.Title))", "score": -0.4382292435928722, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,None), Album.Title),Genre.Name))", "score": -0.44026796380528127, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.4533209278561074, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.4553596480685165, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.46697441423124714, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Genre.Name),Album.Title))", "score": -0.4680462194627677, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.4690131344436562, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Genre.Name),Genre.Name))", "score": -0.4700849396751768, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2895768164361919, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30672295370441494, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3099897285353643, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.342662758204192, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.345834834489609, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3466631043203002, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.34713430082338775, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3532867664673139, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3594364101079029, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36430735280452387, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37125758396640296, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.373616526116398, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.37806689827367973, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.37984931546225953, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Invoice),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38741063280881527, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.27445140546115, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.34588196193726617, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.3632289587512787, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.4064256331876095, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.4346595152273949, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.46838954528720933, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.4952031864777382, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.4978913859851637, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5150864436668962, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5170717224816727, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5331130925702117, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.5398201017633255, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.5418417208820756, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.5425340025819164, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.5435814165606159, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.029783454592469345, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.4687286259380328, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5683703942604869, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5747399677588663, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.5933660980663262, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6088216891674313, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.6339225915605157, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.65930931473882, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.6714008491835557, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7040507324981357, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7116580697807608, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,None), Album.Title),Album.Title))", "score": -0.716232076149027, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.7442580299921246, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Album.Title),Album.Title))", "score": -0.7647120509645902, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7889904383919202, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.3554189658436479, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.36898877257306323, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Artist.ArtistId))", "score": -0.4337908284801195, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.ArtistId))", "score": -0.4473606352095349, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Artist.Name))", "score": -0.5006978291218821, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5014813500892715, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.5142676358512974, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -0.5798532127257432, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,None), Album.Title),Album.Title))", "score": -0.6083752227714285, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Album.Title),Album.Title))", "score": -0.6245674801757559, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -0.6467602133675058, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Album.Title))", "score": -0.6757500672976509, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.6893198740270662, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Employee.PostalCode))", "score": -0.7034830302047989, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Employee.PostalCode))", "score": -0.7170528369342143, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1727244568186778, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2044480814316237, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21919729921868952, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.237178896110701, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2461265150099828, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(filter(getData(Track),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26228895734384666, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2830356397528196, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28817360534170955, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2898905344974208, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3034884053099118, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3064023969646712, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3147805265293449, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.337288158136495, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(filter(getData(Track),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.339466037255402, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34494641265460024, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.24034963641406978, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.27402842107457775, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.27423757584157654, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.2820530440774434, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,0.99), Customer.Address),Customer.Address))", "score": -0.29523176162843784, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.30581594505168447, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Invoice.BillingAddress),Customer.Address))", "score": -0.33426423397272265, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Address),Customer.Address))", "score": -0.3502019745203544, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))", "score": -0.3593896146161499, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,0.99), Customer.Address),Customer.Address))", "score": -0.3659920696958307, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.36965852969804674, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3768521476959527, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3848905512592664, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38618202179823896, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,0.99), Customer.Address),Customer.Address))", "score": -0.38719544679836004, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,1.99), Customer.Address),Customer.Address))", "score": -0.23370126332042512, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.25887946141305357, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.28268166043917586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.30069624256878946, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.32449844159491176, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.32633001945545603, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,1.99), Customer.Address),Customer.Address))", "score": -0.3367646453325631, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,1.99), Customer.Address),Customer.Address))", "score": -0.3492653401627812, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.35013222955693263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3662634999515041, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.3673211097607864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3781590749372249, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<,1.99), Customer.Address),Customer.Address))", "score": -0.37828931401808386, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.3825364908930832, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,1.99), Customer.Address),Customer.Address))", "score": -0.38280447459637473, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4056506137431255, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.41404859747768896, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4233142942934222, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.42598334357576423, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4328524368650216, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.44760759238630116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4560055761208646, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.46483303757947597, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.46527127293659787, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4679403222189399, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.4686965320595296, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.47460030440534884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.4757817750428319, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.4759596530052566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4783068063184434, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.41605320523978434, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.4547709073302813, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.47104252550927256, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.47382891631103885, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.4914364105021606, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Album.Title),Album.Title))", "score": -0.49881653709098317, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5035500991257549, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.5043237459517231, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5092862816322686, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.5097602298148404, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5142970344129656, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5216057759130479, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5266163348750442, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5281781784633072, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5385344476844062, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.046546017882064916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.3912975186127185, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.39358906701356633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,>=,AB), Employee.Fax),Employee.Fax))", "score": -0.46781247727631126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.4905916651600819, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.4928832135609297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Fax),Employee.Fax))", "score": -0.5970189260697225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Customer.Fax))", "score": -0.5980171441478888, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.PostalCode))", "score": -0.6048441409511724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6077331813430646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6237823279952863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6253657849883894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Customer.Fax),Employee.Fax))", "score": -0.63248521987407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Country))", "score": -0.6359799384517828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.Fax))", "score": -0.6404629439493874, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17627296918337462, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19716284334158732, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20298682581841357, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20615337582715834, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21464965357059548, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21474356744222256, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21820831698941273, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.22989404432694802, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2338451272806532, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2525784062118718, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2704318472465261, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2728373872126788, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28864518823965757, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2994742726856671, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3019435240408851, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.08345568810636905, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.30438579131896404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.42074659196105607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.Total),Invoice.BillingState))", "score": -0.42966471963609365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.43709314872558025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5237708103568366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5300571476891491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.553519000605552, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5628359740826687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.Country))", "score": -0.5642353992634526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.5687626784392705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5748683143293623, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5822963838427485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5841852789461955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.5912197880021206, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2308919043315252, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.23751365398279686, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2667974241660642, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2783999721918145, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2924772886449741, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31912785761324153, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.ArtistId,Customer.SupportRepId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.33347971542676336, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.33401205324016475, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.35373994930309727, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.3548685184064876, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.37112717452217003, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3724665908964646, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3795364995328093, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3795539413393, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.38178423095718683, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.City))", "score": -0.3532101933415106, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.Title))", "score": -0.380996209805744, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.City))", "score": -0.41170477611376555, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.Title))", "score": -0.43949079257799895, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.City))", "score": -0.4458223406727484, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.PostalCode))", "score": -0.4494267527516058, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.Title))", "score": -0.4736083571369818, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Title),Employee.City))", "score": -0.5007605378086737, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.City))", "score": -0.5043169234450033, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.PostalCode))", "score": -0.5079213355238608, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Title),Employee.Title))", "score": -0.5285465542729071, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.Title))", "score": -0.5321029399092367, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Address),Employee.City))", "score": -0.5370157782490423, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.PostalCode))", "score": -0.5420389000828436, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.City),Employee.City))", "score": -0.5592551205809286, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.21419618802201512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.35607367805127904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.35831973107588055, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3695060439599729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.39933284690165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.411921471184893, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.42508207785022023, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.43658406132650945, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.455180640035264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.45751966626501483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4681254491401887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4719663340754875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4796383959288561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4798431814453214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.5104412843349069, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2070383272407148, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.25107467841594183, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2553672340792698, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26125024955906817, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2617320866456793, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26754513729031476, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.27277395604971033, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.2732141494590515, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.27967908957591225, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.2890535654407858, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2969244188120968, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3021422714483942, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3147311857685601, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.31603690081554653, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.3210923379818933, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19690882028226042, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3239867648590007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37840425209287787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39705371097807074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41845458420772463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42837192455228623, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43644997403308033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.44440702230601303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.45248507178680714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47017162834511683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48207934427484933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48650495111828584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49148252498739403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5054821966696181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5057572962220435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2653114830739668, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2663053942310127, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2808663465255443, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.284570503208329, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.29205093981120955, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.31727449378624645, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3192283644983766, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.32264948370363916, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3325056290611642, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3325403989106275, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33610335354874316, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.34637164094034173, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3487363747525694, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.34906983648057943, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.3493115562923764, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3001024840750688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33436872496986325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.36810441747093137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3742696164526933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40853585734748776, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4422715498485559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44404698595189984, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4783132268466943, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49553377613210614, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5056540546092863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5120489193477624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5167021192571931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5297999853328292, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5342355331721006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5451943148918872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.15747203731011078, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.16817496174678637, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.18776687617060575, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.19452943770545097, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.2041895073241823, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.Bytes),Track.Bytes)", "score": -0.2850574668954317, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2880643672103047, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2915801326936251, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.304591745373396, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.Bytes),Track.Bytes)", "score": -0.350086067345964, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Album.AlbumId),Track.Bytes)", "score": -0.3549215108942164, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3592100845493706, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3676475923330882, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3756915411319007, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3772318910502877, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.2647822468935142, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31998182961433486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.331785198921177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3533985867482035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.3543619004794891, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3680297123698208, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.37961690754550487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38185214379518584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3897830550192595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.4162322146603401, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.42040153877586633, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.43275869092264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.43503268045674737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Invoice.BillingCity))", "score": -0.46790778980695724, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.4765791606853329, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.17656915233601467, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.22683041141499416, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.PostalCode),Album.Title))", "score": -0.38452636049260036, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.3923469667242898, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.42259390994427204, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Employee.PostalCode),Album.Title))", "score": -0.43478761957157985, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Artist.Name),Album.Title))", "score": -0.4426082258032693, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4947860006941084, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.5121800188826455, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.AlbumId),Album.Title))", "score": -0.5522046570586099, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Track.Bytes),Album.Title))", "score": -0.562441277961625, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Composer),Album.Title))", "score": -0.5638562922285928, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5642981866294576, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.LastName),Album.Title))", "score": -0.5670566569933726, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5924429825427069, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.4206292886465018, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.48871365785234244, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.4984737876635543, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5057495523736175, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.5603199613979086, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.5738339215794582, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.58359405139067, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Address))", "score": -0.5977938784053549, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.City))", "score": -0.6077393157174811, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.6241635412609324, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.PostalCode))", "score": -0.6244233114412054, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.6409118784358725, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.6582177255300493, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.6711774481227621, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Address))", "score": -0.6783857954433188, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18097196046638478, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.18308620767068404, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.20184277183711305, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20481632640634553, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20643622546474757, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.20889667189328992, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21262423657412774, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.21762551079493053, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22863463277874635, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.23009789333105476, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24457270440458298, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2621450731550812, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27577580533158935, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.27785106955703787, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30411807659953927, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.2384427127399249, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Fax))", "score": -0.24537950874946546, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Company))", "score": -0.26357167334936094, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Fax))", "score": -0.2705084693589015, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Company))", "score": -0.39050322146795224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Fax))", "score": -0.3974400174774928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Country))", "score": -0.4627299767889781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Country))", "score": -0.4878589373984141, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.PostalCode))", "score": -0.5555513960280223, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.PostalCode))", "score": -0.5806803566374583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.City),Customer.Company))", "score": -0.6122552094020648, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Country))", "score": -0.6147904855170054, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.City),Customer.Fax))", "score": -0.6191920054116054, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.6403500449814601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,hholy@gmail.com), Customer.Company),Customer.Fax))", "score": -0.6472868409910006, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.State))", "score": -0.2118280958820833, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Invoice.BillingState))", "score": -0.2808760386396898, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Employee.State))", "score": -0.39111266848340165, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Customer.State))", "score": -0.4019448701728834, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.State))", "score": -0.40205560442700516, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Country))", "score": -0.46471331831708085, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Invoice.BillingState))", "score": -0.4709928129304899, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Invoice.BillingState))", "score": -0.47110354718461167, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Customer.State))", "score": -0.4885948691953672, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Invoice.BillingState),Customer.State))", "score": -0.5470487755228532, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Invoice.BillingState))", "score": -0.5576428119529737, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Employee.State))", "score": -0.5812294427742017, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Employee.State))", "score": -0.5813401770283235, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.State))", "score": -0.5819388423551572, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.State))", "score": -0.5921723787178053, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.34112120771575977, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.3617514917164868, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.3785331638890971, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.41458940225842106, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4218220354632649, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4287893266991887, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4329980648701548, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.44880725038274044, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.44932039322860495, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.45005176641063754, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4511031405395829, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.45488113314809736, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4575055535357857, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.461031055230428, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.46292182613529337, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2689231516922144, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Artist.ArtistId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.26920772748234556, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.27029107221830656, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Artist.ArtistId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.282269760840566, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.283353105576527, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.28869031348105717, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.29110659271064987, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.29218992992244663, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.29603795142163736, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30416873547665857, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Album.AlbumId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30525208021261957, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.322768314848995, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3231785976713694, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.32871924871644315, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3360304681679716, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24915607099979079, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.263152821731558, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27218475451670787, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2859901297221981, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2909158851866543, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3039430455239304, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3074625221340017, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3104003406179295, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.31500812510123827, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3177795840070237, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3298370592830927, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3336319168889608, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3450606170812945, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3550117637839344, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3587654606903152, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.19412789903709912, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.19963836435376958, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.20175281820459856, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.21279280190841973, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,>,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.2863295174991656, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2870448913964998, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.29281998113062535, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29519589144198205, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.3085032094886239, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3098900002382124, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3189494170547023, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.3216201907422983, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32710041710018456, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.33346420538723454, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),Artist.Name,!=,11043559), Artist.Name),Artist.Name))", "score": -0.40522236307875437, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23412430101673887, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Jamiroquai),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2764459087657441, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28121054083214847, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.28258067101161716, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.30126066485897535, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.307222209676212, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31438736941437073, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3373727010506951, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.342207491924547, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.35115543732450977, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3609715501279863, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3653593397014445, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.36541704703963357, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36643469846039894, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.36983543117186796, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2418626250138408, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.25263710799348127, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.264297623387074, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2753069449558241, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2771635090049909, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.28233695840559137, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.28865614750136687, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.30665405994262773, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3309342652409494, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.UnitPrice),Track.Name))", "score": -0.33147781877188187, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.3362595562317393, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.Name),Track.Name))", "score": -0.33873071018455203, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),Invoice.Total),Track.Name))", "score": -0.3439888173738339, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),Track.UnitPrice),Track.Name))", "score": -0.3535401733868962, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.35461940692352584, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3280572556733578, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3431537611968086, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3880872874843589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.39058391688458305, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3978101930357524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40318379300780965, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40439387628785295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4056804224080338, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4129066977394499, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4194903818113037, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.4270729948838124, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,<,0.99), Genre.Name),Genre.Name))", "score": -0.43557624059128924, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.44216950509156777, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4422296047190284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,<,0.99), Genre.Name),Genre.Name))", "score": -0.44261301039104023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20160594669426582, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21120598840767177, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22258700012351182, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27112485644281287, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.27320711761426314, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27611582696492143, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29019286781129106, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29150860639344206, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2920611859182797, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2981584177838672, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3050491408131168, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden), Track.TrackId),Invoice.Total)", "score": -0.31235936375276796, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Track.TrackId),Invoice.Total)", "score": -0.31313772836278436, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31350838011296966, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31569018670450866, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.2025034829788267, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.38297561225750926, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40106000047232404, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.42286494452957957, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4322135230797278, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4342080877866, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.46258934458773937, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4653616103940038, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.47035752974365796, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4741009811799197, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4755455327580274, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4840737100065746, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5013938711783091, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5052545037873235, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5154348650300977, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.2656363148728372, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.30203484935305797, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3190226378464773, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.3248952116405785, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.33708192623482053, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3390258394519053, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.35643371034762344, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.35830729272167555, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3735708148621549, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.37542555323891086, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.378658533155498, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3826499186398869, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3840933399202459, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.38811556295143745, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Bytes)", "score": -0.39095589342997517, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.042639105711714365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.43511510289966226, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.4389351609503449, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.48553495791355306, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Customer.SupportRepId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.4893550342428966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.4915992767928401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.49375658632419156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5028600545047084, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.5099310767996683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5524717632181856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Country),Employee.Phone))", "score": -0.560041025877581, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.FirstName),Employee.Phone))", "score": -0.5712850844865898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5741857142566005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Country))", "score": -0.5787411580240587, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.FirstName))", "score": -0.5940830359613756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.10759876970326981, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.38668188846604656, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.389599712609197, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3915304224307139, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4165722770056971, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4336746320416921, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.GenreId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4489898139461753, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4537654784774829, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4558236096030154, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4562270152657833, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.468632753051072, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.AlbumId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.47741629649014766, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4808654387046836, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.48155545542958766, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4936745655397088, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2825292371213111, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,<=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3057089060460354, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3095499210681955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3112096906907646, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.31126812214026994, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3134349158908147, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.31398997505266296, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3326455039133532, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),Track.UnitPrice),Playlist.Name))", "score": -0.3348244114522008, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3398678194630136, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3532447323355686, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,15563967),Track.UnitPrice),Playlist.Name))", "score": -0.3619813273611975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.36545205316512497, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,15563967),Track.UnitPrice),Playlist.Name))", "score": -0.36779642676089175, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.38259123965424274, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.19765704594374256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.22204547844648914, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.26786416493177967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.29225259743452625, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4057550998759325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.43917780838728504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4415807369576386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.44460085317671083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4459466593515255, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4489667755705977, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4759622188639696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5093849273753221, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5195775818601537, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.522597698079226, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.523495670087002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27234036297559705, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.2776205284077986, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.29136990176559485, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.29253496960436465, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.30883669108959966, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31387579330273013, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.32927853276478336, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1),Track.UnitPrice),Track.UnitPrice))", "score": -0.33325971440867713, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.34456792242840323, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1),Track.UnitPrice),Track.UnitPrice))", "score": -0.3465874520461216, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.3534235848123492, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3669681266433092, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3790721446756204, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.38080293650758096, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3891071061442656, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.22354307116244831, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.42547686384932604, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Address))", "score": -0.4682867826867657, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.5137925891758641, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.53520217125309, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.5801868672497443, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.5874519003504417, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.5906592601421566, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.6056800483347615, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Phone))", "score": -0.6285507826687535, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Address))", "score": -0.6394481210591039, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.6568926342879422, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Country))", "score": -0.6600571496965131, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.6684735783492215, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Country))", "score": -0.6809768250158782, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.24201500918493443, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.29506349556619915, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.30082811768444057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.30456172177995405, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.31084430069120794, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.31896730432300363, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3204735624460249, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.3282268986044543, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.34749309115341687, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.3521307073612588, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.35377567006467076, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.35920029759550604, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3609026679498083, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.37040054109987053, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Playlist.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.37354307415230636, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.15674633670899424, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.2036275829962363, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.210490217961795, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.21572173016029444, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.2413053803880802, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.2602859724523174, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.27390957075352756, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.3152227124771669, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.31953863980393044, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3283441312677968, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.341295974250095, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.34810842374545176, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),InvoiceLine.Quantity),Album.Title))", "score": -0.35247956979505285, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.354230202321007, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3596144185894914, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.18658705970301526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.23217912932886975, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3115404935742845, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.35810023880415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3611330385189906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.433819632016797, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4443066169997336, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4473394167145742, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.46337218094258864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4650558297256097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Bytes,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.48740724852132883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.489149521868967, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Bytes,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.49044004823616943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5083265181605802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.513567441907071, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1719100640290707, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20197794043777018, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.234033597861114, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2590876025320825, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2725079917661191, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.30601950344918666, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3398992068669565, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.35192469943913657, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.361771857915694, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),filter(getData(Track),Track.Composer,!=,K2P 1L7),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3672829736027353, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3694214678107832, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3701327186635674, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.38044580985064286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.39183910121927096, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3983479566228617, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.23052799855940975, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.23080495487321537, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.24053088871158748, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.24941551953940636, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2530335014384165, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28100101986083037, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3066502690174833, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.30916104330623334, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3198490407504019, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3502015769470408, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.4004078722762157, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.4190184613081862, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4202244600480993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.4475538746046368, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.4478335377352778, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.19312557636294514, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.22552332340274006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.31329771934542805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.3858427709201351, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.41824051795993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.4672219386557117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.49961968569550663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.506014913902618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.550209746346809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5575917611131445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.5605581650743261, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5616029059747234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5749905860284343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5826074850047007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5850300990277901, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.16553322337858845, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.24959185831539799, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.UnitPrice))", "score": -0.36668107025616337, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Milliseconds))", "score": -0.37310019247524906, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.UnitPrice))", "score": -0.4507397051929729, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.45184986405365635, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Milliseconds))", "score": -0.4571588274120586, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Composer))", "score": -0.48045161478512455, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.515707649498861, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.5241141446781026, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Composer))", "score": -0.5645102497219341, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.5751867810756703, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.5835933116960457, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Name))", "score": -0.590042988958885, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.6088239478410137, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.21088787222605218, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.24313189709885863, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.2437129652058461, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Milliseconds))", "score": -0.24671956734787845, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.27868018609515405, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.2884519677363413, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.29202053015569, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.29543122105946673, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.29677607032366804, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Milliseconds))", "score": -0.2995773603658897, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Milliseconds))", "score": -0.3070509785929047, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.Milliseconds),Track.Milliseconds))", "score": -0.34657530731604763, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.35493866722953377, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Milliseconds))", "score": -0.3669915662065171, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3682131729056326, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.City))", "score": -0.39903390606559697, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Fax))", "score": -0.4013683815828699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Title))", "score": -0.42219795485652867, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.City))", "score": -0.4308779408565897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Fax))", "score": -0.43321241637386265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Title))", "score": -0.4540419896475214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Country))", "score": -0.46829891403831425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Email))", "score": -0.48477626045860234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.City))", "score": -0.4971746971241373, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Fax))", "score": -0.49950917264141026, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Country))", "score": -0.500142948829307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Country),Employee.City))", "score": -0.5117951204410929, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Country),Employee.Fax))", "score": -0.5141295959583658, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Email))", "score": -0.5166202952495951, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Title))", "score": -0.520338745915069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2263152725445564, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2757268575147223, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.27687226952587074, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.3346599832324862, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.342622126732543, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.34440146362929014, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3566022272650542, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.3840715682026521, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.38418664203536923, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.3852169802138005, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3875172120572757, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.39922291694670475, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.4218045610529225, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.UnitPrice,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.42531120914675025, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.42706392809622296, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.0471150795410833, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3367142877963486, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.36370072310924567, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.41475495122637285, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Genre.Name))", "score": -0.4293187785693206, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.43156649763812416, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4360221843257989, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.44593277685888094, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4492006747476667, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4498206992134678, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.45424355066025507, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Genre.Name))", "score": -0.46957211501478446, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4724102311098122, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4792880858840616, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Genre),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4999653350091497, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.27530544679142166, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.2969535836259117, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.30352821628420806, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.30541309874135836, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.32509059983002897, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3478441555726089, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3556717744888488, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.36177621143035543, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.36194979544348566, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3755797533510481, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.3800857324454648, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.3953390405213279, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.411344862379506, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.42369087108232434, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance),Track.Milliseconds),MediaType.Name))", "score": -0.43743041937537447, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.039770944335032254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.PostalCode),Customer.Fax))", "score": -0.437465179071296, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.PostalCode))", "score": -0.4870002235402353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.4927178157964407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Company),Customer.Fax))", "score": -0.5200718523119576, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5271875749458559, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.551486183248926, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.City,!=,Vancouver),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.555077570448867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5569279751684415, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Company))", "score": -0.6054129268159159, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.605948264259858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Employee.Fax))", "score": -0.629349019669462, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6570728908409365, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6575513373245485, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Country),Customer.Fax))", "score": -0.7062958658789285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.10300769889727235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.LastName))", "score": -0.20291818911209702, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.2864256133325398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.LastName))", "score": -0.3863361035473645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.4314641398771537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4588915150701613, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.46349215404336597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.LastName))", "score": -0.4690659734389642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.4709814847446978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.49041132547716815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.4974763748799569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.49977707373854463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.5080065610940647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.5166594778073091, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.LastName))", "score": -0.5170327637806371, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36452942178555614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37458761085411846, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.37595280009283066, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3763947918997098, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38641967623612844, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39226352991625224, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3936287191549644, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3955368151361491, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4008965989075781, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.4041494326183942, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4055146218571064, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40720890226231865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40853848095368755, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4120337388516152, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.41279943498825145, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17303565112087704, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.19801530390839653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22053278454321742, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.23182354541091868, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2378311402542973, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2465441380837966, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.256733830536262, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.26004031061954086, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.26906190082445514, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2739193368254629, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2757676143090205, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.27776501749866667, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28188394776857945, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.31217754801882447, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.3174829883588371, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4511411860748964, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.45383790134719304, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4639046102803789, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4666762474575032, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.46681478042955854, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4741618478815166, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4768814893627444, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.47764452216516495, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.47865854071145636, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.47965312689792633, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4806304663067823, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.48079979469308437, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4837842578734318, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Track.Composer,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.5038250439369572, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Track.Composer,=,1600 Amphitheatre Parkway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.GenreId), Track.TrackId),Track.Milliseconds)", "score": -0.5304133803686374, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.2685535066794288, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Playlist.Name))", "score": -0.3077771469902352, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,!=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3385274134535871, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3487696176005346, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.362215779692728, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,>=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3793048213378605, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Track.Name))", "score": -0.38134773096852287, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),MediaType.Name))", "score": -0.38183237022360866, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.3907071491041069, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,<=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3973830158725519, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,!=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Playlist.Name))", "score": -0.4001615881934167, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),InvoiceLine.Quantity),Playlist.Name))", "score": -0.4050725791906354, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),Invoice.CustomerId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.4090257917961771, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.4158494621023551, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.41694937003094534, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.2231270605108326, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.24511005636528677, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.2562235126418754, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.2689532763670999, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.2701432607628749, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.27280421598177423, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.28161423485964926, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.28762449704383597, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.31378744415708865, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3149001873873253, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.31671236436290545, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3229188105317018, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3261670178287369, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3262950061315161, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3431738192349365, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.34127606640157193, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.3813522681820735, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.400637247834605, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.40238343072893645, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.4068212734319632, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.40729537120834763, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.41551378769504094, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.4212061934411347, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.43086857523727323, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.44042876876039766, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.440444737957954, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.45333964008958866, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.4552352806429928, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,!=,The Police Greatest Hits),Track.Milliseconds),Track.Milliseconds))", "score": -0.4582985150145592, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4653744172657456, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3223082825304163, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3265341960328455, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW),Invoice.Total),MediaType.Name))", "score": -0.3473883740222539, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3643609695455594, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3752963266044741, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.384229417236514, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(min(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total),MediaType.Name))", "score": -0.389004908743435, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>,NSW), MediaType.Name),MediaType.Name))", "score": -0.391094147090831, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.40246550251127977, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.405190861259919, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.4066914206980135, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.41111119718606154, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total),MediaType.Name))", "score": -0.41449569774142736, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.42224851334412994, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW),Invoice.Total),MediaType.Name))", "score": -0.4366524055182698, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12766328480211087, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19430929821101017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3168314996000845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3834775130089838, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.4996282256033737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.524538874941105, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Company))", "score": -0.5247341192152817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5452156460669357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5509062829810892, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.566274239012273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5743924419221003, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.5748235348437447, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Company))", "score": -0.591380132624181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.598571992296686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.611861659475835, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))", "score": -0.24829047462844756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.PostalCode))", "score": -0.32676815531158354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Title))", "score": -0.3513196661224356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Title))", "score": -0.3633828713645926, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.LastName))", "score": -0.42299662074947264, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.PostalCode))", "score": -0.4297973468055716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.PostalCode))", "score": -0.44186055204772856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Title))", "score": -0.5021846993913641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.5260258122434607, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Track.Bytes))", "score": -0.5313285394659033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.LastName))", "score": -0.5380890174856177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Title))", "score": -0.5488950415601721, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Title),Album.Title))", "score": -0.582120650291539, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.LastName),Album.Title))", "score": -0.5842836935712717, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Title),Track.Bytes))", "score": -0.5896144565321828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1646510396528221, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.185988966179057, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.18831065596385144, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2005883313131315, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22018767385720547, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.22848100918825845, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.243334473917552, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2467221621995048, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.24891352818787657, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25723184670631644, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Invoice.Total)", "score": -0.26121367153695585, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.26220857740889547, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2657920875030678, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2662438503202085, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.27463104099497765, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.2803347658191342, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.Address))", "score": -0.3830593179736752, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Address))", "score": -0.40173913052421995, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.State),Employee.Address))", "score": -0.41546593120438047, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.HireDate))", "score": -0.41931777706486173, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Country))", "score": -0.4441148739133496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.State))", "score": -0.467047522572102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Address))", "score": -0.4676972132001538, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.Email),Employee.Address))", "score": -0.5194005172525067, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.HireDate))", "score": -0.5220423292194027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.HireDate))", "score": -0.5407221417699475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.Country))", "score": -0.5468394260678906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.5506872337136883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.Country),Employee.Address))", "score": -0.5537946324620862, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.State),Employee.HireDate))", "score": -0.554448942450108, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.26486932718755046, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.29467269931726287, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.3599491838715629, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.3655924388593199, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.37009961342710407, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3777629435612263, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Stevie Ray Vaughan),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.38292971806078563, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.38575295194156006, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.38593136260924543, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.38796231746881266, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.4014148822562746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.4028870699835082, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.4031171843471384, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.41173509606876035, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.41220533194668846, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24753799747510172, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2953829280323503, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3028135355791574, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31576137870163, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32785347225510014, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3343278812715145, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36104433191666024, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36591498103100245, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3745738446282736, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.3801685293653402, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.40403858658358116, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4210785092151255, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42288117472867404, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42623545088337855, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.4287024112987536, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.16780292356452264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.2820775445743493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3517332814826659, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.35228836751872755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3656748381765434, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3980884488864831, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.4063526806036768, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.BillingAddress))", "score": -0.4292730029865197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.4660079024924926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.4821537073894433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.4891487510415117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.4932652470079601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.4992549219928465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.Total),Invoice.Total))", "score": -0.5017863064008813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.BillingAddress))", "score": -0.5229842103001708, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.016365383606646647, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5510304121769253, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.8565456232818002, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9404671100502133, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.9462984581623459, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.9681387921009446, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.9869562168751145, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -1.0172264990542317, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.043025242044139, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0635157604847336, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.117106568486214, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.2140936984954818, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.2553720455661102, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.259445710476398, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3242335268600034, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.24451870031149903, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.24615296731347933, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2756859297906239, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.28139229887755773, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2813969496492021, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.28209028296303607, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.3083858270244969, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.BillingState),Invoice.BillingState))", "score": -0.3114634614960149, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.3140968468830751, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Track.Name))", "score": -0.3159336961465993, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Track.Name))", "score": -0.3167019928961847, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.BillingState),Track.Name))", "score": -0.3226856190481066, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3278250085806917, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.32923292990007796, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.32993360781474074, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.030532175386884155, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6058427636987977, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6066231730355277, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6511956090085974, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7679663876770064, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7776329583643204, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.778413349149832, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7799951342920567, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.8457202884003394, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.891447329964763, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.9145669697575192, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.914922861070427, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.915254547361762, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9221308646103529, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.9403061837656423, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16521698110935212, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.1735328726833201, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20060685555250057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.21234694474641824, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.21541784294343488, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.23057737759391533, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.2484624920916994, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25018769241655914, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25549472375298576, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25709841500867503, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.26024054435591776, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26356852175306306, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26623496952544323, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.26636212595523706, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto),Track.Bytes),MediaType.Name))", "score": -0.32855933585366837, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2888050263316659, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29947414453998805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.31550337754441005, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3261724957527322, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3267878094775018, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Genre.Name))", "score": -0.3300901919788806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3393620291338356, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.352347374057559, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3526131487237618, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.3630164922658812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.36831864722484176, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.36842758208432996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.37134218921781914, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.3771070340172017, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3789877499749589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.111448804758513, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14818464145025695, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.17113678443537744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17220223832780643, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.21317724372465802, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2228835057104916, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2500173915377038, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27238522425064926, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.27703529047589914, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.28437745787407115, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.310653191790719, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3228733613922929, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),MediaType.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.325128271206793, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.34470279619422933, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3777594910131191, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17686835201584328, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19045459994518468, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2026568490303821, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.22102493510119245, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.23579129685049507, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2551900801506424, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.2810722266617831, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.29955749010839455, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.35883888945542997, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3646103681655875, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3649519670803796, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.37792782475453346, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3783929748447269, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.4112507467904157, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.44683574594389325, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23153232584435657, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23521201285691615, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25188764926146767, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2651622728188469, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2657745016848262, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27269825647315943, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2800394993915573, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28208780769438746, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28902327891661245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2945443449360354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3008242494265104, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3012261437594976, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31189179331440275, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.317570684574815, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.34978618975939574, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.21364781912780018, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.338641039099457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.3462000703475496, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.38337238785243244, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.4351828610560915, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.46140434500193805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.47455977276331396, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.4909386551044008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5073029911181948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5252652978560945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.536730133000674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5458470797202608, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Company),Customer.Country))", "score": -0.5709631620011351, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Company))", "score": -0.574571636509063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5833817748389265, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2396332321004836, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2675578546773163, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.283695224738917, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28782914032927837, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3005448477900942, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.31111585136922515, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3141458436309652, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3231352961968849, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.32322343244055796, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3260638243483401, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,Warsaw),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33523035048924477, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.33939711443188675, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3475093120505335, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3507912774561212, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.City,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3583103244292624, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4009596288368826, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4044728922923382, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.41307186098255455, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.41501706679043493, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.43458211126670276, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4363686749882143, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4383138807960946, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4478576690182354, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,120 S Orange Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.4511307725425579, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4573661661895417, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.4598434775900953, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4608794296449973, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.4675360290532535, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4691106767295799, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4698558327918758, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.State))", "score": -0.5766165563632243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.5768941789792734, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.5840088244113774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Country))", "score": -0.5844961529602705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.State))", "score": -0.5869315325819783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.5933966785596567, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.5943238006301315, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.Country))", "score": -0.5948111291790245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.630563147358771, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.646147832687826, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.6470656469391542, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.State))", "score": -0.6486421972440439, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.FirstName))", "score": -0.6535070091413218, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.Phone))", "score": -0.65646280890658, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.State))", "score": -0.6651446968244272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.3540234869433334, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.37973943709221203, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Company))", "score": -0.41796211509790737, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Company))", "score": -0.44491568264493253, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Country))", "score": -0.45150772838678677, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,None), Customer.Company),Customer.Company))", "score": -0.453043672973173, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Country))", "score": -0.4593110462737968, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Company))", "score": -0.4783447122463258, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,None), Customer.Company),Customer.Company))", "score": -0.48159334034953905, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Company))", "score": -0.4841982429934433, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Country))", "score": -0.4897304063924821, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.5087785683749809, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Country),Customer.Company))", "score": -0.5165673902520211, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,None), Customer.Company),Customer.Country))", "score": -0.5204570975676082, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,None), Customer.Company),Customer.Company))", "score": -0.5247717787271937, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.23918549215994211, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2809140209776786, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.2907305788070623, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.29995192110574015, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30116628282232316, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30463184973161583, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32171752142763865, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3235593000554332, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33835675114380304, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.345621995436308, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36297796813124983, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3706767282943129, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(PlaylistTrack),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3726132387081511, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.39079664681648796, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.40117639800381816, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.14755931062427408, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32986700473156816, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3644551628622139, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.3995253656184928, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.41697792224787694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.4265835632922972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43338675077647965, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4508393074058638, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-12-26 00:00:00),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.48112192232409096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.48528901239660627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.4890207958760584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.49095438252089374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.4954169108003806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.5074760057805073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.5128694984407569, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.024657852469040932, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.44980224777591893, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.508929752358534, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5180335652757714, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5445680321735669, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5595474444625151, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5861740830060848, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.610526576354903, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.6287304037787215, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.6296035747790956, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6332041038146198, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Playlist.Name,=,None), Album.Title),Album.Title))", "score": -0.6373820885080554, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.6614346404676326, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6669926469330676, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.7000937958364375, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25191976535617966, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2539646434655912, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.2747064246357482, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2975377802528043, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.30190850583750256, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3049597748132088, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.30515680001925904, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.31042137757992594, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.3134726465556322, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33167888076696944, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33248469700112215, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3337237405328254, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33452954787208417, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.3531021072549638, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,1.99), Album.Title),Album.Title))", "score": -0.35427588346407507, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.2633833404475406, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.34539536498089535, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.42075552208552836, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.47111160961766885, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Employee.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.5204881520403433, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.5336023585332441, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.ArtistId))", "score": -0.5531236341510236, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.6333349740525591, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.6339107651265479, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.6909996655302301, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,None), Artist.Name),Employee.LastName))", "score": -0.6991828957034159, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,!=,None), Artist.Name),Genre.Name))", "score": -0.7123769456099571, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.ArtistId))", "score": -0.7159227896599026, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Genre.Name,!=,None), Artist.Name),Genre.Name))", "score": -0.7195575984222468, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.7330612586304217, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.38091340143851504, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42764448430995766, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4495924451040931, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4583038330357533, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4612947413304103, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4637986441448664, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.47167021300083095, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.48039743098399607, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4868470585556346, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.49712160093523483, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4987454133857881, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5025909195671426, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5047977768907969, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.505342956354275, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5080205582494213, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.1435919081850443, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.2381055628939066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.3374440254701767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.387776864139596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.41596508780100666, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.431957680179039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.44705404099659063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.46528772768215276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5116459765638719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5208510313705045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.529342372624128, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5329385844735589, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.573195078788558, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.5793290523870382, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5816290047077928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23721591919784246, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2529824045299324, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28311532757970775, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28714221275167734, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.287351945154146, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2967212644672121, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.30479810280324837, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3056465138373074, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3203137726841243, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3215889692139706, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.3363324769508972, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3374747104525191, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3388180670768219, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3413906412761391, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.34767192953938936, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2393509562267586, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2585026188481825, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2625426067574869, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.2984315722461033, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.30056781297207286, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.31095443624695157, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3152780234650607, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.33150331209036327, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3396148165538302, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.33994295591919377, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3564612677727876, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.36387919227405396, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3678716519496958, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.369006648820172, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3730282138174544, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.2681466177469055, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.3416614674680963, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.42832430999471016, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.44255624962088613, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.501839159715901, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.516071099342077, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.521205683483327, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.5954632493859509, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.6213403617804746, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6533407972591517, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.6813833757311316, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.FirstName))", "score": -0.6948552115016654, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.6956153153573076, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.Fax))", "score": -0.7340946035037994, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Fax),Customer.LastName))", "score": -0.7496613184995652, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Track.Composer))", "score": -0.16351525484060403, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Track.Composer))", "score": -0.2120727002475178, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,496692), Track.Composer),Track.Composer))", "score": -0.32086694239114877, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.4151967018697178, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.46375414727663156, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Album.Title))", "score": -0.5603269785497105, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.5725483894202625, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Track.Composer))", "score": -0.5860741906508338, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Album.Title))", "score": -0.6088844239566242, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Track.Composer))", "score": -0.6168860965117346, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6214407121314262, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))", "score": -0.6242774575803196, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6390154077682618, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6431513592899576, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.647583510087613, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.City),Customer.City))", "score": -0.29478090881084756, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.3375483569792455, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.35257692595424894, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.35568811940860706, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.35858917761723696, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,0.99), Customer.City),Customer.City))", "score": -0.3626180077944056, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,0.99), Customer.City),Customer.City))", "score": -0.36351388877528584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.City),Customer.City))", "score": -0.3781503505026149, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.City),Customer.City))", "score": -0.37910856357761347, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.38543406377044903, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.3861873039889313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.City),Customer.City))", "score": -0.4162186000272311, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.City),Customer.City))", "score": -0.4208647371919539, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.City),Customer.City))", "score": -0.4212089592042491, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99),Invoice.Total,!=,0.99), Invoice.BillingCity),Customer.City))", "score": -0.5630046576490614, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19764303520610144, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2067134730579816, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.20754247228701117, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21152397640531082, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2129372519774497, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21549022025885928, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.22001772061102756, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2293434765317867, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.24121073650702185, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2532677282524286, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2544407879039621, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25475259865644295, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2552699915544127, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2588981760934601, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26022820327424523, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.08109928801211294, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.40656212911412487, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.41586708819899154, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6746851968569582, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.7413299293010035, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7473144470358792, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.7672561480597632, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.767744390077155, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.776168749792259, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.7904869566013265, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.8017565304429809, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Customer.FirstName),Customer.FirstName))", "score": -0.8371299755050442, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.FirstName))", "score": -0.8909671877859799, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.9124808524827313, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.Phone))", "score": -0.9885497290185563, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.053759619790071156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.3260037081417977, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.40292745568876853, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.FirstName))", "score": -0.43194776327436557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.43640076489064683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.4513849174312445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5142465065190903, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5284510890937258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5292306684737391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.537293908999338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.5389882128269835, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5459543397365462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5505069096920522, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5653069691834389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.5816548419016888, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18004212293873859, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1830997916606505, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1859046811798709, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.18891507017964843, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2025161937181782, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2130387937088688, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2245553363757382, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2258530799226834, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23292412803606052, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.23678462588431567, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.23700140500779693, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23974075320799593, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24269702596554926, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2535569651393372, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28621355741286236, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4129743398862225, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44001797905324574, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45909116285407464, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4756781280842097, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Walking Into Clarksdale),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4790675227396527, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.48952422685346847, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.49195459218915755, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4939922528720974, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5000825975849187, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5045025897089737, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5058006909584163, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5078383422840079, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5102687169770452, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5119119157821364, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5183486884782325, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.01918682520434747, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7093533136649057, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7615563923073435, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.789556113418886, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.8745931689343488, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.9422877068791439, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9612034438443267, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9660396631871326, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9762168054041, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -1.0126114044683683, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.065777662346293, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Fax),Artist.Name))", "score": -1.0739791184109946, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.1311654223551322, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1427624681727884, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -1.1763820106983558, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.23513705116789044, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31120116728088254, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.33248875971326947, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3387642083592811, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.34240269968170745, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.34375613266198496, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.34754640517594665, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.3563225459422792, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.36008779392523277, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.361608152151478, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.37265849644950133, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.37798001042818763, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3818898012846948, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Lyon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3914978326885279, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.39618842134246335, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.209367458319688, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23183259811108592, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23523463089786406, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2402996828505777, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24944804720577668, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2520309826118543, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2538228656831686, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2573943876829361, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.26361553639260416, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26743692935293367, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2770422641002044, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.2784979821135674, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27901968255405274, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.2801654924090929, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.2816913572080595, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.35042490840721446, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.35507510470724135, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.4789641485278423, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.4836143448278692, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.FirstName))", "score": -0.513518757019483, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.Company),Customer.FirstName))", "score": -0.623468247992453, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.FirstName),Customer.FirstName))", "score": -0.6283527450564974, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.FirstName))", "score": -0.629043885943247, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.FirstName),Customer.FirstName))", "score": -0.6420118164460291, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Phone),Customer.FirstName))", "score": -0.6478263873796095, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.Phone))", "score": -0.6593017120103468, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.6735504774750821, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.FirstName),Customer.Company))", "score": -0.6784349745391265, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,!=,None), Customer.Company),Customer.FirstName))", "score": -0.690907331967779, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.LastName),Customer.FirstName))", "score": -0.6926947147344409, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.05643844182486646, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Company))", "score": -0.3956739990680944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Company),Customer.Country))", "score": -0.4456570078327786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Phone))", "score": -0.46057734775240533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.4683329895779025, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.State),Customer.Country))", "score": -0.5191242624714505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.State))", "score": -0.5255350856750738, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5641609012526067, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5849470630928408, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5925279115871592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Fax))", "score": -0.5968446819751989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.6054610102146398, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Peeters), Customer.Country),Customer.Country))", "score": -0.6211164132400881, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Address))", "score": -0.628544458624674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Employee.Country),Customer.Country))", "score": -0.6590119123826177, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.28453789307676886, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes),Track.Name))", "score": -0.3472157258608554, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.3488585038237233, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.36093405582364124, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan),Track.Bytes),Track.Name))", "score": -0.36655119801521174, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),Track.Bytes),Track.Name))", "score": -0.3910167493170623, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.Name),Track.Name))", "score": -0.39214971794494313, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.39432839731549707, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Customer.CustomerId,Customer.SupportRepId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan),Track.Bytes),Track.Name))", "score": -0.39628701990836557, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan),Track.Bytes),Track.Name))", "score": -0.3991000153855298, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.Name),Track.Milliseconds))", "score": -0.3994984157811076, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Bytes)", "score": -0.40290003690182247, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.4066142732195885, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan),Track.UnitPrice),Track.Name))", "score": -0.408152559246228, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.40869188565650705, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.24780761597741943, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Karol Szymanowski),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.2630625577351027, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.27852516558236556, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.29855032396297104, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3202167558064459, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.3204953604803421, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.32207005272235, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,Karol Szymanowski), Artist.Name),Artist.Name))", "score": -0.33636771383927727, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.3374453646192841, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.339012300194171, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Milliseconds,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.34501889373497957, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.34787617303428675, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.35124021792451193, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.35424052228046204, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.3701843534347477, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.Title))", "score": -0.3612805943703279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Title))", "score": -0.38728550483938307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.FirstName),Employee.Title))", "score": -0.504939716658555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Title))", "score": -0.5144949372624978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.PostalCode))", "score": -0.5247548635816202, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.FirstName),Employee.Title))", "score": -0.5309446271276101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.LastName),Employee.Title))", "score": -0.5354635532712564, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Title))", "score": -0.540499847731553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.LastName))", "score": -0.5406747873639688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.Title),Employee.Title))", "score": -0.5443444776305228, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.5457689355826005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.PostalCode))", "score": -0.5507597740506753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.LastName),Employee.Title))", "score": -0.5719400076622805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.Title),Employee.LastName))", "score": -0.5751870180201135, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.Title),Employee.PostalCode))", "score": -0.5760982095708069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.14384834348857112, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.2577686148852081, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.34936218402981467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Employee.LastName),Customer.LastName))", "score": -0.42005757867991633, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Employee.LastName))", "score": -0.45810758202969737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.46328245542645163, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.4890671285957069, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Artist.ArtistId))", "score": -0.5252793940871925, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Employee.LastName),Customer.LastName))", "score": -0.5339778500765533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.PostalCode),Customer.LastName))", "score": -0.5714528995722503, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Employee.LastName))", "score": -0.5720278534263343, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.FirstName))", "score": -0.5783553633064002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.597115208131072, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5995891585171194, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.6029873999923439, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.40714490878411336, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.4137324949987704, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.43432196969043235, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.43454687626824556, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.4411344624829026, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Album.Title))", "score": -0.4422224203219909, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.44349679849265566, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.44608828318642835, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.44881000653664793, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Artist.Name))", "score": -0.4500843847073127, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.45994028638272244, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Customer.PostalCode))", "score": -0.46160030151382053, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.46172393717456456, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.46614611301835085, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.4663675220084748, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.08312137582288415, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2868105156006429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.36407953251860226, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3914961106526056, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39727812084999964, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42206084369863234, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.43556844087750446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4385602337382143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.44019392970539895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Invoice.BillingCountry))", "score": -0.4618854615551504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.4842662599302978, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.4856554853631678, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Country))", "score": -0.489704245611461, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5056496569494954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5070665953402144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.26240446113661164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.PostalCode))", "score": -0.44505311988905305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.4472619078369462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.539293886376355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5456316116918438, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.567397388507463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5676955515778593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5690984622795529, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.574033276893348, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5826788934025207, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5890166187180095, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Album.Title))", "score": -0.5924045107712957, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.PostalCode))", "score": -0.59439974595415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5975002869661593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.PostalCode))", "score": -0.6007374712696388, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2406954685271765, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24533360558011125, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24985071454416624, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25032913944268254, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2578089016374804, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2630977662294176, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2758402875696363, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2868354024893145, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3039706639816625, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30858060538065396, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Van Halen), Invoice.InvoiceId),Invoice.Total)", "score": -0.31261157441532356, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen), Invoice.InvoiceId),Invoice.Total)", "score": -0.3230756274465092, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3259070054241236, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Van Halen), Invoice.InvoiceId),Invoice.Total)", "score": -0.3393793123068095, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34767650472219197, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.23484006263097484, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.25961720625039997, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.UnitPrice),Track.UnitPrice))", "score": -0.29961498774004924, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Name))", "score": -0.312121054027342, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3123019058978037, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.UnitPrice),Track.Name))", "score": -0.32023031558230125, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.3253423358208871, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.33506127944505326, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3417267480100533, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.3468651322745553, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.UnitPrice))", "score": -0.34775222764411656, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.UnitPrice),Track.UnitPrice))", "score": -0.3504356054845727, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.35200263353650507, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.3567572991262583, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.UnitPrice),Track.Name))", "score": -0.3633148179009991, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1555990709133252, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19153719930247104, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.20204465958767068, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.20298456304373458, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.24218206574709716, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.3123470566498326, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.3169203200938221, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.3233173582069053, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32602212665884023, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.33995520363465315, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.34994648021454283, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.3641422084789479, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.3727636680541593, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.3766323942869773, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.3843281485383094, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3582547246809581, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3804831171649716, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3846973514655964, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3909564832629487, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3936379657874677, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.3936524178038856, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3997897737987878, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.Total),InvoiceLine.Quantity))", "score": -0.40090666455512186, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.4071949254478458, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4103990157029541, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.41369450495670684, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4208292444949768, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.Total),InvoiceLine.Quantity))", "score": -0.42320833150371695, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4300268801651179, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.Total),InvoiceLine.Quantity))", "score": -0.4324569924406389, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.33804786940163467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.33871150751656387, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.39414424254126385, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.4171204770832632, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Country),Customer.Country))", "score": -0.42582953711098526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Country))", "score": -0.42649317522591446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.42654098740271396, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,ON), Customer.Company),Customer.Company))", "score": -0.4398199606714906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.44059622782570457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.4464940533579902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,ON), Customer.Company),Customer.Company))", "score": -0.4589556566175971, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,ON),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Company))", "score": -0.46189505752442583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,ON), Customer.Company),Customer.Company))", "score": -0.4627962173641987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.4635724933613908, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Country))", "score": -0.46399347645671896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.27559262126083395, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.27882087102509967, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Genre.Name))", "score": -0.2845739624286882, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.29422142538870766, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.2969515430126926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.3080228798026807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.31100901741550346, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31235209737630054, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),MediaType.Name))", "score": -0.3128523722270255, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.31426726261275967, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32340375837937324, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.3257249040100618, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33254110525025676, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Genre.Name))", "score": -0.3388043127429812, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3392953905220695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.2648893815567135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.3752482158233761, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Name),Track.Milliseconds))", "score": -0.3920299035598873, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.3965993148376583, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Name),Track.Milliseconds))", "score": -0.5023887378265499, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.5069581491043209, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Name))", "score": -0.5121665258993744, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.UnitPrice),Track.Milliseconds))", "score": -0.5344264728119015, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Bytes))", "score": -0.5399523635496735, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.57758977993748, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.5970178297965257, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Respectable),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6299633598738746, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6385479686422679, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Respectable),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.641317033427425, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Name),Track.Milliseconds))", "score": -0.6509147612884879, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4626774498753179, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4749655422281703, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.48965114371514507, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.49268890870089616, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5019392360679975, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5041249356707277, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5049770010537485, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.51641302802358, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5196626025407234, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5223618515607609, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5266193293051138, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.531098504745912, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5319506434281606, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5341363430308907, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle),getData(Track),Genre.GenreId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.576722602783587, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.18984044409507628, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.Email))", "score": -0.4648014268858477, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.4785415134179405, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.Email))", "score": -0.5069440966780389, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.5763837127234734, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Employee.Email))", "score": -0.6042754368392462, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6297883060767112, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Email))", "score": -0.6305142908156801, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.6468807520258566, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.6517502214620442, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Employee.Email),Customer.Email))", "score": -0.673347178249694, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.6871658201623446, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.6892646291649266, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),MediaType.Name))", "score": -0.692423563706528, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.7202065852540535, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Track.Bytes))", "score": -0.08016541230608709, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,184946), Track.Bytes),Track.Bytes))", "score": -0.286568960204022, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,184946), Track.Bytes),Track.Bytes))", "score": -0.3983894344710279, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.49513858768708385, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Album.Title))", "score": -0.541525607026415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.5478675167424999, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.5669700622495473, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds),Track.Bytes))", "score": -0.5682099206590973, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5766065549571874, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.577563119405127, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5775751633597516, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,184946), Track.Bytes),Track.Bytes))", "score": -0.57972411395167, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5891067799154984, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))", "score": -0.6059703931660593, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.615323591912089, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.17915085881162174, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1900941300073853, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,11043559), Artist.Name),Artist.Name))", "score": -0.21014398857884353, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,!=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22089496061476638, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22282079638579458, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559), Artist.Name),Artist.Name))", "score": -0.22892074925432968, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2399255381579418, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.2646706462392831, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.265629745435643, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Track.Bytes,=,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.27316654755805897, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27708821841326725, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2839265067989441, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3095936633455675, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,11043559), Artist.Name),Artist.Name))", "score": -0.3097380380006514, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3115194724146086, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7045314),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.16476560212601757, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.1683079646087703, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2105514476579747, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.2122808832947516, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,7045314),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24734788913817407, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7045314),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2577527884771249, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27305621541044983, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.2872484407433494, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30517795036382717, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7045314),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3061581645620449, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.316800542371921, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.3260970565784582, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,7045314), Playlist.Name),Playlist.Name))", "score": -0.3316301410555663, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.3355815139171292, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.3622954136264113, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1435828926311869, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16472730195015645, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20492867877994456, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2057347268241569, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.21275854319245463, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22178126581518676, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.23023163278727302, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2369597389823932, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24019071319315627, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24634547237901785, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.24929553668499033, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2733275257175483, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2747544566476931, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2775421523511665, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32976703264280194, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3433057490358836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3555580945509504, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Gay Witch Hunt),Invoice.Total),Invoice.BillingCountry))", "score": -0.3570447974670438, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Gay Witch Hunt),Invoice.Total),Invoice.BillingCountry))", "score": -0.3698773187730011, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,Gay Witch Hunt),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Invoice.BillingCountry))", "score": -0.37883410721607413, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,Gay Witch Hunt),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.38659629144262325, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3894498873723933, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.BillingCountry))", "score": -0.39102714644869935, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4173419436786628, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42238419542445627, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Gay Witch Hunt),Invoice.Total),Invoice.BillingCountry))", "score": -0.4382015529352161, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.4412843101188398, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Country))", "score": -0.4544005010788661, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.4778677215877357, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Invoice.BillingCountry))", "score": -0.49195620475594165, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41585440347200336, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4365093347618169, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4715089948519077, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47982811756217914, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4872423917186996, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5004830488519926, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5078973230085131, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5151946375751436, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.521993279815901, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5246707138236207, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5358495688649572, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5406866679412643, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5410513483661012, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5425627458183497, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5426482111057145, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.26926536922411065, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.2746844059674683, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2939827585072706, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3173215152031586, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.3213175284828085, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.3324470232099221, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3328564885513896, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3391395274190408, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3522220121316725, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.37859606305191185, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37950482363025484, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37974550412532265, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,!=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38247304209371813, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.38368170557551395, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3899140836511623, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13390673481851675, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.15686189324418404, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.20647218871562034, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.20818070850026443, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.21987026589159972, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.22478181441800918, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22753147371038884, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.24961289623409022, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2643994241083957, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.2681225916892713, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27650163768763913, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.27995557918126196, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2856340035773796, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.2949025539474794, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.3088299988668163, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.21195761938550037, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.22803694095495802, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.26746026186764776, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.27270818254997775, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.27969112157108617, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.30073365901568355, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3071128253797423, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.33977346406723935, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.34176724049181395, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.Bytes))", "score": -0.36805951461840697, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3765818687671648, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38766955140775927, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3892623354705966, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.GenreId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3911931807807121, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3929516819243121, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4478118157806681, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4802885876526049, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.49994267109336726, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5110635117637178, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.515573224956364, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.5185972658314082, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5243885570895174, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.5488988291461663, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.5649083383701029, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,2013-05-03 00:00:00), Invoice.InvoiceDate),Album.Title))", "score": -0.6393805091829136, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,2013-05-03 00:00:00), Invoice.InvoiceDate),Track.Name))", "score": -0.6424321995726069, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,2013-05-03 00:00:00), Invoice.InvoiceDate),Album.Title))", "score": -0.6475953348307996, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Invoice.InvoiceDate),Track.Name))", "score": -0.6543602675734396, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,2013-05-03 00:00:00), MediaType.Name),Album.Title))", "score": -0.6587679966642943, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Invoice.InvoiceDate),Album.Title))", "score": -0.6595234028316322, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.23786443563119672, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.25515461520597027, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2698949525059383, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2706040241695527, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2851425327238447, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2854093411870245, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2904695594967318, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.29148525985241286, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2932905596755013, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2951477966388007, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2963314642378085, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3070925577014835, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.32343370341531297, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,>,2003-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33094121500702045, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3389771915241622, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14944592477196073, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14980151269953362, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17706601276652356, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.17908134596442185, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.18398886518837235, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19762947172133669, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19983515506349064, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20695691084675452, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2127540573043347, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2406288161134606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.24700532490288812, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2599223262524857, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2684410762177949, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.30584401024072555, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3326657223139038, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.14603425782115664, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.2123483590403339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.FirstName))", "score": -0.3572518847504398, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.42317797463329043, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.FirstName))", "score": -0.42356598596961703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.42799391072185244, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.FirstName),Customer.Phone))", "score": -0.468375800512149, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.4894920758524677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.FirstName),Customer.Phone))", "score": -0.5346899017313262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Telus),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.5511794333101321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Country),Customer.Phone))", "score": -0.5585738703230163, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.5790592603007099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Telus),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Employee.Phone))", "score": -0.5939609974410497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Employee.Phone),Customer.Phone))", "score": -0.6024571343878051, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Country))", "score": -0.6054616145411273, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23551796216531418, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24238086472442535, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.25621795650671747, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25791461208290956, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2641112831939955, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.2666153235395025, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.2745329075965466, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.28493027462933157, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2943032522997781, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29796073225260394, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30099242293530387, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.32921248313371876, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33114862923985744, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3468927849659077, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34745119418113085, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4109634504363318, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4226738137807198, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4244323952492787, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.47500285775739953, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5018843098056583, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5022996190578471, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5135946731500463, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.514009982402235, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5153532546186053, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5157685638707941, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5240033104919662, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5428094417283912, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5448846407605634, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5501131010387643, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5521885313817487, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.024422181277652107, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5560435086884175, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5746099181320017, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.5865379239507766, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5877236903492915, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.597477829013777, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6080458859472635, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6345618011582483, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Customer.SupportRepId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6400127018836324, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.6843700819590595, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7038065497604825, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7058451872925643, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7223729683412341, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7745731140548272, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8645216161841371, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.19690124044648658, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.2618670338866996, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.28998977962115574, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.29663055980717623, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3007954525276057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.30875636460124795, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.30947593370154464, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Name))", "score": -0.312139010769697, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3436904912668979, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.35249035936467316, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3558592116314685, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3559374872543067, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.3615837278438102, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3633345228674837, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.36759062965485106, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3800969298311081, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3975813490215944, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4042310393806878, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40943065754371377, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.419043340054691, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.Company,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4197785260554786, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4226494828471355, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42656306607784933, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.432199758026192, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43580590081863646, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43755341276049103, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4416475845978785, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4821151615601678, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.48751306072995754, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5285803696649648, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13535548406194634, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.1755932327384591, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.188166253808364, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.20021154156012536, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.2607919323155635, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2710108610397117, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2845071246392403, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2889686483583614, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.2972928232921828, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.30834886970157593, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31350088522313835, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.31796714675356574, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.333215247548421, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.3384775441063366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.36515637910366183, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21313486965065154, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.22723087496449346, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.22867304020427406, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.23925981784845357, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2452892715796188, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2480870901414436, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2522608334312753, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2546907510007498, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2588986149557288, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2616014820594976, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.272031166462018, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.280593579080219, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2840981343527904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2931737483469848, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3017422019471479, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.19193902292260695, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24039172574589449, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2435574967163936, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24665457260469148, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24909571510394424, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2626718419841082, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27217005853130793, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2750173866298544, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28132736395222907, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2825105148573504, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2963771568558886, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30303511107818887, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3050767470300359, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.324386694752565, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3525468753874107, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24703043463382465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2608402097639291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2847011347488028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29851090987890727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3636564961725526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.36856064713538217, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38196298907339205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38967861251037583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4101361385637574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.424948732068242, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4326643563358774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44446785516083764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44504747307837533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44937200612366723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4495190505333011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,>=,1), Album.Title),Album.Title))", "score": -0.26518183931329986, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,<=,1), Album.Title),Album.Title))", "score": -0.3409799633882358, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.34695929273584625, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,>=,1), Album.Title),Album.Title))", "score": -0.3732510803602054, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,>,1), Album.Title),Album.Title))", "score": -0.3976913092992618, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,<,1), Album.Title),Album.Title))", "score": -0.3989446906707599, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.42275741681078216, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.Total,>=,1), Album.Title),Album.Title))", "score": -0.42492230221250793, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))", "score": -0.4402609788707962, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,1), Album.Title),Album.Title))", "score": -0.4445273116786291, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))", "score": -0.4490492044351413, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.47642354355774835, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,>,1), Album.Title),Album.Title))", "score": -0.47946876272180816, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,<,1), Album.Title),Album.Title))", "score": -0.48072214409330627, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.Total,<=,1), Album.Title),Album.Title))", "score": -0.5007204262874438, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.36520741944207225, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.37012657350485767, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.41321168378635775, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4330461132766525, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.43796526733943797, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4526013968061374, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.45752055086892285, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.FirstName),Employee.Address))", "score": -0.46401142175382004, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.FirstName),Employee.Address))", "score": -0.4689305758166055, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.479121079745586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4797349910657382, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.48538309883307523, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.48661388966833763, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.49030225289586066, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.49153297284885544, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2407392942162652, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.2432537801736912, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2787661352980803, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.28107500760916504, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.28835211334494676, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29694852974164315, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32061332937678155, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Album.Title),Album.Title))", "score": -0.32091348980999684, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32187716498097446, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3256443642948545, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.34553006200745295, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.35278668636196486, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.35529191185439624, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Album.Title),Album.Title))", "score": -0.3619320465062517, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3791321012802409, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.1629288318217732, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2692845664756293, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.27382623963186953, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.27787553093614553, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2784906436542761, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3038693021574249, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.33249038461575886, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.33653967592003486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.35128659455671, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3575429375282127, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.3594516637385823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.36889125568017683, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3986120274164506, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.41345605900432125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.41389726133896343, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.017130950522181696, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5442541325700628, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.8588452940032247, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9301693143131387, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.9606942817918025, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.0167838364579698, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -1.0322383329621516, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -1.0462411180487834, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.046330904995557, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.2041090432420214, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.2152548332836186, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.2321468981797719, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2725355799372287, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3250585136057043, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3292288090644842, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.23546287464278115, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3174192216937583, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.32572995217557166, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.34969818899274674, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3532142247385895, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3542006662757003, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3793421687479022, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3798786183206114, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.38054670605483276, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3920117414557293, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.39693724715742584, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Invoice.BillingState))", "score": -0.41316412346397297, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.417262443818783, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.421335226672242, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),Track.UnitPrice),Invoice.BillingState))", "score": -0.4313617047329777, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18922450409705852, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.22748510500675195, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23929057987911387, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24260749077750698, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25954799673135687, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26309249392151873, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.296481404435832, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2970074572590799, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.30817347751194013, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31185735813560383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3298389335157173, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3390121170555081, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35351305698563923, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35812210774747655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3590541365989916, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.13271233578416286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Employee.State))", "score": -0.34409042586776195, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Invoice.BillingState))", "score": -0.35206981887313304, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.Country),Customer.State))", "score": -0.4215841046461719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.State))", "score": -0.4452142509649142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.Country))", "score": -0.460818552870478, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.48348829847964225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5145923863092321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5152485142389196, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5280409834007131, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5308307765513268, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5334064043054241, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5388929317657496, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.541682709964635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Invoice.BillingState),Customer.State))", "score": -0.5506531945356983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.07650124187914009, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.32538613355427515, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.40924355438619386, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Employee.Email,=,None), Customer.Email),Customer.Email))", "score": -0.5976907951262547, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.6378329937288072, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.Email,=,None), Customer.Email),Customer.Email))", "score": -0.6815482317906572, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.7118973634642316, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Employee.Email))", "score": -0.775523362465602, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.7783107586108016, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Employee.Email),Customer.Email))", "score": -0.7825424285110785, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Employee.Email))", "score": -0.8113855920237256, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.8310992638390496, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.Email),Customer.Email))", "score": -0.8327093154737782, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.8462022647606005, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.8578432635535188, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.25742887986718427, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.26245913617731065, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.276945705218546, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.28248455633011577, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2856978793930365, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.29334846358532873, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3000863089269361, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.3012708602179671, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.308603867975277, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.3108968254660522, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.3188192464837936, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3201117290797412, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3262364012893518, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.3274758741248258, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.33859714788836637, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31823076671639744, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32145364670733684, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3618982779946049, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3725954527492144, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37446627859976783, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3854015920476554, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3933772013867601, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3935197686086319, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3982750616052829, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3984916002142723, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40291711433018224, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4075265779278868, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4100235711945553, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4130398974645028, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.4183949794709694, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2295558441905071, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.24679497808866133, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.24975274828853364, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2674673315174054, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.27031565188843965, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.27176263832602143, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.27318258454442373, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.28683519284504994, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.29542552719529447, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2964340591451926, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,<,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.30019197661819025, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31043827838976806, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3108637473486347, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3137561591751106, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3169036669485306, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3742127004319272, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.39903767500895193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.40853724561305244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.41413540111079783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4232446728000354, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.42327481749405244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.42952010820137426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.43629760013118357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4435184219203513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.44607613060133966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.44942382693806143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4522603138761949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4575692179811606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.46223221557662936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4638446449507513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.11695032284114859, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.30827289164517424, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4085997084067892, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.PostalCode),Album.Title))", "score": -0.4168191896424105, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.LastName),Album.Title))", "score": -0.45166650876853964, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.4585063801750948, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.46084624991271994, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.46354649052554253, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.AlbumId),Album.Title))", "score": -0.4742200718865206, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4750236055395598, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4912306526348402, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.Title),Album.Title))", "score": -0.5991579042420199, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Employee.PostalCode),Album.Title))", "score": -0.6081417584464361, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6252231411308458, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.City),Album.Title))", "score": -0.6416302621037175, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1311291113486909, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13492008476456077, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.15971772821555988, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1621092381600921, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1907409028759646, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19433589268992854, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20149753431781073, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22339993122355614, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22354347750251974, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.22871543426388422, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23539798366479833, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2504368387366172, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3031182133711, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3504042519455009, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.40802425521579705, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2752594604810308, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30083863041857123, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35554558626759253, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3632605793324922, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37721277427384337, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38131125246585407, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38612359403890667, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38710689093054407, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38883974927003256, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3900739387784953, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3902887496300543, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3909005843449896, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39272916123659757, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40071354810451254, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41497829496914707, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13117861797582825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18423822069876758, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.19805834010153284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19982150746567703, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.22025285537294736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2214993065908338, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22310472433166778, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22353299930425422, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.25560585710418093, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25595755506082324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2721787000595667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.28030360985015035, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.28554379029241117, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3274306596650587, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3451312117493197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.3459898841610993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.36917281272326363, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.37897986295138253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.40216279151354684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Customer.Country),Employee.Country))", "score": -0.46095924945984734, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.47666852297697915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Customer.Country),Employee.Country))", "score": -0.48414217802201165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Customer.Country),Customer.Country))", "score": -0.49394922825013055, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.49985145153914345, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.5096585017672624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Customer.Country),Customer.Country))", "score": -0.5171321568122949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.5219665107360925, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.5328414303294267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.5451494392982568, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Customer.Country))", "score": -0.5549564895263757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Milliseconds))", "score": -0.21063808801409323, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.21484944674011786, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Composer),Track.Milliseconds))", "score": -0.406859909024206, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Name))", "score": -0.4288806773984106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Name))", "score": -0.43309203612443525, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Composer))", "score": -0.5058426119649084, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Composer))", "score": -0.5100539706909331, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10547154), Track.Name),Track.Milliseconds))", "score": -0.5422426870354684, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.546454045761493, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.TrackId),Track.Milliseconds))", "score": -0.5534178361558588, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5918477583446005, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,10547154), Track.Name),Track.Milliseconds))", "score": -0.5935858896264108, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5977972483524354, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Genre.Name))", "score": -0.6517810636212618, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.6590132434119942, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.023688185646704787, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.718009763420425, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7605797823958703, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.847357421071222, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8829146424766382, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8888878089712045, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9780907835959188, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.0050968153471687, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -1.0252259460872835, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0404689965155254, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.1031962222793923, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1560816744000657, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -1.165950453275668, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.2207582962964105, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2490632991603647, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2564002766771209, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28012769315763086, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.28071076358430735, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2862962673710972, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.2893792916027125, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3105642024971289, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.315736072148557, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3230814360522862, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3266297085420332, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.32997634659206126, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.34051356551231315, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.34891286640312946, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.UnitPrice),Track.Name))", "score": -0.36378985122602087, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3642307613638298, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Employee.LastName))", "score": -0.370436885414782, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.28708631262998097, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.48097376377312173, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.5062907534076815, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),InvoiceLine.Quantity))", "score": -0.5516574946256686, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),InvoiceLine.Quantity))", "score": -0.5769745484972835, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5786794390792864, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.5872459194129972, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.588524281110139, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.AlbumId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.6138359490369475, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6145740815311636, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6151143107340893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6199723293947907, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), InvoiceLine.Quantity),Track.Composer))", "score": -0.6304795579103551, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), InvoiceLine.Quantity),Track.Composer))", "score": -0.6312356498222083, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.6319103297733785, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.166163322003284, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.18269835674960094, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19341221792603366, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.20517977291251968, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2094177993335646, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23369131460841522, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24926594781162176, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.28667149716158336, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.28722866514876794, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.29410160869558566, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30765853803592835, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.31783585190660707, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32914600339900896, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3394403439419852, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3563215217245899, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.28019196955574444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2926643606842845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3924505230606883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.402153324765095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.4049229141892283, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41462571589363506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.4199826237381785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.4265816923798411, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.43245501486671856, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5144118782700389, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.5268842693985789, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.538840245884785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.5419439789475291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5485430475891917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.5508856498272507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.3614955975433005, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37915322309802474, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.38951107615042296, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3898467085597874, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.4018124162398916, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.4041055540792001, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.4200157483236459, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4304198353773055, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4355352396006421, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.436145719266017, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4386337663390217, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.44111332083906823, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.447007551368262, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.449030436350761, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4494956207469698, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.271672968587076, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.3865833409513602, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4150989874340093, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.42846267449338604, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4348993032680025, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.44436179785583435, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4447072610850422, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4618051713530241, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4718830966479548, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4721134390261568, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.47231527453975114, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4883580164927526, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4910418349415333, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.49145172401536197, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.496048650264706, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21180485233561303, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21227066922951554, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2147145781591137, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2576301146973104, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.267784463710281, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2701713440424858, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.28325781001278694, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28402302536347107, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2929821850648287, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.3192553398567019, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3208061385645496, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.32304621494037333, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3304961315824008, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.33503655954579414, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.33829603213079484, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.35135943326621666, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4138001565950809, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.418297371975066, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.46301391197504316, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.47956051889977713, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.481120123712389, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5150047291805924, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.515615394644124, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5279362630939713, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.534808094270024, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5464984576086265, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5535197884510438, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5537589053774253, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5550615600548962, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5819426336765552, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.20873162586940452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.3411614640499465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.34595867682946846, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.37304572452558205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.3889925225521438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.City))", "score": -0.4637120745028369, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Country))", "score": -0.47654853080166504, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.47838851501001045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.City),Customer.Address))", "score": -0.4894824891234748, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.505475562706124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5112991078640334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.State))", "score": -0.5172737619723193, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.5262195735122077, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5511487486655824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.5533066212083213, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.36813745712646606, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4180208485579003, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4185289661207812, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.43051525701700577, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.43619442207120623, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4363968142987816, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4436543788016177, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.44829010568704647, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.45494145845605427, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.45554758574030585, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.46189514597043163, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.46219902295889037, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.46683474984431916, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4691527608661299, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4740923716621139, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.16648549876020965, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2462449896639069, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26486429601046224, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26591282980428477, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.2843116470457711, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28716020644768625, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.290898679008299, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29303153925167497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3126993793920529, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.3215065542713801, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32589531013489226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3277680295903379, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32963377826536333, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33416556719405954, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.35372021801688946, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.23123127341386862, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.2837726560246665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.FirstName))", "score": -0.30661445230362006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.LastName))", "score": -0.35915583491441794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.Email))", "score": -0.421467238367768, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Email),Employee.FirstName))", "score": -0.4304948386561591, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Email),Employee.LastName))", "score": -0.483036221266957, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.Email))", "score": -0.49685041725751944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5029927697790941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.5163196993320806, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.FirstName))", "score": -0.5464742918729543, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5527256141961274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.LastName))", "score": -0.5598012214259407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.5660524019845785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5868309206857948, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2233966755838992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30111701219993847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40820160376373604, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4085865210579482, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4137773755164744, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43178746567883625, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43217238297304844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4348196717546853, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4352045890488974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4574496087629897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.46032980491847686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.46372106104809063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4661634940050662, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4828460448580545, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.488138496045911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.11279626504619955, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.30614186392267584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.32625020609339117, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.3311251507802808, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.40233028994043707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.4945318208738172, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5057565675779188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5171272860570753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.LastName),Customer.FirstName))", "score": -0.5177433168246353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5242539750142896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.LastName))", "score": -0.5962686015955114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6252082990213239, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Email),Customer.FirstName))", "score": -0.626255658800801, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Phone),Customer.FirstName))", "score": -0.6352450525118911, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.Email))", "score": -0.6488763167253637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.09485610271254605, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.4326059852407398, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.45635440088376833, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.4709371451065071, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.5130738520711495, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.5950877836238238, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.7266615655599482, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -0.7833401233528373, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.8086870276347008, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Invoice.BillingCountry))", "score": -0.8285897593478854, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.8336059355987627, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.8580408436582939, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.8815161725360164, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Fax))", "score": -0.8891548944651105, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.8941597204923671, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.5894734341808113, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.5962364618857161, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.6043615473401825, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.6052183817997797, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6105243423412893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.6162769966360696, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.617900849775255, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6198656372964948, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),Track.Milliseconds),Track.Name))", "score": -0.6275137732360578, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),Track.Milliseconds),Track.Name))", "score": -0.6308663217527507, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.6311650425126634, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Milliseconds))", "score": -0.6328200761028172, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6341535177520679, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.6387734003123972, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6469328419161509, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.22582718736170365, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.2897030457085721, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.3011308216252322, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3335391348099993, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.33946919343916465, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.34324663857089804, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3630784376423073, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.3656872766149553, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.3817764837082805, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3909060444697197, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3909733096423814, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3935617976460568, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.39365124191336376, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.40666477504212645, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.41284458537289986, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.09073948565128376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.3268041879236989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.43083846087756683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4825668043777952, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.49426043297353317, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.49653751438698096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.49802443090084125, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.498300439435717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.5268512413242229, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.Total),Invoice.BillingState))", "score": -0.5334179306701117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5353873055832513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5380403679470956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.548256486299032, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5599154298350781, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5639901213569538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.14961944850014866, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.1752383418157149, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.17649908092118816, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.19978965978307553, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.21134400850086216, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29469268537245624, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.32797065110297, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3392225089247131, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.36819180723903366, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.3717782261077582, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.38928001562965, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.40706600391917225, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.4143980360333229, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.4152223878074148, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.4212013457347537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.08402178273586051, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.37148284469003556, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.4775931194817531, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.5257063016688335, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5564070654572554, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5659744695221889, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.585544007372864, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.5998072933394657, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingCountry,=,None), Artist.Name),Artist.Name))", "score": -0.6045601174628246, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6139703423723505, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Employee.City),Artist.Name))", "score": -0.6524386380260694, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.6617400452887523, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.6720847443139064, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.6880270132726287, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.PostalCode,=,None), Artist.Name),Artist.Name))", "score": -0.6979271166419494, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blues), Invoice.InvoiceId),Invoice.Total)", "score": -0.2797926275258101, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blues), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3022170939805846, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30914458216865953, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3214634640834386, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.329343864413933, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33058991472409727, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33444975387497766, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33507894521689985, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35014231296175174, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35463134345455427, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blues), Invoice.InvoiceId),Invoice.Total)", "score": -0.3588090293239814, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3686787588980488, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3740112450998478, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3785599613364316, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3810744707861012, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.2693282232283365, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.2919154500119432, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.29233859201235307, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble), Track.Bytes),Track.Bytes))", "score": -0.29663463669052803, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.34230826815477977, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.34766351535822515, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble), Track.Bytes),Track.Bytes))", "score": -0.3536857866433413, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.353856247148056, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,Philip Glass Ensemble), Track.Bytes),Track.Bytes))", "score": -0.3709816625196254, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Album.Title))", "score": -0.3716352523450353, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.37183597132506063, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.37232549766730755, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.3750337605434679, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.40080048512895694, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.4056279462462522, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.26339553603623117, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2641157018382229, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,Rock),Track.Bytes),Album.Title))", "score": -0.28860432776640554, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2994239702485479, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.31874197486954076, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3218380729669164, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.33176998216307585, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.Bytes),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3374449272650067, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3391078330883041, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33945458131753586, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.34094140776384835, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,Rock),Track.Bytes),Album.Title))", "score": -0.3414597364092129, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35930389688596576, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,Rock),Track.UnitPrice),Album.Title))", "score": -0.3825939741557951, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Bytes,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3900035306308297, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.33287026518168594, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.3702921729673399, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Album.Title))", "score": -0.3773441582239502, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.38667142173218894, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.UnitPrice),Album.Title))", "score": -0.3873731381688309, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),Album.Title))", "score": -0.4004139780292819, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes),Album.Title))", "score": -0.410955900465401, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.4187913624781663, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.4192229690360539, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.4202869558823925, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.4224521300602965, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.UnitPrice),Album.Title))", "score": -0.4247950459544849, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Album),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4322896337966191, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),Album.Title))", "score": -0.43783588581493593, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4384517574728029, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28226166722418894, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.29193117350093056, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30472227715356826, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.32737293736406164, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33346745345634904, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Invoice.Total)", "score": -0.34516839271536176, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3611125478330045, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3630868489226116, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Invoice.Total)", "score": -0.3673556828973121, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3700558539215587, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (780) 428-9482), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3815883124026541, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3882166767190293, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.3910523148789297, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (780) 428-9482), Invoice.InvoiceId),Invoice.Total)", "score": -0.39562025173716003, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,+1 (780) 428-9482),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.39850408530054626, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25406303526688134, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3337644589119009, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33608242394257104, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3963412243320839, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.41578384758759057, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4356112581663183, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4442506863738866, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(filter(getData(Customer),Customer.Address,=,AB),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4909007880572646, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(getData(Customer),Customer.Email,=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4928214283408319, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(getData(Customer),Customer.Email,=,AB),Employee.EmployeeId,Customer.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4971526247097308, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(filter(getData(Customer),Customer.Address,=,AB),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49924431469452585, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5135361091423627, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5153126818113378, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.536136756556516, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5472063262932352, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.2440351923214621, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Track.Bytes))", "score": -0.30533707935683196, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Album.Title))", "score": -0.33947856400482124, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.3700545360552496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Album.Title))", "score": -0.4007804510401911, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Album.Title))", "score": -0.4654979077386088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.4944928814875311, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.5402455831281969, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5433500760494329, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5543311947490533, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.5621935596243304, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5623671905303377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99), Album.Title),Album.Title))", "score": -0.5724555731500163, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Track.Bytes),Album.Title))", "score": -0.5768644767789519, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99), Track.Bytes),Album.Title))", "score": -0.5988124532750853, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.22693193974919268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.23782937116154354, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.275024439124536, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.27849687083172986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),Track.UnitPrice),Track.UnitPrice))", "score": -0.28921053586055506, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.30662514796370716, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gustav Mahler),Track.UnitPrice),Track.UnitPrice))", "score": -0.3237714992212127, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.32392685775132746, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,!=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.3283398849052901, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.3449760913950241, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3483569095016136, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3556556928110106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3637426787718922, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.3764323842806334, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3830965458914726, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.15232212771155182, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1876105056464521, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.1996707425778092, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.2097036217190706, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.27080324207176293, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2905048266016859, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Genre.Name),Album.Title))", "score": -0.31929662365975314, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.32203758284838746, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.32353381065817066, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Track.Composer),Album.Title))", "score": -0.3387437762899317, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Rock), Genre.Name),Album.Title))", "score": -0.3401732138712747, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Artist.Name),Album.Title))", "score": -0.3414199231078029, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.35136730973091057, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.41945227584139394, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Genre.Name),Album.Title))", "score": -0.4248626060191235, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Customer.FirstName),Employee.FirstName))", "score": -0.4945137761340144, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Customer.FirstName),Customer.FirstName))", "score": -0.5019922523103696, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Employee.FirstName),Employee.FirstName))", "score": -0.5899164906688775, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.5928009104308904, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Employee.FirstName),Customer.FirstName))", "score": -0.5973949668452326, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.6002793866072457, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.FirstName),Employee.FirstName))", "score": -0.6117943725609818, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.FirstName),Customer.FirstName))", "score": -0.6120912064090035, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.FirstName),Employee.FirstName))", "score": -0.6438781211581901, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Customer.FirstName),Employee.FirstName))", "score": -0.648142820684172, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.FirstName),Customer.FirstName))", "score": -0.6513565973345452, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.FirstName),Employee.FirstName))", "score": -0.6677257801390636, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.FirstName),Customer.FirstName))", "score": -0.6752042563154188, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.FirstName),Employee.FirstName))", "score": -0.6882036249657536, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Customer.FirstName),Customer.FirstName))", "score": -0.6929530577180877, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4438023520279495, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.45481471910293153, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.47524394939021086, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48625631646519296, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.49923385823410205, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5013785669805556, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5102462253090841, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5123909340555377, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5153256797415131, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5172670187451929, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5198745490052262, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5263380468164952, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5306753818718017, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5416877489467838, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5818084081350846, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19846803617061692, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22326047753064843, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Track.TrackId),Invoice.Total)", "score": -0.28109634261928157, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28816782438688415, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29830056782398395, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3097744143597171, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3126927938051656, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32934301072475314, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3341102423437338, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33415220059890555, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34610426075711515, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35772580020557576, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3606513672027578, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36201458614892656, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3703638573551671, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.1201968811074039, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.3126145027199527, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.343231974504306, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.36532145958335605, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.42019552025885787, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4211356028536102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.46301037292869296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.48245956968457904, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.516238509080722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.5356495961168548, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Customer.City))", "score": -0.572773726991727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.5883565529802581, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.6126131418714067, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.613553224466159, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.64323061365576, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.46438277883135015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.47026683760486776, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.520468730457651, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.5263527892311686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Porto), Employee.Country),Employee.Country))", "score": -0.5457180849989527, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Porto), Employee.Country),Employee.Country))", "score": -0.5516021437724703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5524948946913355, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Customer.Country))", "score": -0.5538388527711504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5583789534648531, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Employee.Country),Customer.Country))", "score": -0.559722911544668, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Company,=,Porto), Employee.Country),Employee.Country))", "score": -0.5657352320631617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Porto), Employee.Country),Employee.Country))", "score": -0.5716192908366793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Porto), Customer.Country),Employee.Country))", "score": -0.6018040366252535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Porto), Customer.Country),Employee.Country))", "score": -0.6076880953987711, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.6085809506257647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.27324304713077746, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3234887222623335, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,1),InvoiceLine.Quantity),Album.Title))", "score": -0.36125021551840264, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3729592169039053, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3799131670090931, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3805499356454929, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.385036158538014, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer),Album.Title))", "score": -0.40574606990616696, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.40781639997476754, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.42705398577203507, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4271562284759811, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4290378058516365, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.43015884214064914, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4307956107770489, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.43528183366957, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.06531698135222541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.4474860878617619, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.4837914115705644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Fax),Employee.PostalCode))", "score": -0.48744484195049154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,+1 (403) 262-3443),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5035882435740298, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5073948980898422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.Name))", "score": -0.5260284661271726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Customer.Phone,=,+1 (403) 262-3443),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5325083042585722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.Fax))", "score": -0.5391550778367673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5509572794857521, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.PostalCode))", "score": -0.5600492597513949, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.562820812504492, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.ArtistId))", "score": -0.6032801686742459, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.606410086802498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.6203577757769381, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.06985550699993869, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.24173525483638514, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4986147141193147, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5078025157126831, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,None),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.533318619647755, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,None),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5363070891493905, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5404703679343615, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.543854637373365, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5519098945110118, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.5643730470050252, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.5677573164440287, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5805196220971993, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.5979140398830738, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6792133729468333, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Customer.LastName,=,None), Album.Title),Album.Title))", "score": -0.6925907427939819, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2137288069619809, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.25701807688513795, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.29872326042886516, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3095397151789413, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3143836631557458, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.31644963495723305, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3300233297993177, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.348034936096954, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35135615473895154, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3539892946678356, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.35523790515435394, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Playlist.Name,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.36268746268606594, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.36690536014892705, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3745936018839256, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3828530153953597, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.22767379636934493, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.24445071573427413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))", "score": -0.24718752260378096, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,IT Manager), Employee.City),Employee.City))", "score": -0.30889215822389815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.44472073030478404, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,IT Manager), Employee.City),Employee.City))", "score": -0.47043697292974684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,IT Manager), Employee.City),Employee.City))", "score": -0.48797644431761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5409532509656856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5577301703306148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5604669772001216, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.5638548468267752, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,IT Manager), Employee.City),Employee.City))", "score": -0.6073507791297743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.HireDate))", "score": -0.6111030721949646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,IT Manager), Employee.City),Employee.City))", "score": -0.6221716128202388, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,IT Manager), Employee.City),Employee.City))", "score": -0.6257734423415968, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.042633549448510166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.47098932847988223, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.534948831096699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5353066222683986, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Phone))", "score": -0.5511171982143424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.5530080959651968, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.562179286628104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5667882532424225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,>=,AB), Employee.Phone),Employee.Phone))", "score": -0.5669319053631625, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Country))", "score": -0.569391268909385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.State),Employee.Phone))", "score": -0.5766545698497794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.FirstName))", "score": -0.5772040073279641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Phone),Employee.Phone))", "score": -0.5892517586689792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.State))", "score": -0.652943867862632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Customer.Phone))", "score": -0.682839173496177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19636674952205055, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19975686244023394, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20914557833061087, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2187898646213677, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.226963703052156, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23294177270463895, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.24639602065436025, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2505430039616573, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2528313904429845, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.26776356358092546, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.28636543745419385, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.30617035312614577, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30693187347857903, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.3085636387387646, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.314878472228287, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2897805680013016, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30691022658981965, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3442164421707825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3571068389797146, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.36134609478681223, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3993845280242965, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4261601028082383, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4271875116024718, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4284777917744019, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4321845233455913, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4328184651173013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4402099587176061, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.44034181826556923, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4468232450178899, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4529806884086145, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.21045097515851843, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.29512817505895267, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.30369105004836056, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3288311088562754, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.33686117084451145, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.3448193433622099, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.35541768809635527, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.38349856125702225, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.3844472015291502, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.3961879798556514, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.40854485568620263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Track.Name))", "score": -0.4207660006483923, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.42168894399270185, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.42277216062757167, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Track.Name))", "score": -0.423069089574114, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2567721240900895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2757488621208399, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3007946949630952, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3083672447205908, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3099600490546289, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.31913373275714746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3254494018097334, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.32893678708537927, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3296769481013202, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.34375047495805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3466952480277566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3539826199276346, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.35611492909912656, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36364842579232043, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.3706943712850752, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19561149623736646, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.19627699542116175, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19944054019725058, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.24476606106204138, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25044132903417005, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2505584255450522, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2507688505282229, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25587531200949554, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2567222365040764, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2580015720849424, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.26550831035110906, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.269402260780431, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2759560092428919, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27889719480469005, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28253212931118526, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19951360360661374, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.20257270432065855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2365616194402297, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24024963005615954, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.26609529139962346, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.2740485653594846, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2831829282371878, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28656978930910243, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28663799227549386, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30525307475176483, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.32243712507850303, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.33039039903836415, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3382439269192534, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3430105483988816, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.3732159959567668, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3145300695759943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3330773661000421, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.39273454491922166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4112818414432695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.44109624122211244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4421191835863283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.44271074478456285, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4591278234584024, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>=,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.4596435377461603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.46066648011037614, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4612580413086107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5193007165653398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5203235620720079, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.537332201944082, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5378479162318399, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14473826558879033, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1705263413726694, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.1926827494903341, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.20600635242383064, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092), Playlist.Name),Playlist.Name))", "score": -0.2145529592785675, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24494856766065384, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,5194092), Playlist.Name),Playlist.Name))", "score": -0.24512633353397328, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25718011720463557, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2779025571752922, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30234001023183016, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3092111783781653, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.32162351276237955, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,5194092), Playlist.Name),Playlist.Name))", "score": -0.34545117650327595, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,5194092), Playlist.Name),Playlist.Name))", "score": -0.3704521811583299, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,5194092), Playlist.Name),Playlist.Name))", "score": -0.3853568299585219, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.37259485891263466, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4082848312536953, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.41391132345597725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4496012957970379, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.469608883766341, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49103675356309395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4955328511277912, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4966945195774315, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5052988561074017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5267267259041546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5312228234688519, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5323844919184921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5380109925026773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.558758773302543, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5737009648437379, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.10510828321639565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3024069925195363, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3590356434383098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.36582680261998185, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39224114611340977, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3990323052950818, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.42274322830277655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.43746901940791677, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4380588771200564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4642355151442175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.46664570870220695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.47343686788387906, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47524733501155214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.48004713371010016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48203849419322425, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31805929331552535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32497956065162725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35214514670952335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3536091534957929, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3819828200550201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39655201465689915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3980160214431688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.41622002742625075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4237006951206173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4251646858476231, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42804265748287496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4309794800023323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Track.Composer))", "score": -0.4396532905499494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,1.99),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.45335446318157524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Track.Name))", "score": -0.4536023550613309, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.1860684797193244, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.19370574206368474, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33252357201881305, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33656848841969034, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33980656983552243, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3597076957622081, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3654696305733497, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3681046147033938, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.37367369091951214, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3737160803044986, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.37908444047058526, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.40882620944710213, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.4137214019920066, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.41443767504820694, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.4392139919127658, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.19456242164051218, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.24727867682850047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2697277083007066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.32244396348869486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4726138762143819, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Customer.City),Invoice.BillingCity))", "score": -0.4906866545734374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5253301314023702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Customer.City),Customer.City))", "score": -0.5434029097614257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5477791628745763, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5526386215296952, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5548386028913228, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Customer.City),Invoice.BillingCity))", "score": -0.5658519412336318, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.566031217103955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,!=,Finland), Customer.City),Customer.City))", "score": -0.6056532882567832, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.615846229227711, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4194799493061928, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Track.Milliseconds,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.42081192530746925, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.43121743776895005, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.435062482645306, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4366233719923431, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.43922990821652097, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.45637333090267124, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4566856383810759, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4679677123613192, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4706427765062019, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4743391522067788, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.482998410670258, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4851111350474694, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.48771767127164734, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4877861991923521, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Country))", "score": -0.45415122007761966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Email))", "score": -0.46599692797099124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Country))", "score": -0.47021705603037844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Email))", "score": -0.48206276392375, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Address))", "score": -0.4989325473252393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Title))", "score": -0.5142050454560376, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Address))", "score": -0.5149983832779981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Country))", "score": -0.5246062943879224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Country))", "score": -0.5299916336480237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Title))", "score": -0.5302708814087964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.Country))", "score": -0.5306333968583203, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Email))", "score": -0.536452002281294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Email))", "score": -0.5418373415413953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.Email))", "score": -0.5424791047516919, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.FirstName))", "score": -0.5535704562607862, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14649980774142546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.21424856763115607, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23285440106191452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25471833765915863, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.2637718236652492, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2650207001202926, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26985403873113684, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.27016931585983744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27588520385781934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.28796642908228687, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3112177626177382, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.319754868402438, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.3204091117328854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3239843678449189, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.33432879307723995, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.49305499224966487, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.4945381239577759, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Genre.Name))", "score": -0.5073780923319786, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5075474034885539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.509030535196665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Genre.Name))", "score": -0.5218705035708676, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.5275420551842345, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Genre.Name),Customer.Company))", "score": -0.5281024415320243, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.LastName))", "score": -0.5290251868923456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Genre.Name),Customer.LastName))", "score": -0.5295855732401354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5298393096076285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5300630494854787, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.5313224413157395, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.5315461811935897, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5402844120306649, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26937009538021567, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3063281185953491, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33135315821264477, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.33253802403667726, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.34334739264825903, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.36420432270143244, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3670088949432939, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3836204620698218, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3887557976349011, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),Track.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3955047829012598, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.41158295898174696, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,PlaylistTrack.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.43774631463930824, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.45082451807870755, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.45853699683729604, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId), Playlist.Name),Playlist.Name))", "score": -0.47313361596285713, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.15215181621169904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24325500271380715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25267015699190826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32761971118598926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3289534598150755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33703486546409034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34078810021413825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3571912493010451, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37388898543518256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3825480813757167, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38591399581986574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,<,13.86),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3906626400114915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39532920678993677, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4045645501489299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4046457360681773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.09297096908994718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.39627375155168915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.44642258149542613, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.45575254310824675, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Customer.State))", "score": -0.474567064018629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.Country),Employee.State))", "score": -0.4832714804724674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.49795772985174364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.49910991491718476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.Country))", "score": -0.5036387526706676, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.5119113551491432, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5160058076253663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Invoice.BillingState))", "score": -0.5220585928700983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.5260591549987078, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Customer.State),Employee.State))", "score": -0.5349618205145816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.5491695319578866, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.28415149378494475, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Country))", "score": -0.3418987649064787, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3555819205956686, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.3649410468713309, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3694862748215323, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Company))", "score": -0.3768662884417408, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Country),Customer.Country))", "score": -0.3801117365197194, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Company))", "score": -0.3887944333151585, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Country))", "score": -0.3922447406618361, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.393922068287506, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.Country),Customer.Country))", "score": -0.398414991114496, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4083700274842924, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.4127974063644111, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Company),Customer.Country))", "score": -0.41308136072863344, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Country),Customer.Company))", "score": -0.4270074049283992, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))", "score": -0.18290252284350572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.Country),Customer.State))", "score": -0.2408389602715033, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.State),Customer.State))", "score": -0.2517940630132216, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.Country),Customer.State))", "score": -0.3097305004412192, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.Country))", "score": -0.3809236870074528, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.Country),Customer.Country))", "score": -0.4388601244354504, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.State),Customer.Country))", "score": -0.4498152271771687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.Country),Customer.Country))", "score": -0.5077516646051663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,84102), Customer.State),Customer.State))", "score": -0.5082523538658279, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,84102), Customer.Country),Customer.State))", "score": -0.5661887912938255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,84102), Customer.State),Customer.State))", "score": -0.5771438940355438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,84102), Customer.Country),Customer.State))", "score": -0.6350803314635414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,84102), Customer.State),Customer.State))", "score": -0.6354234511891264, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,84102), Customer.State),Customer.State))", "score": -0.6794771845379728, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,84102), Customer.State),Customer.State))", "score": -0.682522505048837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.11368214241883834, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3665810420376789, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3843929804461368, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3916664183250017, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39581414219556266, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.42680656309792636, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.43063140669983113, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.43497133342021704, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4469572414163501, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Track),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4575928540201733, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.47012022704938844, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4716921759827528, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title),Album.Title))", "score": -0.4822019826650519, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4834654723071905, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Track),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.5123228576741148, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21827512765920432, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27615395948557514, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2862065009645635, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29648042782599565, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3022916838327632, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30389999002768364, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30796157041965116, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32617889640365694, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3410707403729232, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3595560262922391, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.InvoiceDate)", "score": -0.3747629561158374, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.InvoiceDate))", "score": -0.3808443317445297, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate)", "score": -0.3842184540014678, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38853167915580883, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.38925967228494646, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Customer.State),Customer.State))", "score": -0.287361138027336, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33918050903342434, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Customer.Address),Customer.State))", "score": -0.387166612308647, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4128275167553066, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42079323618184733, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4266651690575293, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43757448507446306, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Invoice.Total),Customer.State))", "score": -0.4600515444690245, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4616265267953298, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.46988833364617866, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.47419642091156394, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Customer.State),Customer.Address))", "score": -0.48414485947432695, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5032485080628724, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5094904338017089, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5109815805374255, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2858891431640668, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29049573909616777, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3019187426404008, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3518696357660383, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36127585452954575, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3612893566116646, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Album.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3631000206286388, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3657809160263015, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3684010820970024, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37189153635726, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3877387393506341, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.39452524485294554, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.4070845373219229, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4173702391425312, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42660960903161904, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12031020233165096, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13626488250236274, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.16738498007220856, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17101339442569422, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19250312039306097, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1990948783670148, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19996230025095357, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20432018311031924, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2121362090075834, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.23598584662974176, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24105150960587926, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.241330753932653, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.33174113748378375, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34971814914914556, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.43961924095585764, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.1777368115961812, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.21264824666719595, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.22738894886363695, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.22960159860751334, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.2643770881822399, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.26791541542021413, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),MediaType.Name),MediaType.Name))", "score": -0.270178077413696, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.UnitPrice),MediaType.Name))", "score": -0.3070435904092573, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3136987605589809, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Bytes),MediaType.Name))", "score": -0.31526278805650626, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.3162596837276229, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.3400070515417643, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.3490300091506022, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.35999926911792013, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.37141833740498176, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.1670332029479795, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.20516478592800233, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.21652178900886376, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.23483523710774984, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.25488015344348824, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.2587579140885607, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.UnitPrice),MediaType.Name))", "score": -0.26491096201805675, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.28979564627231863, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.2956993559132237, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.32307255615442015, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.33030173455657896, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),MediaType.Name))", "score": -0.3548288752974737, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Comedy),Track.UnitPrice),MediaType.Name))", "score": -0.3644722780354851, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),MediaType.Name),MediaType.Name))", "score": -0.36694086506230184, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.36945013970805846, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33236654029937274, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3402301563080245, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3456350864383369, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3484647805108134, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35600969062594695, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35935136039253485, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3617333266497776, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36754550876379927, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3703775917211085, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37088717853038716, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37602630424684286, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3775197626799212, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3781429010915826, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38216797558770266, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3887826419915796, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
