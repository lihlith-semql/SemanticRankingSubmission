{"index": 0, "beams": [{"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.14965809428104163, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.15426703875640585, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15656563618496466, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16021717754084483, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20860827457739523, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ben Harper),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22067821596153858, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23288053668242242, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2652627068733429, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.296962877996565, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))", "score": -0.3004554253257889, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3005864228785818, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ben Harper),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30254009426580447, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30353293713343743, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ben Harper), Genre.Name),Genre.Name))", "score": -0.3224322374404681, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(getData(Album),getData(Track),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3467825298220038, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.21312570828704847, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2262817678437574, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.2639839112017034, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.26977555475710197, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2718978944209576, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27312303470846216, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2758678240661959, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2850539539776665, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.28857344165607635, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2903919084326189, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.30530069833185786, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3109595679832632, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31413796533086596, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3170518372923571, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3210614715938169, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11356091495612401, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15400269467598973, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18009168526324207, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20188207401047556, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.22109163616156427, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.26232992712099196, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26358884118068093, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26459274586059356, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27849672380898943, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2801360204837713, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2850407102872237, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29194520458815154, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.30714036940384715, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31054292226255614, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3182784878223539, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11533111268720402, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1308463114739645, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16760572931348827, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18221514159157856, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20997807348877232, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22703433205376441, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2520331802581455, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2525599209369215, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2645489749297499, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26507570424908733, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2724082925510926, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28471453791601153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.28528403701504335, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29398244220168845, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.30985745006929694, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.0669711849950545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.2962015330158465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.35632658594477107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.3678060232959979, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.39369106882440974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.40716457956659724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5388387798629992, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5493037275336974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.State),Customer.Country))", "score": -0.6315729574598663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),MediaType.Name,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.6428569912277453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.6709428786598437, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.City),Customer.Country))", "score": -0.6993718699850433, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.City))", "score": -0.7088476436510973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.7110004185997241, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.7120937210456759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.10567159799393266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.BirthDate))", "score": -0.29114516300614923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.3861624833887516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.41215770889382425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.4176711462205276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.State),Employee.BirthDate))", "score": -0.44005008263047785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.HireDate))", "score": -0.4430031202500686, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.47463769886361246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.48838095098552353, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.HireDate),Employee.BirthDate))", "score": -0.49602022092981873, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5143761764905962, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.HireDate),Employee.BirthDate))", "score": -0.5220154309293953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,<,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5294946398353204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.City))", "score": -0.5573593102162704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.565303536481224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.13817493021398727, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.213962137775991, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.30379923956206767, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.38405278103164164, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Track.UnitPrice),Album.Title))", "score": -0.698421809465799, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.72236058452836, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Employee.Email),Album.Title))", "score": -0.7632137272667023, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.7751626708704862, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.UnitPrice),Album.Title))", "score": -0.778675350935373, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.802614125997934, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Track), Track.UnitPrice),Album.Title))", "score": -0.8174430431573366, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.Email),Album.Title))", "score": -0.8434672687362763, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Track), Employee.Email),Album.Title))", "score": -0.8487700664477543, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -0.8932302507193404, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are all the distinct album titles?", "inferred_code": "done(extractValues(distinct(getData(Album), Employee.Email),Album.Title))", "score": -0.924557274009758, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.024292545276694, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Fax))", "score": -0.48391743830870837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.5105166080174968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.546767168561928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Fax),Customer.FirstName))", "score": -0.5859063508687541, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Phone),Customer.FirstName))", "score": -0.593770885723643, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Phone))", "score": -0.5969957046909258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.633484028163366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6409515960840508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.641758048790507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),MediaType.Name))", "score": -0.673921161214821, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.State),Customer.FirstName))", "score": -0.6751650216756389, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6892736776499078, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.6912040048046038, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Address),Customer.FirstName))", "score": -0.6945078017888591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.08997042423612962, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.19897791813491494, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3514293608311761, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.35364401083190267, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.3574396879782985, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3917028888254051, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3939175388261317, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Metal),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3996660982833726, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Metal),getData(Track),Artist.ArtistId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4515423535301853, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Metal),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4630196723307221, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Metal),getData(Track),Album.AlbumId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4753778483940027, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.47957798439202953, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.48108912872451176, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.4942515906080698, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.5798555996771029, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.2972579314518953, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.3812161296877626, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.3941213717701913, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4207512106477128, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),InvoiceLine.TrackId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4251590997741927, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.434276247278509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),InvoiceLine.TrackId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4380643418566214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,Track.TrackId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.44228425120928255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4471814893609377, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4527712827087073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Employee),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4529315381018221, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Track.MediaTypeId,Track.TrackId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4551894791706345, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Madison),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Track.MediaTypeId,MediaType.MediaTypeId), Customer.FirstName),Customer.FirstName))", "score": -0.456359933971567, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),InvoiceLine.TrackId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.46469409545391466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4826230253238464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.1663793051866378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.23916682845629111, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Genre.Name))", "score": -0.29912284633792297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Genre.Name))", "score": -0.3719103696075763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.43356397992647544, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.4529628480104293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Genre.GenreId))", "score": -0.4533924820152606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Customer.LastName),Employee.LastName))", "score": -0.5166801384346442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Customer.LastName),Genre.Name))", "score": -0.5255569729009044, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Genre.GenreId))", "score": -0.5261800052849139, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Customer.LastName))", "score": -0.5270906450477923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Customer.LastName),Customer.LastName))", "score": -0.5390721657567802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Customer.LastName),Employee.LastName))", "score": -0.5506812181574787, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Customer.LastName),Genre.GenreId))", "score": -0.55299801503031, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Genre.Name))", "score": -0.5663075210777606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.27544584652981646, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.27812859271868184, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Employee.BirthDate))", "score": -0.281386357902805, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Employee.BirthDate))", "score": -0.28406910409167035, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.28762497722393854, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2927769702423123, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.29607969483631263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.29696760514238035, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Employee.BirthDate))", "score": -0.3065911003824746, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Artist.ArtistId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3160636034383019, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3225210562777314, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Album.AlbumId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.32551681706399155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.3260868875615994, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.3276730492961052, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3391542125849186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.City),Employee.City))", "score": -0.3878519518493704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.City))", "score": -0.43611919714203395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.City))", "score": -0.43886357380142726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.City),Employee.PostalCode))", "score": -0.481010018122106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.City),Employee.Country))", "score": -0.49435204101791896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.City))", "score": -0.4997893555282644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.PostalCode))", "score": -0.5292772634147695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.PostalCode))", "score": -0.5320216400741629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.City))", "score": -0.5374698622345022, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.City),Employee.Title))", "score": -0.5377130938886694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Email),Employee.City))", "score": -0.5397325737594656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.Country))", "score": -0.5426192863105825, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Country))", "score": -0.5453636629699758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.Title))", "score": -0.585980339181333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.5887247158407263, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.2396873560135995, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.29963199415070774, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3584481331293875, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41839277126649577, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.5564230463327161, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.6547402437435625, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6751838234485041, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6800370839120864, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6899268641002064, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7011169595430666, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7021710799890837, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7110067397311868, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7120608601772038, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(getData(InvoiceLine), Track.TrackId),Invoice.Total)", "score": -0.7146848818806708, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7153344304796057, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.19202141706724984, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.263454076290131, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.26479722300306, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.2877614686638033, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.2901341544470558, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.3003344589768868, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31923455848862603, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.32931049180206173, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.3391461420850704, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Name,=,Beto Guedes, M\u00e1rcio Borges),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35027633032704, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.3571173531361024, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.36969034350110164, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3733358156375621, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.37396906996415724, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.4269380160885703, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1018587134520324, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.17249111828795952, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18070882292553028, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1843598987470093, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.1900864279350976, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19019520505635285, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21973468657101097, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.22334366946477704, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.26353775652365863, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2639935359935872, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2675968266701655, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28197304131661516, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.300163546125889, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3101127742162929, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31414052223614275, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24006373440806475, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2426590040199191, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,The Black Crowes),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.280050751245644, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2914167203284573, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3105807310243719, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32320853684508655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Artist.Name,!=,The Black Crowes),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.329830690007437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3416021812940926, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3418398077184386, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3423813582945006, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3490745200678991, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.363407346453311, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.363879301627495, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36647541452645127, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.3904517878902009, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.24123267686168948, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.30284722978455497, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.30922748224556534, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.315621566819337, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.33091492653679433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),MediaType.Name))", "score": -0.35854569613093035, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3611035769937467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3633941344679187, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3808262712492761, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.38338615134184817, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.38434077842534436, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Invoice.BillingAddress))", "score": -0.395990598476249, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Invoice.BillingAddress))", "score": -0.398281155950421, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.40689710442742144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,!=,Comedy),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Invoice.BillingAddress))", "score": -0.4157134163974187, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.37800095720376364, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.39318655280479625, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.39850586819357753, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.4006449015232647, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,0.99), Track.TrackId),Track.Bytes)", "score": -0.4434783690446958, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.45839980723084034, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.UnitPrice),Track.Bytes))", "score": -0.46014152188149526, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),Track.MediaTypeId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.46193933292490197, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.UnitPrice),Track.Bytes))", "score": -0.48064643287130915, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,0.99), Track.TrackId),Track.Bytes)", "score": -0.48151706702807406, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Track),Track.MediaTypeId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4901079760208139, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.5046967112508212, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.51363536276342, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.535697450850193, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5440708630102299, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Customer.State))", "score": -0.1739749866646889, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Invoice.BillingState))", "score": -0.28031850188199314, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Customer.State),Customer.State))", "score": -0.331254422209895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Invoice.Total))", "score": -0.37889111369077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Customer.State),Customer.State))", "score": -0.42320882483545574, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Customer.State),Invoice.BillingState))", "score": -0.4375979374271992, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Customer.Address))", "score": -0.4756205114645127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Customer.State))", "score": -0.49023459806267056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,=,Edmonton), Customer.State),Customer.State))", "score": -0.5161592769545678, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Customer.State),Invoice.BillingState))", "score": -0.52955234005276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Customer.State),Invoice.Total))", "score": -0.5361705492359761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Edmonton), Customer.State),Customer.State))", "score": -0.5804882603806618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Employee.State))", "score": -0.5956212314886216, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.5965781132799748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Edmonton), Customer.State),Customer.State))", "score": -0.6064395117682579, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.23123600747681475, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.2555942778926835, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2846325315846498, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Gustav Mahler),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30106143366163424, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3014028906892805, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31843346700881664, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3231287748703504, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.34629231737453564, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,Gustav Mahler),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3496178190377541, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Gustav Mahler),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3507459812097368, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.3563556146779241, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Gustav Mahler),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35673590082273154, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gustav Mahler),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3610994630586127, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,Gustav Mahler),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.362834896027605, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Gustav Mahler),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3639630581995877, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.08644157811190843, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17413931257372184, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21300339649919572, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.2172335968650514, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2628518347712089, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26467567916055035, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2714478451044087, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2947968231899967, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Bytes))", "score": -0.3245899387197012, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32733898287292956, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.351440084204734, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3532955376795078, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35940522587966983, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.36358058869333687, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Invoice.InvoiceDate))", "score": -0.3681388698501004, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.054511400829142076, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.3896309347627656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.40396559566674767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),Customer.Address,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.4723770570480475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.47616741826742265, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.49822930651508845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),InvoiceLine.InvoiceId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5055081453458267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5097780356368354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5099848957553115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(getData(Customer),Customer.LastName,!=,Gruber),Customer.Address,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5305238880616994, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.5310748371020804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(getData(Customer),Customer.LastName,!=,Gruber),Customer.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5316815262758273, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(getData(Customer),Customer.LastName,!=,Gruber),Invoice.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5381717530073654, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,!=,Gruber),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5413806824500269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,!=,Gruber),filter(getData(Customer),Customer.LastName,!=,Gruber),InvoiceLine.InvoiceId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.5677397433148326, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.2814115429082449, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.3466985368886526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.40531249286323145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.4404833460012014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.450422897354656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.47059948684363917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Track.Composer))", "score": -0.47757817746787623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.5057703399816091, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.City))", "score": -0.5170387172856863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Track.Composer),Employee.City))", "score": -0.5276262903371389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.5288645172277029, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.City),Track.Composer))", "score": -0.542865171448284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.564384295956188, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.5694177293935354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.6553659559545615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,244226), Playlist.Name),Playlist.Name))", "score": -0.13630969238778678, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15414031631938283, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,244226),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18693041544174932, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,244226), Playlist.Name),Playlist.Name))", "score": -0.24380440340628953, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226), Playlist.Name),Playlist.Name))", "score": -0.2703083642367409, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,244226), Playlist.Name),Playlist.Name))", "score": -0.28534949931903186, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,244226),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2857388071508465, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,244226), Playlist.Name),Playlist.Name))", "score": -0.2864797991906865, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,244226),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,244226), Playlist.Name),Playlist.Name))", "score": -0.31950121858842345, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,244226),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3259966079075078, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3562816572851455, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,244226),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3686379228460202, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37467098939526267, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,244226),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,244226),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3770034988925645, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "What playlists are the most expensive tracks that are longer than 244226 milliseconds on?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,244226), Playlist.Name),Playlist.Name))", "score": -0.4107607644800737, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,244226),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13523403492915415, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15140861392967508, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19908281379874967, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21187853584323776, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2416473605980192, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25061070555849074, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2510869851598633, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2740381209120249, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2812747906980795, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28306137706813433, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28603746056234586, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31370327854635016, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3241137202721715, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.3336612506218869, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.3578090997893795, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.1568583353800932, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.19961107814742718, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.36676823640300427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Milliseconds,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.37924125338031445, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Bytes,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.3847349836869398, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.3915910675568739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.5404102840839187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.5523253792343894, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.5831630268512527, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5918741478963057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.5950781220017234, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6247476973949233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.6407134645996848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6508574002800742, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6633133051291225, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),filter(getData(Track),Track.Name,!=,Johnson),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33326428434750893, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Genre.Name,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.3477871600537417, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),filter(getData(Track),Track.Name,!=,Johnson),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3501234376720459, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.3659151651736347, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.39935053765909795, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),filter(getData(Track),Track.Name,!=,Johnson),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4099857439111683, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Genre.Name,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.4187746363716706, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.41975320290987134, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42458411414212943, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Johnson),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42649354879986756, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),filter(getData(Track),Track.Name,!=,Johnson),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4268448972357053, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Genre.Name,=,Johnson),Track.Milliseconds),Track.UnitPrice))", "score": -0.4325903484523635, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4443918198428282, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),filter(getData(Track),Track.Name,!=,Johnson),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4461362170308801, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.45664139130908377, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3822265105104634, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3850598322010228, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3990722732401082, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40888211743595093, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4117154391265103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4257278801655957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4612580971574971, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4640914188480565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4781038598871419, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4879137040829846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.490747025773544, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.5047594668126294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5423742221450993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,<,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5444146306967923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5472479523873517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Customer.PostalCode))", "score": -0.4056488949568433, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Customer.PostalCode))", "score": -0.4223643997288173, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4452650700285197, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Invoice.BillingCity))", "score": -0.45083135070582325, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Artist.Name))", "score": -0.4557042212470737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Customer.City))", "score": -0.4666269118186318, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Invoice.BillingCity))", "score": -0.46754685547779723, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Invoice.BillingPostalCode))", "score": -0.4682091559485631, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Artist.Name))", "score": -0.4724197260190477, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4758972121429369, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Artist.ArtistId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4789730558015796, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.48015775202464817, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Customer.City))", "score": -0.48334241659060573, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Customer.LastName),Invoice.BillingPostalCode))", "score": -0.484924660720537, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40),getData(MediaType),InvoiceLine.InvoiceId,Artist.ArtistId), Customer.PostalCode),Customer.PostalCode))", "score": -0.48782722911671855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Argentina), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2264839874163119, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2894370140456282, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,hholy@gmail.com), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3191339366698372, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,hholy@gmail.com),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3339782287732459, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,hholy@gmail.com), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.342450064268358, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,hholy@gmail.com), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3519037591374308, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,hholy@gmail.com),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3792263994659303, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Argentina),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38108775863481587, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3820869632991535, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,hholy@gmail.com),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4010003641008126, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,hholy@gmail.com), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4057027619589672, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4148567755587309, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,hholy@gmail.com),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4217877794552717, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,hholy@gmail.com),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42481044111390104, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,hholy@gmail.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.42633592932750025, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1462177059862192, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.17782008669320265, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.17925076666215084, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19270015023461834, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1942681751886364, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23760153101284898, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.26854460252231865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.28249505680300785, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.PostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.28830321076039966, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),InvoiceLine.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29828604766964384, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.313423678200353, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3293875918652426, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3355022415883565, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.34274766512987564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3490661086277175, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.06431782575236866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.41121804112481186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.4167554318337352, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4708488017646771, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4770471016596902, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.47984164351510117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.48165208907928386, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.49294561458993524, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4964140124203607, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5039408409374478, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5077075379310121, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,6457752),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.510489353361681, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5152343706186624, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5187027684490878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6457752),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5279787586850753, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.03957136821918539, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Address),Customer.Phone))", "score": -0.3534568353461509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.LastName),Customer.Phone))", "score": -0.5007234617041831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Customer.Country))", "score": -0.5409201337861305, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.5512012951912766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.FirstName),Customer.Phone))", "score": -0.5727270944880729, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Customer.Address))", "score": -0.5851061894463783, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Customer.FirstName))", "score": -0.5858963682221656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Country),Customer.Phone))", "score": -0.590726326303411, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.State),Customer.Phone))", "score": -0.5968548758792167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6127619259896164, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Invoice.CustomerId))", "score": -0.6434448315667396, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,MB), Customer.Phone),Customer.LastName))", "score": -0.651406879620481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6590656750740891, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6905886643471604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13850604000845124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2102098577038305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Customer.City))", "score": -0.35527275319554974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35889444317081143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Customer.City))", "score": -0.426976570890929, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4305982608661907, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5106025692389267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5523277186171072, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Calle Lira, 198), Invoice.BillingCity),Customer.City))", "score": -0.5756611563579099, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5823063869343059, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Calle Lira, 198),getData(Track),InvoiceLine.TrackId,Track.TrackId), Customer.City),Customer.City))", "score": -0.6005276821043977, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Album.Title))", "score": -0.6118776779935615, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Calle Lira, 198),getData(Track),InvoiceLine.TrackId,Track.TrackId), Employee.City),Customer.City))", "score": -0.625912228077709, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Calle Lira, 198),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Customer.City),Customer.City))", "score": -0.6489740883990345, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,>=,Calle Lira, 198),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.663798280822602, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose), Artist.Name),Artist.Name))", "score": -0.17854264096068562, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.18491931242651813, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose), Artist.Name),Artist.Name))", "score": -0.2279596270709558, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.24216724742324536, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.26186551453411805, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2804616192177076, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose), Artist.Name),Artist.Name))", "score": -0.292196905396597, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.31437723741362905, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31565710168592104, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3189560166068754, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3342532063695106, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3451498183159171, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,=,Izzy Stradlin'/W. Axl Rose), Artist.Name),Artist.Name))", "score": -0.3505799190283608, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3624102733934682, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36303429872718634, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13915837336157705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.15099431747689088, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15584743005211937, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17792629249912076, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18043558400995066, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Cl\u00c3\u00a1udio Zoli),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18963940285993144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2008038141269844, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.21193095865182646, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21639068587703983, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22650800074432326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli), MediaType.Name),MediaType.Name))", "score": -0.23775254919827904, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli), MediaType.Name),MediaType.Name))", "score": -0.24188561562158753, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24763439452302455, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26642183148943677, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2695967052201902, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.Milliseconds),Track.Milliseconds))", "score": -0.2675743257805152, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Betty Newsome/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3486302549450869, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.UnitPrice),Track.Milliseconds))", "score": -0.36660302488053276, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Betty Newsome/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3798764669535043, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Betty Newsome/James Brown), Track.Milliseconds),Track.Milliseconds))", "score": -0.42678218402880624, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Betty Newsome/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.430258085679121, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Betty Newsome/James Brown), Track.UnitPrice),Track.Milliseconds))", "score": -0.4323229091267923, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)", "score": -0.4427946509930639, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,Betty Newsome/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4464989272255695, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4502059369196273, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4507353350307737, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Betty Newsome/James Brown), Track.Milliseconds),Track.Milliseconds))", "score": -0.45279873623615935, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Betty Newsome/James Brown), Track.UnitPrice),Track.Milliseconds))", "score": -0.4583394901300666, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.Composer),Track.Milliseconds))", "score": -0.47135556546891166, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the amount of the summed time of the tracks which have been composed by Betty Newsome/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,Betty Newsome/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.47540871639289395, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Betty Newsome/James Brown), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Invoice.BillingPostalCode),Artist.Name))", "score": -0.3304172366824787, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.34246757537291284, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Edmonton), Invoice.BillingPostalCode),Artist.Name))", "score": -0.4050188720193546, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Artist.Name),Artist.Name))", "score": -0.4206037208405178, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton),getData(Artist),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.42066750904761135, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.42669603577639986, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Customer.PostalCode),Employee.PostalCode))", "score": -0.42711324880381196, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Artist.Name),Employee.PostalCode))", "score": -0.42740230669130536, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Employee.PostalCode),Artist.Name))", "score": -0.4312935305387127, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Customer.PostalCode),Artist.Name))", "score": -0.4317107435661248, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Artist.Name),Artist.Name))", "score": -0.4319998014536182, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.46574536055611654, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Customer.PostalCode),Employee.PostalCode))", "score": -0.46616257358352864, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Artist.Name),Employee.PostalCode))", "score": -0.46645163147102203, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton), Employee.PostalCode),Artist.Name))", "score": -0.4703428553184294, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.06754612798249582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.29375541830813745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.3490571505728931, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.3673929046873891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Customer.Phone))", "score": -0.4294328667820082, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Park), Employee.Phone),Employee.Phone))", "score": -0.48599899435794214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.49602180534686213, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Park), Employee.Phone),Employee.Phone))", "score": -0.519745356090425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Park), Employee.Phone),Employee.Phone))", "score": -0.5237762990072952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Park), Employee.Phone),Employee.Phone))", "score": -0.5389617743567214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Customer.Phone),Employee.Phone))", "score": -0.5712688059211359, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.State),Employee.Phone))", "score": -0.5938620657325373, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Park), Employee.Phone),Customer.Phone))", "score": -0.5945098873298627, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.FirstName))", "score": -0.6068731524646864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Park), Customer.Phone),Employee.Phone))", "score": -0.6113286395029891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.172320278604321, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1831500692239718, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.19425327680587204, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2394721209599504, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2408072860246452, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24473123881384307, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25032352506163363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.26652369961474337, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3120094099115387, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3188105324819579, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.32775097824576055, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.3281048692046146, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Customer.City))", "score": -0.33431053728030913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.34505693374720586, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3510798043550038, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3667647492275002, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3786362531787449, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Album),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3810328535303978, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))", "score": -0.38126782549424504, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Album),Track.AlbumId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3929043574816425, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4039407974376542, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,8624492),Track.UnitPrice),Artist.Name))", "score": -0.40427586590741504, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4158123013888989, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Album),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4182089017405518, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))", "score": -0.4238822812721988, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,8624492),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4244761209026603, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.AlbumId),Track.Bytes,!=,8624492),getData(Album),Track.AlbumId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4300803957239776, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,8624492),getData(Track),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.45158955460501965, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Bytes,!=,8624492),Track.UnitPrice),Artist.Name))", "score": -0.4556611385568773, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,!=,8624492),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.48121270540110267, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.07285974402657303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2547564343058184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Album.Title))", "score": -0.4092901334606722, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.4508385525490827, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.4573062759434491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.46582841554236826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.47229613893673467, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.48387951910603616, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.49602498302176395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5081093464227739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5123230387258737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.518790789670184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.City))", "score": -0.5203782603584841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5273129292691031, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.5687413047508016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.09366230528162524, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.12980718717684211, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.15516781461270687, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2455670987966298, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2810473757671565, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2893121772933574, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.30122895445176184, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.3070181191182212, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.315470026187998, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3227650204378036, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3270638882064897, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33930379974215147, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3441181480880884, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.34686855528696453, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.3738317048880436, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.11813987433731418, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.15165985675987445, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1595102220119578, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15989908656244994, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.2173794429524762, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2686589334363396, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2810037355009362, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.3323134772211116, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.FirstName))", "score": -0.3418830576724178, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.3636305599020758, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.FirstName))", "score": -0.372173839923576, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.37274450838290657, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.Company))", "score": -0.3892578591994473, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Company))", "score": -0.39020721028425964, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.41054524074244586, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.28074023233622064, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30492450475043764, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.31381478563848436, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3203732137572325, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,<,On-The-Go 1),Playlist.Name,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3429950036290495, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3534477670594962, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35570914046071755, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3716180092464464, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Invoice),Playlist.Name,!=,On-The-Go 1),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38151780147335995, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38244001400205235, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38860645521645804, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,On-The-Go 1),Playlist.Name,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3895375226072999, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.4079539152701016, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4107549947938132, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,<=,On-The-Go 1),Playlist.Name,<,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4172754304753996, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.05625307399168378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.2940771582289017, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.40086036946013337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.FirstName))", "score": -0.49089658937737113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.4950554671449936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.5418447323827422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Employee.Phone),Customer.Phone))", "score": -0.5571889842613018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.FirstName),Customer.Phone))", "score": -0.6117550099952496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Address),Customer.Phone))", "score": -0.6181315744979656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(MediaType),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.6187721791429794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Country))", "score": -0.6215898760347045, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.Phone))", "score": -0.6444536748094833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Invoice.CustomerId))", "score": -0.6557766564874328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Country),Customer.Phone))", "score": -0.6652054751975811, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Margaret), Customer.Phone),Customer.LastName))", "score": -0.6662466295747436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.06431941939808894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.297464168354054, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.32224742202379275, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.44598114504784786, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.4625810588796208, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4946618668804104, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5239636097103126, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5266395621351656, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5297615522321205, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5332040046606299, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5342202681064189, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5405635301872982, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5516376723107216, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.572762398687658, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the track composed by someone different from Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Album.Title))", "score": -0.6114490613836097, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.14207704752334394, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.Bytes))", "score": -0.3225720824266318, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Bytes),Track.Milliseconds))", "score": -0.3788898700440768, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.UnitPrice),Track.Milliseconds))", "score": -0.3924254888261203, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.UnitPrice))", "score": -0.4128218592668418, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.4206936753980699, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4230087992585161, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.UnitPrice))", "score": -0.45512321811838774, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.4650898735562805, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Composer),Track.Milliseconds))", "score": -0.48742092787870206, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Bytes),Track.Bytes))", "score": -0.5593849049473647, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.5703088752913531, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Milliseconds))", "score": -0.5716264957154635, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.UnitPrice),Track.Bytes))", "score": -0.5729205237294082, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.Bytes))", "score": -0.5912620149247232, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.13125314323480947, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.32105105655185584, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3231431600980957, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.3360566274713326, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.355292366234327, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.373908439907761, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3916923643672118, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3926894596058842, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.42593367404968285, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Track.GenreId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4292618004726407, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Track.GenreId), Artist.Name),Artist.Name))", "score": -0.4362463218802533, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4454949813135029, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.44629687164496157, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.45542309399365954, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Track.GenreId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.45945041179496277, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.04713270824322535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3951836858610977, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,For the Greater Good of God),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4019946771984503, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,For the Greater Good of God),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4052729466363188, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.40763146264837025, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,For the Greater Good of God),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4194502030394754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.4354524228895866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4441493335622221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.456597148628688, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.45906755419731854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Invoice.BillingAddress,=,For the Greater Good of God),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4657416134068292, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.47291278691096333, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.4802469798542006, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Name,=,For the Greater Good of God),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.48869711283486866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,For the Greater Good of God),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4887572380348492, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.08998945942948922, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.31178049585651024, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.32968942663501366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.36039714357684716, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.City))", "score": -0.45475939503739937, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.49636606714557274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Fax))", "score": -0.5177986978633271, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.PostalCode),Customer.Company))", "score": -0.5335548178372846, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.PostalCode))", "score": -0.5453221558673249, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.605899824116932, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Country),Customer.Company))", "score": -0.6123855666337477, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.6346827878696786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.6371447851306584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Country))", "score": -0.6380281805140839, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,<=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.6479429859282391, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.10237876508704892, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.132913752256042, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26083329802763966, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.272281344800281, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2973987772684067, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2985839287835833, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29928293920480786, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.30365745944141, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3078352752486712, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31901532208002653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3203987243351761, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.32900918300326754, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.3290397045098611, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3327789148802405, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34912273616672, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.30931386701240626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),Invoice.BillingAddress))", "score": -0.3443484117783555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.3458813165821084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.3534596895374307, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Invoice.BillingAddress))", "score": -0.38091586134805766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.Total),Invoice.BillingAddress))", "score": -0.3884942343033799, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.BillingAddress),Invoice.Total))", "score": -0.44204160548224536, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.4689061825670251, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4770761502481946, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.BillingAddress),Invoice.Total))", "score": -0.4786090550519475, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.BillingAddress),Invoice.Total))", "score": -0.4861874280072698, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),InvoiceLine.Quantity))", "score": -0.48740969202890483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.BillingAddress))", "score": -0.5039407273329743, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5136435998178968, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.521221972773219, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.State,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.18754776090026448, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.19608870110093893, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.State,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2730917365801194, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.2791590120479193, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28962364055413065, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.30103549283838155, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.3200462192742877, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.3278303386457661, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.33661062769639516, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Canada), Track.Bytes),Track.Bytes))", "score": -0.337827078399894, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,Canada), Track.Bytes),Track.Bytes))", "score": -0.340539807885365, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.State,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3488048365367134, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34927716110609996, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,Canada), Track.Bytes),Track.Bytes))", "score": -0.35086114739677265, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCountry,=,Canada), Track.Bytes),Track.Bytes))", "score": -0.3772359127801712, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.3747977558766479, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.3807323028537201, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Employee.BirthDate))", "score": -0.39803061347611657, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.4030523431989321, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Employee.BirthDate))", "score": -0.4084754452078674, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Employee.BirthDate))", "score": -0.4119144695946541, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Employee.BirthDate))", "score": -0.4144099921849396, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.4160826010547735, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4195546980535422, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.4216238112532788, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.42201708317180203, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4254892450306144, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.44347806768058184, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Employee.BirthDate))", "score": -0.4486390129287453, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4490211322623639, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2786671246777958, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2969497910226044, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3386529423836413, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.36134196444797023, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.3700687327823755, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.38925140742159525, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39015436776895746, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39743218687977566, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.44018696884466746, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.4407528328069114, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Album.Title,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.44727042764860603, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.44803065191772967, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4488514862977311, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4489336122650918, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.45503970762031215, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.2902239719057463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Genre.Name,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.2916209107763899, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.3001803787495124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Genre.Name,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.30157731762015605, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.30954329520318424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.3561071161223733, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Track.Name,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.37947429946189165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.38028448280667665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.38821530397922915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Mitchell),getData(Track),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.3883145347238032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Track.Name,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.3894306016435594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Genre.Name,=,Mitchell),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.3940518662534423, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Genre.Name,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.3965195700369757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Mitchell), Track.Name),Employee.FirstName))", "score": -0.39782635552344675, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Genre.Name,=,Mitchell), Track.Name),Employee.FirstName))", "score": -0.4140614925928402, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.07918957207469453, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.15463803267902798, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.23958180657509848, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Bytes))", "score": -0.2414244732350545, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.2552272000096691, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.2809615624974401, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.29733937178583353, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Milliseconds))", "score": -0.2987895040766431, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.3127593357972523, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Bytes))", "score": -0.3238135239166292, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.3290749735928177, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.33269088101847677, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4145441566284773, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4281085835241106, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.434760751308828, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,BC), Customer.Email),Employee.Email))", "score": -0.2529773988171655, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,BC), Customer.Email),Employee.Email))", "score": -0.284573582594021, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Email))", "score": -0.3603944206430451, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,BC), Customer.Email),Employee.Email))", "score": -0.3713016264482576, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,!=,BC), Customer.Email),Employee.Email))", "score": -0.40289781022511306, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,!=,BC),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Email))", "score": -0.404993895124873, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,!=,BC), Customer.Email),Employee.Email))", "score": -0.4125799887224275, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,BC), Employee.Email),Employee.Email))", "score": -0.4130777322097856, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,BC), Customer.Email),Employee.Email))", "score": -0.4418580286546785, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,BC), Customer.Email),Employee.Email))", "score": -0.444176172499283, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,BC), Employee.Email),Employee.Email))", "score": -0.4446739159866411, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Address,!=,BC), Customer.Email),Employee.Email))", "score": -0.47345421243153396, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Customer.Email),Employee.Email))", "score": -0.4777413203902473, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,!=,BC), Customer.Email),Employee.Email))", "score": -0.5145886294885713, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Track.Bytes))", "score": -0.5163730512888052, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.3624461646684356, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,>,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.37328212483376394, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.3756398423713982, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,>,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.3864758025367266, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.3960669141176809, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.40690287428300925, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.4092605918206435, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.4096995859003173, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.42009655198597184, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.4333770341728056, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.44573626505652875, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.45091503668151456, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.46941371332901705, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.4727460362941547, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.47459248495400286, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))", "score": -0.10354812031346228, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,14700), Customer.Company),Customer.Company))", "score": -0.2466282989616957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.4262542803802622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Country),Customer.Company))", "score": -0.46727939376341965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.City))", "score": -0.479815326237258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Country))", "score": -0.5126422267194357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,14700), Customer.Company),Customer.Company))", "score": -0.5730746356557574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.PostalCode))", "score": -0.5893826108213034, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,14700), Customer.Country),Customer.Company))", "score": -0.6103595724116531, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Phone),Customer.Company))", "score": -0.613304187149879, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,14700), Customer.Company),Customer.City))", "score": -0.6228955048854914, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.PostalCode),Customer.Company))", "score": -0.62505053410041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Fax),Customer.Company))", "score": -0.633847285599586, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,14700), Customer.Company),Customer.Country))", "score": -0.6557224053676691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies without the postal code 14700?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Fax))", "score": -0.6712820153470602, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,14700), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.05230705799476709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.40734498934762087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.44546323256508913, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.4756868405820569, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.City),Customer.Country))", "score": -0.48447041200415697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Address),Customer.Country))", "score": -0.5067038385750493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.516624850788503, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.PostalCode))", "score": -0.5515365897299489, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.State),Customer.Country))", "score": -0.5607418863655766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Invoice.InvoiceId),Customer.Country))", "score": -0.6022838203789433, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.City))", "score": -0.6056636272551259, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.PostalCode),Customer.Country))", "score": -0.6094217746140203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Address))", "score": -0.6284038721205434, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))", "score": -0.6699199898721417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do customers with the fax number other than +1 (604) 688-8756 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Invoice.BillingCountry))", "score": -0.6722164450766286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (604) 688-8756), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16217644127786754, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1912326063967277, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19137740453640115, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2149032640352589, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.22857806765671676, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22913935190552118, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2544482284367166, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.26132858087898275, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2630412306888806, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27170851295493564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2723173227140433, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2814901426202359, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28616805903865283, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.MediaTypeId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.29857436969934775, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32170119804912006, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.14250457882917544, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2160062775019469, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21782357841766498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29132527709043643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.4733701854947867, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5468718841675582, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5486891850832762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.5561638956126705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5697189182046714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.5703277276697073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.5778106538582506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.6221908837560477, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.6323985964063468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6432206168774428, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6450379177931609, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14341578670113328, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.183401520867825, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2106126015993936, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.22773037777971353, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2279759806370286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26796171480372033, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2697741247721596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2933892756181923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3106560825600354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3137653192832095, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31575529322720014, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31663532727665505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3499316134243368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3506418167267271, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36370324589672764, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1467738385612864, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16874125496509884, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17920571177820224, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20358043486920438, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21717637156438604, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22317100105520388, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.23416865222597122, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24674179764300128, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25255208438508986, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26489602317325406, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2663205279157196, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2715001133933674, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28105349873230584, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29315827580847076, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.29818456735516946, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.23738917016180494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Track.Milliseconds))", "score": -0.27931953274401167, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Track.UnitPrice))", "score": -0.4110408654132698, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Track.Name))", "score": -0.42090757989080885, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.46789617889317014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.48381372594030836, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.BillingState))", "score": -0.5036875834384773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<=,1.99), Invoice.Total),Track.Milliseconds))", "score": -0.5098265414753769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5180629776486967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.5277084862509582, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.537783340148053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.5599933402309034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Invoice.Total,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.5674320175940011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Track.Milliseconds))", "score": -0.569638848833165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5782191386142586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.30352304100597394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.33060036569440854, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.36810931533182156, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.37335180461013806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.3944248111391373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.39518664002025616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.40042912929857266, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.4379380789359857, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.4650154036244203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.466999754007702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Rogers Canada), Customer.Country),Invoice.BillingCountry))", "score": -0.46961031078899396, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.4940770786961366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Rogers Canada), Customer.Country),Invoice.BillingCountry))", "score": -0.49668763547742856, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,!=,Rogers Canada), Customer.Country),Invoice.BillingCountry))", "score": -0.5341965851148416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.5368285176118661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.10970191090634304, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.17233913758083916, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1838354616893907, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2035423976747744, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.22754419673646892, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.27999426759728785, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.3076366906792404, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.3213620181562333, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33649587689282856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3588941597941045, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.36360440497548574, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3703550216915861, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.37112049389683444, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.37542485389761465, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3849557441731071, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25426951779282214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.269617872465553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2944585585843493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.2975365160997427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2990673515621379, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3052436957964346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.30820005140940027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.31324751532011663, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.3260408900933007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.33022354534714843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.3365785948988577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.3422926400029961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.34804419737214864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3921606653511576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.4110362656023048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.03050615905930389, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.7901987381078065, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.7947991101359364, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.810734875926405, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -0.8581556620513182, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.8680554144176934, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8869157041177269, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.CustomerId))", "score": -0.9139550849618401, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.9294229294892199, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.9310517672658217, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.9318045606751529, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -1.0723963880120366, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.CustomerId),Customer.Phone))", "score": -1.082957724359521, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -1.100135432164492, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.BillingState))", "score": -1.1475006408880735, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.11257524496236102, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,NV),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2079586139840581, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21538162013897894, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21716660695806636, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22124021792166446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22363190257846866, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22570013572927844, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2302260318297303, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23500973759475943, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),MediaType.Name,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24454522786828864, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26567033520795735, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27702983326200564, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,NV),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.33311242299533356, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,NV), MediaType.Name),MediaType.Name))", "score": -0.35206305759005635, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.3579706401757341, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.0887944143556297, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44230430834565915, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44619264228748273, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4689216977989242, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46932149287151487, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.47019591607852373, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.48054925816270544, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4972131006043794, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5057890213832135, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.507566530023811, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.50844095323082, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5168306001144127, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5264633077241503, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5285180862520031, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5662486478414299, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19089589077748315, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2122510429076101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22113533872879998, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24249049085892693, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2903246637038137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31167981583394067, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4242316446605465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,AB),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4728091809352726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5603054349118223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.598721776611246, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6758189703873541, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6930500324419882, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.697174122517481, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7074338104180242, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.717310419266596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.2533673124932025, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25493185522531875, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.27120430106976096, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.27276884380187727, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27669866053956454, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.27826320327168086, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29453564911612307, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.2961001918482393, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),Track.Name))", "score": -0.2981804749466334, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3266089543397042, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33295314575098806, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.3354364252376859, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.3417806689450524, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.342467506084117, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.3488116974954008, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19323322435131013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.23142126060926133, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24468574540208665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24491376798967948, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.24525549455184817, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.25068046890675505, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29288638293912894, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(Track),Playlist.PlaylistId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3169243047386163, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.31798883580288184, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.32139871499350775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3253479141932149, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.32579376999940046, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.3344788865499327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.33796524029855096, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34433886564149113, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.2909436893591121, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.32882259786179735, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.3450636696402578, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.34994257511741833, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.36047289244472536, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.3867503043029671, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Artist.Name,=,Bebel Gilberto),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3956910786307262, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.4101022892598258, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4155241057980697, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Bebel Gilberto),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42227232135453363, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.4334058586590488, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Artist.Name,=,Bebel Gilberto),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.43953019827980694, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.442996487034244, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Bebel Gilberto),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4497447028033749, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4550885337420496, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.1280424921391626, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.City))", "score": -0.19510742005695647, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.City))", "score": -0.2309589507876808, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,None), Customer.City),Customer.City))", "score": -0.5169638070165092, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.5528153377472336, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,None), Customer.City),Customer.City))", "score": -0.6228760155736381, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.City))", "score": -0.644660559564727, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,None), Customer.City),Customer.City))", "score": -0.6587275463043625, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.City),Customer.City))", "score": -0.6805120902954513, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Invoice.BillingCity),Customer.City))", "score": -0.7210466308406467, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.City),Customer.City))", "score": -0.7430848750173027, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,None), Customer.City),Customer.City))", "score": -0.7525740536748344, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Invoice.BillingCity),Customer.City))", "score": -0.756898161571371, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.City))", "score": -0.7630131287387485, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Invoice.BillingCity))", "score": -0.7765824509206141, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.14531891201085542, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.14565440436154667, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.15464756705786867, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.1832556381250517, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.28672288466167545, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.2891505293376177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.29231822846117095, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.3066735842747558, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3076536929315526, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.31415974409077635, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Track.Name))", "score": -0.32204343342081554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.325866863227924, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3311194267595952, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.34806978115796955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.356464220260265, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,>,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.40131585433524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,>,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.4391091453321259, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,<=,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4403475294303108, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,>,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), MediaType.Name),Genre.Name))", "score": -0.45641760274151105, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,>,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Invoice.BillingAddress))", "score": -0.46157935579548437, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.46829550381741153, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4712020160123519, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(Track),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.47513945066812796, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4763489236613934, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4766007791184429, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.47814083814776365, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.47892874138450703, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.48028635831716954, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,1.99),merge(getData(Track),getData(Invoice),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.48286617604028315, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any invoices on which the unit price of a track belonging to the Comedy genre was lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,1.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.48407573597507997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), InvoiceLine.Quantity),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.21358860766274906, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2694340993242154, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2821308028221335, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Fax))", "score": -0.2865151309778323, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2902838658365917, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29067382123752344, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2946843798804432, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Fax))", "score": -0.29552816979692975, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.30503488307942156, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Fax))", "score": -0.3073648974902086, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30811178356732677, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.31098069909069953, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Fax))", "score": -0.31166394042933326, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),Track.MediaTypeId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.33171884408775043, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Customer.Email))", "score": -0.3327795284240917, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.20452775119701982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.21039511321941973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.25467100798050524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.4049100583688414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.City))", "score": -0.44199623412350775, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Country),Customer.Company))", "score": -0.4469894362882769, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,robbrown@shaw.ca), Customer.Company),Customer.City))", "score": -0.44786359614590765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,robbrown@shaw.ca), Customer.Country),Customer.Company))", "score": -0.4528567983106768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,robbrown@shaw.ca), Customer.Company),Customer.City))", "score": -0.49213949090699316, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,robbrown@shaw.ca), Customer.Country),Customer.Company))", "score": -0.49713269307176233, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.5209032601014769, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.5435577934877074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Country))", "score": -0.5663110191271699, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,robbrown@shaw.ca), Customer.Company),Customer.Country))", "score": -0.5721783811495698, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.PostalCode),Customer.Company))", "score": -0.5954714609579241, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.18718572829372548, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2246557407690108, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25202417006284566, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2573833244587746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25816886939770795, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.268031271665074, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2799110558823344, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28535782787786423, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.30550101911016236, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3056539158789253, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.32926929388314446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3300440325281412, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3336343109430669, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3355596249221383, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino),getData(Track),Track.GenreId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3398245656124233, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.1587131394691929, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<=,None), Track.TrackId),Track.Bytes)", "score": -0.2735010384233115, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<,None), Track.TrackId),Track.Bytes)", "score": -0.34220576969348926, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>,None), Track.TrackId),Track.Bytes)", "score": -0.35876091237448493, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4775667508075523, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,None), Track.Bytes),Track.Bytes))", "score": -0.49646629453491187, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.530997508262689, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5317096378771142, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5324750213232209, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,None), Track.TrackId),Track.Bytes)", "score": -0.5749685411412522, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5866179083927828, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,!=,None), Track.TrackId),Track.Bytes)", "score": -0.5973230457037865, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,None), Track.TrackId),Track.Bytes)", "score": -0.6195960912809335, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,None), Track.Bytes),Track.Bytes))", "score": -0.6676286166984937, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,None), Track.TrackId),Track.Bytes)", "score": -0.6680173920046308, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.054852510328389927, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.45662302551461087, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.46535052459691156, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.46925084805711637, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.49188458446572053, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.5465559761725518, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6108870116768123, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId), Album.Title),Album.Title))", "score": -0.6311380063500425, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Genre.GenreId,InvoiceLine.InvoiceId),Customer.LastName,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6313353132080854, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.6455680411933958, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId), Album.Title),Album.Title))", "score": -0.6537718424368355, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6545216804476163, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6582246020411731, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.6682018241184882, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6810693895068202, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.16879220912982265, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3167074755253807, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33500813621734365, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.35868822786644045, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4829234026129017, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), Track.UnitPrice),Track.UnitPrice))", "score": -0.4901137099532207, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.5066034942619985, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5149366862952507, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5185320857177269, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5240950242481115, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), Track.UnitPrice),Track.UnitPrice)", "score": -0.5249041549539615, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Track),InvoiceLine.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5374737993433281, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Track),InvoiceLine.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5410691987658043, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5457479318382038, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5621044644276955, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14113648489903496, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2049097895566546, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21502719136970394, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2153583415100248, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2352675113613378, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24982896132248844, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25205932609926857, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25830874072468735, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2667017308189641, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2783969258883149, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28111896352014204, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2849836532281572, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(InvoiceLine),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2902156178682657, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29144036017677866, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2925108599219469, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.09431097715629824, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2111215228306376, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.2152899938908368, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2249957006680611, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23984335001906876, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2409570610687335, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2543154315380637, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.26579485248073376, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2940480259368321, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31287278332495116, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.33273029500087226, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.34272773272709645, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34403356477327346, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35990026739935743, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3728880713002338, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.24879301520013541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.LastName),Genre.Name))", "score": -0.2648579049291584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Genre.Name),Employee.LastName))", "score": -0.35783708276176185, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Genre.Name),Genre.Name))", "score": -0.37390197249078483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.3852276969137165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,!=,Margaret), Employee.LastName),Genre.Name))", "score": -0.4012925866427395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.42012562038325996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Margaret), Employee.LastName),Genre.Name))", "score": -0.43619051011228294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Track.Name),Employee.LastName))", "score": -0.4541479516210529, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Track.Name),Genre.Name))", "score": -0.4702128413500759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,!=,Margaret), Genre.Name),Employee.LastName))", "score": -0.49427176447534293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,!=,Margaret), Genre.Name),Genre.Name))", "score": -0.5103366542043659, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.5169970560255024, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Margaret), Genre.Name),Employee.LastName))", "score": -0.5291696879448864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Margaret), Employee.LastName),Genre.Name))", "score": -0.5330619457545254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.12312820913090403, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1512861902521115, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.16164175646160547, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18054470148259347, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1817290831488203, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20888426193808876, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.21965193439544872, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.22069579683814225, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22190288627511548, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22365768558371962, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23781327536108063, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2421352734193277, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24395801993635616, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2461410246075986, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2807180521807122, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Track.Composer))", "score": -0.027019982393539976, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Track.Composer))", "score": -0.30571611708001, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,496692), Track.Composer),Track.Composer))", "score": -0.5110998946984182, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))", "score": -0.5746910769303213, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,496692), Track.Composer),Track.Composer))", "score": -0.6173581874973024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,496692),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6431682447578501, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,496692),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6545825315018754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,496692),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6661997753295255, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,496692),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.6747921912660596, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,496692),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6778853550927134, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,496692),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6779507794257581, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,496692),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6890549651090803, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,496692),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6896363591889462, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,496692),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6904080864472661, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Album.Title))", "score": -0.7179051947823609, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.08570796765606771, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,<,None), Track.TrackId),Track.UnitPrice)", "score": -0.4477187107176717, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.49203007434474055, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,<=,None), Track.TrackId),Track.UnitPrice)", "score": -0.5334045448813692, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.5376593207318799, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.TrackId),Track.UnitPrice,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.5406928504755105, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.5565722976575745, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.UnitPrice,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.5637468612118314, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.5792170440287627, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.5881673918256363, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.5981300209544572, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.5987278348519469, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.6070803595357606, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.UnitPrice,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.6082376627515909, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,!=,None), Track.TrackId),Track.Bytes)", "score": -0.6344080122946066, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.1260931371098195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1459644837623273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Customer.PostalCode),Customer.PostalCode))", "score": -0.3708698759173785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3733108090555106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.3907412225698863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3931821557080184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5638983059061502, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.583769652558658, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5996242566352521, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6076780362373029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,DF), Customer.PostalCode),Customer.PostalCode))", "score": -0.6180875478630696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,DF), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.6379588945155774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Employee.PostalCode),Customer.PostalCode))", "score": -0.6681911656951343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.688062512347642, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7586006927622293, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.10139230137080464, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2079873387493819, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2101823239469208, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.21267122782436682, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2208322211512352, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.24319926095871863, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2439889548363597, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24665221092535117, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25559537798941107, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2599561739384126, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27383903048438846, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.275987464174118, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2794931209168762, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2808736567827418, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in tracks in the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2871897365656775, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28274518606275645, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34447610896474523, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 456-9986), Track.Bytes),Track.Bytes))", "score": -0.3789574083321172, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.38096141543576234, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.3844938496326387, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.3864264098000671, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.3899587984042727, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,+1 (403) 456-9986), Track.Bytes),Track.Bytes))", "score": -0.4086435887787423, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.4145620944836594, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.Bytes),Track.Bytes))", "score": -0.4194621621173002, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 456-9986),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.42019932536203186, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.42520649747062217, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.4351016234121567, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.4388443627561493, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.43970260643185227, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22421560379427494, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22821909510375055, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.28404556306846285, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2936978409314461, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29962214743321675, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30424223851580395, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32329408075737165, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.32942508932547404, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.334391826896985, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.35544861539792905, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),Album.Title,=,Out Of Time), Track.TrackId),Track.UnitPrice)", "score": -0.35644525005517225, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3601972730422391, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3602687733905739, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.36111192860649927, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.36413384621416794, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1590863452065592, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.18263652863237131, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1988345433366697, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22552403243530542, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore),getData(Genre),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2301764793833241, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23274442844336923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23438284790083438, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.2505583546973999, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.25388912405974057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.26004436628493655, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2668789170591867, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Genre.Name))", "score": -0.2687565647707998, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2735257707684383, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.2768947056860961, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Genre.Name))", "score": -0.28535642124163385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21560143980253155, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22536327482158713, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.26096941929812906, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27396979522475345, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.InvoiceDate,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27458229561858283, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2748227244833217, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27977966322490855, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28333947638690127, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2843441306376384, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2847616942892449, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.28903517359707953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28971863303083173, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2975993870688546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3104093808410293, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33825989073650214, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.06864964387361103, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Phone),Customer.Phone))", "score": -0.5765983920136932, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.5887942959336302, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Address))", "score": -0.6358362180088624, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.6554281265427819, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.6568385548243274, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Company),Customer.Phone))", "score": -0.6817383702436928, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.6881223161602993, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Phone),Customer.Phone))", "score": -0.6885943200031761, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.LastName),Customer.Phone))", "score": -0.7229327998647932, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -0.7470747876677577, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Address),Customer.Phone))", "score": -0.7595592561677574, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.76098085519119, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.CustomerId))", "score": -0.7727063448042535, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.8289847792664099, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1519918926241642, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,7.96),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1657579333951261, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,7.96),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17237928572916644, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,7.96), Genre.Name),Genre.Name))", "score": -0.1921097081322843, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,>=,7.96),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2554339525607071, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<=,7.96),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2602121749548293, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27490107609998954, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,7.96),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29840738612988094, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,7.96),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3066436703489591, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,<=,7.96), Genre.Name),Genre.Name))", "score": -0.3143668128104625, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,7.96),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32040971111992095, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,7.96),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32726666658577513, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,7.96),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33152806142025937, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,<=,7.96), Genre.Name),Genre.Name))", "score": -0.3683323511385335, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there when the totally invoices are 7.96 or less?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,7.96),Track.UnitPrice,<=,7.96), Genre.Name),Genre.Name))", "score": -0.40589897814497317, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.21104231068624885, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,James Brown/Tim Maia),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22625767154058857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2564794014473472, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2808169933936366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,James Brown/Tim Maia),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2946337902983805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3058633243380551, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,=,James Brown/Tim Maia),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30592235848043786, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.31145431744088675, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.31216146076383156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.31408064145179027, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,James Brown/Tim Maia),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32618345356261047, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.33231667496982276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3344171903455522, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3369590052053843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35759849282555206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.030540784624463413, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5391996363541693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5591520948118476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.5660632534782053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.City))", "score": -0.571791081027186, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5845587217190686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5925522949910373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5997589200888697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.State),Customer.Country))", "score": -0.6165965085747303, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.City),Customer.Country))", "score": -0.6195569520714344, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.62516544288776, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId), Customer.Country),Customer.Country))", "score": -0.6291187690156835, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.6327834611656726, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.PostalCode))", "score": -0.6328348799506784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.State))", "score": -0.6678734703818918, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.21465698098675598, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.State,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.274793409375345, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27680286002907, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.28897555123660185, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.BillingState,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3119276335458317, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31278965538804543, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3229397964604892, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.State,=,IT Staff),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3408804224587266, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.34145682292170954, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.State,=,IT Staff),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.34604519075699347, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.36562031128809525, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3749355344303595, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.State,=,IT Staff),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.38587073355950496, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.38819940595189856, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.BillingState,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.39196738281073684, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.11301593753974574, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.1306383528555578, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.17499641181080888, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22280988601153068, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.22725159692092026, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25220029168300256, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.26242439368112086, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.2653145240639624, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.26753746073915957, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.2860726066725666, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2869403534155129, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.33207186903420377, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.MediaTypeId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.33363730225404153, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.3685403683279313, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3787667678498951, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.06977709827314471, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.4047695591512641, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.4816583676481867, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.7315618647097482, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7355397077969914, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.7555618613526061, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Country))", "score": -0.7566951193016357, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.795235994550704, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.8049639924432527, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.8235027871802937, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -0.8361260086050426, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.PostalCode),Artist.Name))", "score": -0.9440681374798585, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9747953589803751, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Country),Artist.Name))", "score": -0.9824679377059442, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9826934793316381, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.31196572869521333, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.3769760542054428, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,<=,322063),Track.Milliseconds,<,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.40514060174699895, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,<=,322063),Track.Milliseconds,<=,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.42769871946916777, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,322063),Track.Milliseconds,<=,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.4323946493240524, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,322063),Track.Milliseconds,<,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.4543786947327567, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.46646617329659823, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.4760485799561138, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4764938877016244, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4771192465080027, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4824636808862876, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.48714696091302884, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,322063),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.49249139529131375, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.4979651184330578, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,<=,322063),Track.Milliseconds,<,322063), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5051264595302369, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.31172419965150766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.Address))", "score": -0.33992320924880914, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.Address),Customer.LastName))", "score": -0.34657312810304575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.Address),Customer.Address))", "score": -0.37477213770034723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.41916400819900446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.Address),Customer.PostalCode))", "score": -0.45401293665054254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.4628418187785428, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.Address))", "score": -0.4910408283758443, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.Address),Customer.LastName))", "score": -0.4976907472300809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5116335290658753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.Address),Customer.Address))", "score": -0.5258897568273824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5288187998521607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.Address))", "score": -0.5398325386631768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Genre.GenreId))", "score": -0.5427547904837411, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.Address),Customer.LastName))", "score": -0.5464824575174134, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,441155), Track.Name),Track.Name))", "score": -0.09188303992777946, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,441155), Track.Name),Track.Name))", "score": -0.24982747331887367, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,441155), Track.Name),Track.Name))", "score": -0.27978055104488747, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,441155),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2997275279336763, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,441155), Track.Name),Track.Name))", "score": -0.3338468911565429, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))", "score": -0.34755501047402504, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,441155),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.35137862284302096, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,441155),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3647123897486922, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,<,441155), Track.Name),Track.Name))", "score": -0.36578732698982797, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,441155), Track.Name),Track.Name))", "score": -0.40225140712281376, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds,<,441155), Track.Name),Track.Name))", "score": -0.4198536671014834, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,441155), Track.Name),Track.Name))", "score": -0.42749471768586955, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,441155),getData(Track),Track.UnitPrice,Track.TrackId), Track.Name),Track.Name))", "score": -0.4369328460116407, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,441155),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4639408140359796, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}, {"orig_question": "What are the track names of tracks being shorter than 441155 miliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,441155),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.46619126401201316, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,441155), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.12539430774004148, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.14894080497629048, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.21942162225504094, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.22282523386375197, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.25944199825228803, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.2625904744193619, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.26458652408122274, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.2717024748521247, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.3349815248456, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.3396867164362866, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.3442261337980754, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3454302898999828, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.34823567629688784, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.36364281969364215, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),Track.UnitPrice),Track.Bytes))", "score": -0.3715988607084012, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.07443531825697391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3329353857741353, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Customer.Country))", "score": -0.3470134869173762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.41971601117760504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42160136289453476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5276096360612772, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Invoice.BillingCountry))", "score": -0.528533339334834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Invoice.BillingCountry))", "score": -0.5315500133337834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Customer.Country))", "score": -0.5375697696568592, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Customer.Country))", "score": -0.5405864436558085, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Country),Customer.Country))", "score": -0.5459966966757098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Country),Customer.Country))", "score": -0.5466717361989657, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.5575694722808568, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5677260294512507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5707359371035529, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24788224015391477, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2595112802945902, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27383798509297136, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))", "score": -0.2860216636505626, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.304507310602746, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3084827508785439, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.31790357304781436, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32280105803703657, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), Invoice.Total),Invoice.Total))", "score": -0.327343012685175, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3329899762011576, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), Invoice.Total),Invoice.Total))", "score": -0.33348277844736407, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),Track.TrackId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3339727895695221, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33443009817771197, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33915206827234573, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.344619016341833, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.051693682197017185, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.4936772594420377, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.5339464450664965, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.5810499295410839, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5906657772145415, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6365831383105655, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6677122204055898, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6711294543907522, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6983371498799695, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7125101127359923, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.7128044696436939, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.7180136557392929, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.7232455598642524, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Customer.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.7475514806938008, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.788491236020379, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,8675345), Track.UnitPrice),Track.Composer))", "score": -0.35883142388921474, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8675345),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.Composer))", "score": -0.375521531275492, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,<=,8675345), Track.UnitPrice),Track.Composer))", "score": -0.37835014102887354, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.Composer))", "score": -0.3802950842123543, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.3887424430188983, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.Composer))", "score": -0.3950341391618292, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8675345),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Track.Composer))", "score": -0.3997441994831967, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.4034814979683733, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,8675345),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.Composer))", "score": -0.40378145852253844, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8675345),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.408840095597642, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,8675345), Track.Composer),Track.Composer))", "score": -0.40983086548514625, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,8675345), Track.UnitPrice),Track.UnitPrice))", "score": -0.41220838964651674, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.Composer))", "score": -0.42041559068114326, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8675345),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.Composer))", "score": -0.4220992359384918, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we sell tracks larger than 8675345 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,8675345),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Track.Composer))", "score": -0.4280041976125108, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8675345), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.14992120894567051, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.24901441517249623, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,ON), Customer.Company),Customer.Company))", "score": -0.27834322336093464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,ON),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.4526012140292622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,=,ON), Customer.Company),Customer.Company))", "score": -0.457744497704478, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,ON), Customer.Company),Customer.Company))", "score": -0.46284834328071156, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,ON), Customer.Company),Customer.Company))", "score": -0.46650556507484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.469003614304325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,ON), Customer.Company),Customer.City))", "score": -0.5037247299678711, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,ON),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.5094027236440204, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,=,ON), Customer.Company),Customer.Company))", "score": -0.5203927267365432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.5316518715785439, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,ON), Customer.Company),Customer.PostalCode))", "score": -0.5472592472560791, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,ON), Customer.Company),Customer.Company))", "score": -0.5613521713294176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.City))", "score": -0.6028179361946968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.10088895893113659, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Genre.GenreId))", "score": -0.2608616266252284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.PostalCode))", "score": -0.2701389703752284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.Address))", "score": -0.3701862607003932, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.FirstName))", "score": -0.4778745088578944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.PostalCode),Customer.LastName))", "score": -0.5343963958175664, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.FirstName),Customer.LastName))", "score": -0.54596291555481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.Phone))", "score": -0.5544563744069819, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.Address),Customer.LastName))", "score": -0.5739195801170354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.6109370205404048, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Invoice.BillingAddress))", "score": -0.6123408291341548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.6473902108000402, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.Email))", "score": -0.6522987101079707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.6569885851668005, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.Company))", "score": -0.6620549175740962, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2548117848766194, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2839777794844009, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.29063302369985156, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3016135657026512, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Robert),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.31781510896278475, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3450916581596791, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3454633313972335, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3492042049197501, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3492476395727478, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Invoice.CustomerId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3668774154036453, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3677193689289383, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Country,=,Robert),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3699966790451164, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,!=,Robert),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.37397055380720023, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.37530925566487433, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,!=,Robert),merge(getData(PlaylistTrack),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.37643840297847947, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.32509898363076245, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.3282863332260612, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.3415962001696314, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.34353522638033523, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.34916398421934214, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.35684509332390535, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3624419300219191, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.37014529748573477, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.37895540313204273, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.38163913435424474, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.3853941906400088, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.38574529090928583, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.39088084934401396, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.3968880353857865, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3976707781785313, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.21206575296484892, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Email))", "score": -0.36448677611709696, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),MediaType.MediaTypeId))", "score": -0.4930309799154361, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.5092045168465875, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),MediaType.Name))", "score": -0.5223043629650259, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.5400124756288288, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.Email))", "score": -0.5609219433171752, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Email))", "score": -0.5668777250093169, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.6329827808540937, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),MediaType.MediaTypeId))", "score": -0.6454520030676841, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.6616255399988356, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),MediaType.Name))", "score": -0.674725386117274, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.6924334987810769, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Genre.GenreId))", "score": -0.6990558540359237, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Customer.Email),Customer.Email))", "score": -0.7658228466480487, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Track.Bytes))", "score": -0.02694150292336417, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4654971872093096, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,184946), Track.Bytes),Track.Bytes))", "score": -0.4682513899078913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))", "score": -0.504487497257287, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Name),Track.Bytes))", "score": -0.5063314190974779, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Milliseconds),Track.Bytes))", "score": -0.5152474394908495, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.UnitPrice),Track.Bytes))", "score": -0.5195277682414599, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5208211148938071, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Track.UnitPrice))", "score": -0.5520261227993615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<=,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5722515289835913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,184946), Track.Bytes),Track.Bytes))", "score": -0.5752351409664698, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.Milliseconds,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5840158107683517, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.UnitPrice,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6028217719578244, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.6090811411618793, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,184946), Track.Bytes),Track.Bytes))", "score": -0.6333839789640479, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09622528631264377, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.12880272316133587, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13002596912138026, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17381360905613066, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.18414753808193507, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1956514056199455, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22996096308653996, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2386897364275555, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28019175264929125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28157362781100886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Track.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2869966123944762, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2887479015171016, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3071026044229046, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.35750856531803926, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36001911673935766, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2884183418893655, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.33509758167876424, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Employee.Email,=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3380550148903435, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34403134709088745, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3474937918358034, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Employee.Email,=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3495358975958327, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Album),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Employee.Email,=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.355184787338315, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3578473083235616, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Album),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3688965270745275, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3754803376139367, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3768235522641934, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3858338733395927, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.39428007626018974, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.4156170294001791, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.4222629092569504, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.07511095972164204, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.18715487793860913, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.22436303173738145, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23634858835491976, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24130370264199377, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2843796366174487, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29385959743270446, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.3059551537294229, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.31158033827241993, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31248385162714915, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.3158575039838193, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3162285270210677, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32211716148237557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33467746288098715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Album.Title))", "score": -0.371201773351946, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.13226633673136814, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.2648641530963872, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2914591154003574, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40544459291129753, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4263311414422122, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.43797434769256455, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.4665031751537754, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.47574339252377107, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.49901007158762484, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5041602442511203, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5046893155122234, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5259814921129715, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5329847221791812, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5367791164188314, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Which distinct album titles are there ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5419292890823267, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.19780111903264697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Customer.Address))", "score": -0.2775003969104546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.2776284351380127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,9, Place Louis Barthou), Invoice.Total),Customer.Address))", "score": -0.35732771301582034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.4191680535109299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.4765294774801987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.47977679813220675, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.49036979520633395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,9, Place Louis Barthou), Invoice.Total),Customer.Address))", "score": -0.4988673313887375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Customer.State))", "score": -0.5147089421184319, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5200922175677078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.CustomerId,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5382536336214798, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Invoice.BillingState))", "score": -0.5558269082935112, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,=,9, Place Louis Barthou), Invoice.Total),Customer.Address))", "score": -0.5562287553580063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,9, Place Louis Barthou), Invoice.Total),Customer.Address))", "score": -0.5594760760100144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2123310566361427, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22332999987256538, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29441537844956167, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2985198560478701, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3054143216859843, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3106350487866459, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3216339920230686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.34618601644931796, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3554079323753688, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(Track),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36212237094474786, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36243368796889947, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36402740218806046, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,InvoiceLine.TrackId),Track.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3650754906558381, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36523789639821524, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,InvoiceLine.TrackId),Playlist.Name,=,Headspace),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3742974210490705, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2582026749235386, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27641944256391676, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Mike Dirnt/Tr\u00e9 Cool),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2776060086369247, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3252002867276168, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3337374498794974, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.34242211365986064, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,>,Mike Dirnt/Tr\u00e9 Cool),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3486656381361298, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,>,Mike Dirnt/Tr\u00e9 Cool),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3527769825530751, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Mike Dirnt/Tr\u00e9 Cool),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3538092276328127, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.35907317291333835, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3594053892825103, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3667169485559915, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,1),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.37024418695103617, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37668533221229944, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3942931715242554, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.11529250186363844, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.14365825427276632, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17295299099613076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17981953062486541, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18395263493797642, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20684913717169562, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.22652053787208978, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25741017329614435, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26154327760925533, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27710208768633354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.29595371802851456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.31431222541417403, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.318959595166166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3318579005580517, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.33226637406885756, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),Track.Milliseconds),Album.Title))", "score": -0.20778932147630513, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),Track.Milliseconds),Album.Title))", "score": -0.2702258871968718, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.27247490409073644, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2834276475254645, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2898248410328532, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.29448366056471814, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3068949994362748, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))", "score": -0.3200268647017329, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),InvoiceLine.Quantity),Album.Title))", "score": -0.3226290856515669, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32540529670472734, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33781663557628394, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.34586421324603117, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.34639329912992384, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35364726997176793, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album with the shortest track that was sold for at most 99 cents?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3580953227312508, "correct_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27262796328860484, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.31303121912306603, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32391275126910557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.33385805079171443, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Quiet Songs),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33786942099294304, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35875605013952183, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3645182209227587, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3742613066261756, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Quiet Songs),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3754131355254189, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.37693744101645016, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.377902626178685, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3797383933340758, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Quiet Songs),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.3813186207727529, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3823792611172032, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3860760587845876, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.37414171639736876, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.38258396708339626, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.39818415152893455, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.4022336349495081, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.40837624191265054, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.4088792933661917, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.40979707696777706, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.4190713837499077, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.41998916735149305, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.42049221880503423, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.4306843091887502, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.43390658385024283, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.4365676863264566, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,2013-05-03 00:00:00), Track.Name),Track.Bytes))", "score": -0.4429220069528599, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,2013-05-03 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.44409858784619516, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1190777561851051, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.14889089738364505, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16115665996670653, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.21645703115581524, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23653990575480957, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23704327835802688, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24907980099975457, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25805897362999247, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2715223562220767, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27235189882807004, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.27803863288924185, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2832070656910721, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2867439354083618, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2884115068440165, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33335572544310743, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.UnitPrice))", "score": -0.1836528733612818, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.21470923011125106, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.UnitPrice))", "score": -0.2228416325839942, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.UnitPrice))", "score": -0.2685424968919625, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.UnitPrice))", "score": -0.28750284032771917, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.291303433293925, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.31462326962837767, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.3185591970776884, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.34156198826651524, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.34175147064766104, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.3466776966823482, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.35959707388132894, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Milliseconds))", "score": -0.37182580135932386, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,!=,Brazilian Music),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.UnitPrice))", "score": -0.3759702052621668, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.UnitPrice))", "score": -0.3862343223269088, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.17821466158975055, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.37235024016782386, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.City,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5264985786152426, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5356231839789181, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5387045319885979, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5501479810570831, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5551265076988393, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5599121553010377, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5806062642918846, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Customer.City,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5849038622714045, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Customer.Country,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5971254717118816, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5993029596732712, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5994793180004867, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Customer.State,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6080095166229742, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6132051833239285, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18781910192681195, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.24182070726601385, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2597653519616915, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2933543634739224, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Invoice.Total),Playlist.Name))", "score": -0.30960563247043676, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3135095280647057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3205594948896363, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3428573962183303, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3478964505341286, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,0.99),Playlist.Name),Playlist.Name))", "score": -0.3625104310970687, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3670426061508503, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3963318722923499, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3965335760914754, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.4047112746866271, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes),Playlist.Name))", "score": -0.4117013181354389, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.2396990006336928, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.33843143954349575, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.3488731668788475, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Milliseconds))", "score": -0.3533069683315198, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,5817216),Track.Milliseconds,<,5817216), Track.Composer),Track.Composer))", "score": -0.380154984070402, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.40145054481244896, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,<=,5817216),InvoiceLine.UnitPrice,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.41626721623939117, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),filter(getData(Track),Track.Milliseconds,>,5817216),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.42121301170076547, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5817216),filter(getData(Track),Track.Milliseconds,>,5817216),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.4308779304999198, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),filter(getData(Track),Track.Milliseconds,!=,5817216),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.43761295556005536, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Composer))", "score": -0.43976220973869523, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,5817216),Track.UnitPrice,<,5817216), Track.Composer),Track.Composer))", "score": -0.4416989280788447, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(filter(getData(Track),Track.Name,<=,5817216),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.44795610438715583, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,5817216),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.45020861609510826, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5817216),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,5817216),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.45825958248543835, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.18967970798985334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24932530115620466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25555792044178816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4012404937602696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,IT Manager), Invoice.BillingCountry),Employee.Country))", "score": -0.4456008855559048, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4558897275783238, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,IT Manager), Invoice.BillingCountry),Customer.Country))", "score": -0.4746400896765408, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48330768536106916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,IT Manager), Invoice.BillingCountry),Employee.Country))", "score": -0.5052464787222561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,IT Manager), Invoice.BillingCountry),Employee.Country))", "score": -0.5114790980078396, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5234832173518953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,IT Manager), Invoice.BillingCountry),Customer.Country))", "score": -0.5342856828428921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,IT Manager), Invoice.BillingCountry),Customer.Country))", "score": -0.5405183021284756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,IT Manager), Employee.Country),Invoice.BillingCountry))", "score": -0.5432213252715883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}, {"orig_question": "In which countries is no IT Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,IT Manager), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5831288105182466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,!=,284055),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.34978612336512566, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,!=,284055),getData(Track),Track.GenreId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.35386453842112403, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,>,284055),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.3794167276026499, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,>,284055),getData(Track),Track.GenreId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38349514265864826, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,!=,284055),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Milliseconds))", "score": -0.39759124670894147, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,!=,284055),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.40166966176493984, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,!=,284055),getData(Track),Track.GenreId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.40831222070261686, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,284055),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.4136256244138255, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,284055),merge(getData(Track),getData(Genre),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.4228977338456589, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,>,284055),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Milliseconds))", "score": -0.4272218509464657, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,>,284055),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.43130026600246407, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,284055),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.4313096780992262, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,>,284055),getData(Track),Track.GenreId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.4379428249401411, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,284055),merge(getData(Track),getData(Genre),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.44058178753105964, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,284055),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.GenreId), Genre.Name),Track.Milliseconds))", "score": -0.447987786147576, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1762955992454024, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.2601858455352817, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3003619354256715, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.30428861056724565, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.31259399467335824, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Milliseconds,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.31922069435205336, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.321699457678866, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Genre.Name,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33302508685995785, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Invoice.BillingAddress,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3443360452551943, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Hip Hop/Rap),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3446637435332155, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3606240222938563, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.3683419603776842, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.GenreId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.3687452898946872, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.3741075932496335, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.38991704966083457, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1554704375699856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15935094823593282, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1943809424046176, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21163480381520283, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2251103704639088, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.22898824575966922, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2335355527103279, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.24104153919231877, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.25429043179875976, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26946789230822954, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.28062532960413955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2809501223556664, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2889274674906087, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.3027566918273608, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31575557321441555, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.30993195691700104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31832718181568553, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.3422632250229639, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.34473488969606253, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),MediaType.Name))", "score": -0.34869664139978573, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.35116830607288435, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.35594078853781475, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36408206801709664, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.36512772170315366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.3721837480712895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38057897296997395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.38432948665580446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Milliseconds))", "score": -0.38802451060141613, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(Track),InvoiceLine.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.39272471155448896, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4073211469513021, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18830311873950054, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.22681452780915784, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.2641969342426339, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.273458180756411, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.28810591687101217, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.29101846289466954, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.Name,!=,Aerosmith),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3025917763928542, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.30474601969371345, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.31656028056660673, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.32123550578833066, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Aerosmith),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.32173337195842505, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.3234432562279402, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Aerosmith),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33014898648037433, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aerosmith),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3326623506062447, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.33798828844937195, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.21463288329541114, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.22273245062707334, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))", "score": -0.24625190791616042, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.24704355209231355, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.25557447272668965, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2665678878833304, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27199042798676004, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,>=,1), Album.Title),Album.Title))", "score": -0.27698460343614717, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,>=,1), Album.Title),Album.Title))", "score": -0.2786625767130628, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2933337876000874, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.3260425330408907, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,>=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3438635210927939, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.347880687317883, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Artist.ArtistId),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.35140982460647546, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3659340503722652, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.2857620116547443, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.30798190184830265, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.32218265054613227, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.State,=,AB),Track.UnitPrice),Track.UnitPrice))", "score": -0.3343897004827318, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),Track.UnitPrice),Track.UnitPrice))", "score": -0.3428421104126465, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3444094825849195, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3458693036424447, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.34668769600242383, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3725928300975835, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.38000165610604497, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,AB),Track.UnitPrice),Track.UnitPrice))", "score": -0.3811515422307708, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3837464876406927, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3922798585349875, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3928443379363781, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.40908021729462124, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15655023126380133, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1873303027387646, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.21314758068211523, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23367830871843823, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.25014011470131275, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25738987978348327, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27488676611218793, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2855105416468961, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.28895080752560653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31920766480567586, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32219959881672083, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3261201219203334, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3298795566656275, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33138844355441627, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.33883581987502875, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),InvoiceLine.UnitPrice),Album.Title))", "score": -0.20213512985974047, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.25561997352751364, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),InvoiceLine.UnitPrice),Album.Title))", "score": -0.25872143204961734, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.27676920433030333, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),Track.UnitPrice),Album.Title))", "score": -0.2773035817867625, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2807585208466171, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2866084520114939, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2969299508996644, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.30878347690476665, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3180791817024541, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1),InvoiceLine.UnitPrice),Album.Title))", "score": -0.326450173622864, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),Track.UnitPrice),Album.Title))", "score": -0.33388988397663943, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),InvoiceLine.UnitPrice),Album.Title))", "score": -0.33734482303649405, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3386191169444586, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3425731964565954, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.16590371848901175, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Milliseconds),Album.Title))", "score": -0.16657108592721653, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19324902968580865, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2114712242501017, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.23009782337840284, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.25404759928578097, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.2922552002206828, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.3024336027611065, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Milliseconds),Album.Title))", "score": -0.3164342790006394, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name),Album.Title))", "score": -0.32629356640522517, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Alternative),Track.Milliseconds),Album.Title))", "score": -0.35685900345766347, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.35744284542986293, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.36877985039142425, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.37562957146014253, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Track.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.37633601785618276, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.1355217178621026, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.21178699535359166, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2621590885368594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.2800468372889742, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,!=,Classical), Playlist.Name),Playlist.Name))", "score": -0.29697009055247026, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.2998098723148116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3005310103429923, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.31167853100753123, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.31519819886817924, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3266040486851125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Employee.State))", "score": -0.3359116632099984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34252093137500805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.34272723579520015, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3437065294205662, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.35631212031814047, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,MB), Employee.Email),Employee.Email))", "score": -0.17692430333590892, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,MB), Employee.Email),Employee.Email))", "score": -0.34114119142641575, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,MB), Employee.Email),Employee.Email))", "score": -0.3539081291983166, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,MB), Employee.Email),Album.Title))", "score": -0.35527398148036166, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,MB), Employee.Email),Employee.Email))", "score": -0.40368933912669513, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,MB), Employee.Email),Track.Bytes))", "score": -0.41063196973300364, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,MB), Employee.Email),Album.Title))", "score": -0.41270013169742015, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,MB), Employee.Email),Album.Title))", "score": -0.41782212918064104, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,MB), Employee.Email),Track.Bytes))", "score": -0.4357347914696515, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,MB), Employee.Email),Employee.Email))", "score": -0.43640304373002436, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,MB),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Email))", "score": -0.44264207020153845, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,MB), Employee.Email),Employee.Email))", "score": -0.44268173740601924, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,MB), Track.Bytes),Employee.Email))", "score": -0.46150310954553814, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,MB), Track.Bytes),Album.Title))", "score": -0.4756358995994841, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.State,=,MB), Employee.Email),Employee.Email))", "score": -0.47585656323826697, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.08133555583366552, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.Country),Customer.Country))", "score": -0.36228876233690244, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Invoice.BillingCountry))", "score": -0.4442180928470851, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.Country),Invoice.BillingCountry))", "score": -0.46800499454730016, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Invoice.BillingCountry),Customer.Country))", "score": -0.5400875215291308, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.5558309969364927, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Customer.Country),Customer.Country))", "score": -0.556641067675303, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Customer.Country),Customer.Country))", "score": -0.5724162277638243, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6458037537395285, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Invoice.BillingCountry),Customer.Country))", "score": -0.65167984496565, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Invoice.BillingCountry))", "score": -0.6615472291468905, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Customer.Country),Invoice.BillingCountry))", "score": -0.678132459974222, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Invoice.BillingCountry),Customer.Country))", "score": -0.7336297561287211, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.BillingCountry),Customer.Country))", "score": -0.7502149869560526, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.7659584623634146, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.1086408813671369, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.318083969988038, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.34326187665230096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.34680570650593556, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.35353460004561527, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.35707842989924987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.3774099779502649, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.38016771967968177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.42264632856850404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.42882357840849966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.43236740826213427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.43909631287716827, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.4426401095047399, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.4628023403795133, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.4628947632876544, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds),Invoice.BillingState))", "score": -0.2802140278410223, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3224820569884526, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3282841651598462, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.330785085336417, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33798938465095596, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3446680153968822, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds),Invoice.BillingState))", "score": -0.3455993221672485, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3462332376312201, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3506303313735187, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.36011620700919317, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.36190781242017134, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.36585928656417305, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.Milliseconds),Invoice.BillingState))", "score": -0.39084629149060407, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.39844088551732576, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.Milliseconds),Invoice.BillingState))", "score": -0.4173633364350486, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3390915796602741, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.38085619146701655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Science Fiction),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.3836591740883649, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.38835277097638227, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.39091629463821886, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40259479060478315, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.41250547838591234, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Science Fiction),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId), Track.UnitPrice),Employee.BirthDate))", "score": -0.41437969065418906, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.43011738278312467, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4326809064449613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.44017748595432704, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.Name,=,Science Fiction), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4426541476720889, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.4727255296599342, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Employee.BirthDate))", "score": -0.4818212049574826, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.48388332576192755, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.12437459667026265, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22517074068428736, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.23960137620310565, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,New York, New York), Playlist.Name),Playlist.Name))", "score": -0.25533861626371224, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2696625477390215, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2832779151969304, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28649202542371427, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2920504993307674, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2927799269877478, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3094285631269888, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.309685462852947, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<=,New York, New York), Playlist.Name),Playlist.Name))", "score": -0.3342524119011678, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,New York, New York), Playlist.Name),Playlist.Name))", "score": -0.34849767051693986, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.35250393962466137, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track New York, New York with a price unit of 0.99 or higher?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Bytes))", "score": -0.3551697360474847, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.Name,=,New York, New York),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))", "score": -0.15602461736853002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Address),Customer.City))", "score": -0.34713649492914556, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Country),Customer.City))", "score": -0.3602117572372663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.PostalCode),Customer.City))", "score": -0.3696762893741834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.PostalCode))", "score": -0.42891560610587476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.State),Customer.City))", "score": -0.43753853183443425, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.LastName,=,Goyer), Customer.City),Customer.City))", "score": -0.45763438683206914, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), InvoiceLine.Quantity),Customer.City))", "score": -0.5345146034305799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.Country))", "score": -0.5585371118431794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),InvoiceLine.Quantity))", "score": -0.5585834842568147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Email),Customer.City))", "score": -0.5610430214946973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), InvoiceLine.UnitPrice),Customer.City))", "score": -0.5704719994610059, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Company),Customer.City))", "score": -0.580010173136543, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.Address))", "score": -0.581649796331476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,Goyer),getData(InvoiceLine),Track.TrackId,Invoice.CustomerId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Customer.Email),Album.Title))", "score": -0.8748145147290591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.04572995003218239, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.44611701458597963, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.48216405134553497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.4881624284939368, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Invoice.BillingCountry))", "score": -0.5160071285990853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.City),Customer.Country))", "score": -0.5278865899508673, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.State),Customer.Country))", "score": -0.5509361531203467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.City))", "score": -0.5795739325312752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.6664595910897333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.6692256638398248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Country))", "score": -0.6714683918396103, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Invoice.BillingCountry),Customer.Country))", "score": -0.6776761319106299, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.6955676981797296, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Artist.Name),Customer.Country))", "score": -0.7056032325690467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}, {"orig_question": "In which countries do we have customers who don't live in the city Bras\u00c3\u00adlia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))", "score": -0.719952979552545, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Bras\u00c3\u00adlia), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15400397456648637, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)", "score": -0.19280787500425373, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19695141330924634, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20568846213495562, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21612848601794488, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2164355430115569, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22338657695463315, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)", "score": -0.22577210722406793, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2396732885328198, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2474796461684603, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2518740917132285, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2522562062014599, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2592402133650471, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26199085874615946, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent in one purchase for purchases o tracks from artists other than Alberto Turco & Nova Schola Gregoriana?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.28652733228940386, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alberto Turco & Nova Schola Gregoriana), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.05682265845825896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Phone),Customer.FirstName))", "score": -0.4124380191206001, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.438663489127066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.4493357082246803, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.46477187325945124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.State),Customer.FirstName))", "score": -0.4690938135026954, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Fax),Customer.FirstName))", "score": -0.5092086335062049, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.5098714586893958, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Fax))", "score": -0.5270897289155982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.5286023681401275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.LastName),Customer.FirstName))", "score": -0.6084321578382514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.6270582740544342, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.State))", "score": -0.6479064365266822, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.LastName))", "score": -0.6562569280504249, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),MediaType.Name))", "score": -0.6594950695871376, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,robert@chinookcorp.com),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20507068725266667, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2305135465339951, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.City,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2859917967707764, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29683717479225785, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.City,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3052342107212578, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.31158952157345365, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.31726656243666973, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Customer.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.32153926883548206, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Employee.City,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.32382493874775187, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.329812747397372, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3348428034106229, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3355905120931832, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33587416262227027, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3375651296390784, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.City,!=,robert@chinookcorp.com),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34298164669168046, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.33843787842245365, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))", "score": -0.34873512592741457, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Employee.City))", "score": -0.3538036921030931, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3547111711950182, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Employee.City))", "score": -0.37007698487565766, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.City))", "score": -0.3836956779797719, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RJ),getData(Track),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))", "score": -0.4157976317251802, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.BirthDate))", "score": -0.41884746596011824, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4189265805840654, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Track),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))", "score": -0.4190779462986082, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.BirthDate))", "score": -0.42224208864034096, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))", "score": -0.43484857747010364, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RJ), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.43519987335662996, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4359262069806172, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "On what date was the employee hired who has supported customers in the billing state RJ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RJ),getData(Track),Customer.SupportRepId,Track.TrackId), Employee.BirthDate),Employee.BirthDate))", "score": -0.43618949878851093, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,RJ),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.14175229902684805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.19307881976783392, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.37631403292834875, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Canada), Employee.Phone),Employee.Phone))", "score": -0.3993511806365859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.4160012492102396, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.42935796465098974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.Phone),Employee.Phone))", "score": -0.4506777013775718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.48310905593555287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.49034705693251646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.49970345489055035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5034321721831686, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5106701434151174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5175934919279825, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.5510299756315362, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5704279729288828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.08134539268212393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.31637257925467566, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.40565151657210663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.42534870497183874, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Customer.Country))", "score": -0.45851617894368246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.City))", "score": -0.5260942562599666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Customer.Country),Employee.Country))", "score": -0.5338226084713824, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.5491377770085819, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.HireDate),Employee.Country))", "score": -0.5543087844853289, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Address),Employee.Country))", "score": -0.565985870838631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.HireDate))", "score": -0.5662785156746395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Address))", "score": -0.5776284321327694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Invoice.BillingCountry))", "score": -0.5972722157021053, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Invoice.BillingCountry),Employee.Country))", "score": -0.5975465004448779, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}, {"orig_question": "From which country does the employee with the fax number +1 (403) 456-8485 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))", "score": -0.6043614803929813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 456-8485), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23392140969131248, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24312533926201432, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),Employee.City,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2564904842774486, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27104162413392874, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2769387229957291, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.AlbumId),Employee.City,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27777873059812175, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.27873690748394786, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2927945456312563, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.29352433496346236, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2972540353247381, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.29802241434292936, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.30429758521517825, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.30992277955404435, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3188552040270882, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.32803871817771335, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2976119402502856, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,T6G 2C7),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3028748793556133, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,T6G 2C7),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32516509121501824, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,T6G 2C7),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33042803032034596, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.3363110073678488, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3385236559050647, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34378659501039244, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.363068437268947, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,T6G 2C7),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3660768068697974, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,T6G 2C7),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36636172978380754, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3683313763742747, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,T6G 2C7),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3713397459751251, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Customer.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.3897895355260899, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39816300773209573, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Margaret),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39891806066577934, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3032140614322998, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.396733391457019, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.44710101862853413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.4590532662205078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Employee.State),Invoice.BillingState))", "score": -0.4726430060200073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.47354344036023654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4832669863335468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Employee.State),Employee.State))", "score": -0.4988995071674469, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.5069318857380101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.5081042828751506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.5206377518938753, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Employee.State),Employee.State))", "score": -0.5253419288991493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.5315499396648311, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.5333743606314131, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.5345467577685538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.16033748226852781, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.18196680164276632, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.29044282373797614, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3634194203914376, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.47502451265001544, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Album.Title,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4978604216221168, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5012139505888772, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5343834819451514, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.551874972909726, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5530514612481423, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5705430275251262, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5819651558103685, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5844720864017277, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5918167607813689, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6019635817964439, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,Christina Aguilera featuring BigElf),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15864040908956847, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Christina Aguilera featuring BigElf),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22596842361721206, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,Christina Aguilera featuring BigElf),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24339270180128322, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2503142273838811, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25698135145744194, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Christina Aguilera featuring BigElf),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.269234152656822, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2864690038816748, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28955922266345696, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29053672457554086, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2945193508994253, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,!=,Christina Aguilera featuring BigElf),InvoiceLine.UnitPrice,!=,Christina Aguilera featuring BigElf),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2949605140922361, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.InvoiceDate,!=,Christina Aguilera featuring BigElf),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3001962408335749, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,Christina Aguilera featuring BigElf),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3034007134085709, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Christina Aguilera featuring BigElf), MediaType.Name),MediaType.Name))", "score": -0.3199862640913823, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types the tracks have that were performed not by Christina Aguilera featuring BigElf?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Christina Aguilera featuring BigElf), MediaType.Name),MediaType.Name))", "score": -0.35417387242241766, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christina Aguilera featuring BigElf),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,358948), Track.Name),Track.Name))", "score": -0.24438082808046602, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,358948), Track.Name),Track.Milliseconds))", "score": -0.2925760784128215, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,358948), Track.Name),Track.Name))", "score": -0.37306222700863145, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,358948), Track.Name),Track.Bytes))", "score": -0.3771256097534206, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,358948), Track.Name),Track.Name))", "score": -0.42123832189827226, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,358948), Track.Name),Track.Milliseconds))", "score": -0.42125747734098695, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4444707601948093, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.45161824010583684, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,358948), Track.Name),Track.Name))", "score": -0.45378195130615495, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4542650019261169, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4550097738697394, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.45625289069233455, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.46215718289849933, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,358948), Track.Name),Track.Milliseconds))", "score": -0.46943357223062776, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,358948),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.47152688968565326, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.33713901794941925, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.35015265980060756, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37876208777526776, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3948251174693123, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39757661792175025, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40703350563145446, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40908418266930935, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4097850060838924, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4118356377527863, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4150470751213008, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41779857557373873, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4197978463666064, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Baden Powell/Vinicius de Moraes),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4231268880183157, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4281542940477678, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4310448798555398, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.12328629519470269, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.2160078766537481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Track.UnitPrice))", "score": -0.3527301992071443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.38202146019466454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,683 10 Street SW), Employee.BirthDate),Track.UnitPrice))", "score": -0.44545178066618973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.4735888321665698, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Track.UnitPrice),Employee.BirthDate))", "score": -0.4989862986622029, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.55015728201397, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.5525233181906515, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.5639883060721331, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,>,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.5663104136256152, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,683 10 Street SW), Track.UnitPrice),Employee.BirthDate))", "score": -0.5917078801212483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,683 10 Street SW), Employee.BirthDate),Track.UnitPrice))", "score": -0.6114653642071062, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.621394458670693, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,>=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.6567098875311785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.03265350075707829, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.29425257021830475, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5072515862648288, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5390907095442891, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10547154),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5614859812119315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5724564725964133, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5815115661480377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5871637117713878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.587536723771383, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.Milliseconds,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5889410033868705, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5908466022704835, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5970284300510684, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10547154),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5976904506094924, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6073628085742987, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10547154),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6209024868235071, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.30735413253107474, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.3371876442121395, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.37705372180311175, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.39696873052420206, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,1.99),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.4288124507256922, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Fax),Customer.Fax))", "score": -0.44825042319652963, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.4765543860523562, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.Fax))", "score": -0.4845325042470301, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),filter(getData(Customer),Customer.Fax,!=,1.99),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,1.99), Customer.Fax),Customer.Fax))", "score": -0.5061771182457914, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.5265379762143321, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.5304365196617419, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.5320823782282843, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.5372351469180588, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.Fax))", "score": -0.5413903585176925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.545951610939472, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.15271646937194208, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1726536665595473, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Track.Name))", "score": -0.17546871726227126, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.18378477258097065, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.19543540147322058, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Bytes),Track.Name))", "score": -0.2606710459214636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Playlist.Name),Track.Name))", "score": -0.28956775435283205, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3000533073027299, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3326980503803244, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.33983155967893897, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.345608400787147, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.3553854294569613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.36068831704115456, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3725113401816564, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.37587961866338515, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.32485568333191306, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.3264437830387782, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.33150926003206854, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.35462402532655624, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Genre.Name))", "score": -0.36029737978696474, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Genre.Name))", "score": -0.3669509564871202, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.38112080046712415, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Album.Title))", "score": -0.3825064333954351, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,None), Genre.Name),Album.Title))", "score": -0.38325357923363934, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.3851739337086364, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Album.Title))", "score": -0.3891600100955906, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3942322654263672, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.4008858421265226, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.40930105161518565, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.41104391566697723, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.10484832902784547, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3490732509923074, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.36066382197077473, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.UnitPrice))", "score": -0.38205450126315554, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3994494356053341, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.436208428750317, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.45519523667302825, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4700907614200335, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.47324117091829976, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4753177156781396, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Milliseconds))", "score": -0.47628541109497746, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4911883534227793, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5113107177979734, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5192664144915922, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.5435133483761092, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3105980439042038, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.31789033126306177, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.32149758492738495, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.346078600501015, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.34773197638474196, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.35111244030491795, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.35361713612924583, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.354859672271257, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.35697814152419616, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.3586315174079231, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.36943046112915273, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Genre.Name))", "score": -0.38321253298155317, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3846662008514277, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,InvoiceLine.InvoiceId),Genre.Name,=,Jazz),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.38887691631169385, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the genre Jazz have been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Genre.Name))", "score": -0.39058647713744105, "correct_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15719043156681425, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16434776626612246, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18899525020732588, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1938787971834055, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23219941494493868, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23553901055452692, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31340667028743324, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3268693463695215, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33511853316433776, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33794945355270584, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3399913212249377, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3408070013172646, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3423233754419066, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34532963693653707, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3456797815005968, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.12621765633697654, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.20436773976724756, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2358612939139656, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.28276770175303356, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.292522265670025, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.29261534679274653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.29529968398601814, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Bytes),Track.Name))", "score": -0.3046295323435135, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.31560037179371786, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Milliseconds),Track.Name))", "score": -0.31914756752215945, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33354709195455323, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.33361964561971896, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3411128270726131, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Bytes))", "score": -0.3470939259404359, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.3961878908582096, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.066060675840892, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.4801266007523874, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Fax))", "score": -0.5785785778886701, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.State))", "score": -0.5909467515151757, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.608620286193491, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.6617323963178143, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Customer.Fax))", "score": -0.7893146491405787, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.8393441442971404, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.8683881258591193, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Fax))", "score": -0.8959650120789767, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.9175230748005445, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.9596098995179291, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Fax))", "score": -0.9773558154321464, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -0.9816859215152602, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.State))", "score": -0.983242891387499, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Track.Bytes))", "score": -0.17438175961797242, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Track.Bytes),Track.Bytes))", "score": -0.3181343606156588, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Track.Milliseconds))", "score": -0.3626030913037539, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Bytes))", "score": -0.40681435041551595, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Track.Bytes))", "score": -0.41318092238361714, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.4355521240317144, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.45400277830207775, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.Bytes),Track.Bytes))", "score": -0.46541532508955247, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.46654435307209496, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.4677737298851455, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4734006196552374, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.4745923632213059, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Bytes))", "score": -0.47941491496021627, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.48622438415550884, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4965134924280056, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.27209915644902144, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2928132188599739, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.308384105772936, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.3169211264845297, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3208392855936456, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.3625438599439287, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,2113),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.36334405446937396, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.36726221357848987, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.38355294779578514, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.39404238045528056, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.39613532713558125, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.39796053956439653, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,>,2113),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.40286581289480494, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4042669936629271, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.41487099082583295, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.07429163892900767, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18041709745127063, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.19025836558343326, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22781876989496117, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.23369961807423592, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2519217400737972, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.2539483516519199, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2632348175441066, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2828390988088587, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2859829268606599, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31351315047646133, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3149830702373949, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3165173381670719, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.32489049373858175, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3300367959310168, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.19166708710153643, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.23584327671953628, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.24069432021483173, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.2924721838684923, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.29535737733237893, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.30524413678832535, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3348742705904406, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3491163073531934, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.35496584203796105, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.36343578373640206, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.36596386037738493, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.36764584675945655, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.MediaTypeId,Genre.GenreId),Track.Bytes),Track.Name))", "score": -0.3707093682382516, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes),Track.Name))", "score": -0.39325474244423403, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.MediaTypeId,Genre.GenreId),Track.Bytes),Track.Name))", "score": -0.39515977132368624, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))", "score": -0.1285713685200859, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,5788407),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16622702989381527, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,5788407),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18904574730291906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))", "score": -0.20935140220964385, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,5788407), Artist.Name),Artist.Name))", "score": -0.2651317166617759, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,5788407), Artist.Name),Artist.Name))", "score": -0.28917911074213887, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,5788407),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28967340638180084, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,5788407),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29202059192023355, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,5788407),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.29404912620068296, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,!=,5788407), Artist.Name),Artist.Name))", "score": -0.2972534968943166, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,5788407),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,5788407),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3076360787467968, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,5788407),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3277931922999926, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))", "score": -0.36906623051618226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,5788407),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36913444261367695, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists with track of a size other than 5788407?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,5788407),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.38629552208285817, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,5788407), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.1482399455098512, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.18757232505686247, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3009525305169518, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.37098619253811194, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.48280918656026967, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Album.Title,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5092021496359487, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5125767835166929, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5437140794189549, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5602688058050984, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5700760409165865, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5865441225908062, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5866307673027299, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5871086855455631, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.603033327180787, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6030988489769497, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.21425271968109882, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,7859167), Track.Composer),Track.Composer))", "score": -0.26378557274802006, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,7859167), Track.Composer),Track.Composer))", "score": -0.37574272046549595, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.3956986418306608, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4066680936135976, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,7859167),getData(Genre),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.43252413454118405, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,7859167),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4450611166622993, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.45796942278746794, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4587836485035461, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.46854426679704675, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4782731592822101, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4822014413170911, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4823325709683807, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.49206146345354407, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,7859167),merge(getData(Track),getData(Artist),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5188367648439002, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.16306060968942124, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.16900728916413255, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.18503934532204105, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20706010201354322, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.23515880479668494, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.24447011032656824, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2502621260200799, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.2521234095548354, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2571694899238607, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.2621462681862711, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2683217399181326, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Chile),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2706568546143542, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.2713753009452977, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.28644144311347347, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2883974748669924, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11532862998294435, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1578855378921845, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19910418667908722, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2174432465129051, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22738755290858167, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22853449268828405, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24572661274239951, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2613090757881722, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2653955492719745, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2677531293680647, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26867739661166234, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28135417511249505, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.288691459010687, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.29488915800175197, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2982610890612477, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1311665132800313, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1357702394530925, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.18040029676182465, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25661657767642765, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.26404348954814105, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27815218476795994, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2788187211973749, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29149689266068163, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29270128351527397, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3124882036995269, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31536571323995516, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.31635028655702857, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34051965900137127, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3580850456850082, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.36280429110190776, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13958909584258108, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.15620363443508684, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.16056220743157895, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1625814720963148, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.16387267465605745, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20134885444077405, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20285081582168132, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22990645192758985, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.27060184167839985, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.28410678562092995, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3005745749972062, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.3114044054196526, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.3174391224024245, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.34467427076538487, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.34932896388007884, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24129654667843983, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24769058434116661, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Gordon), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2509126612937205, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Gordon),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.276784034166044, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30907043544196133, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Gordon), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33930344734599116, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35671839633063057, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3575976545973121, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gordon),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35782222723534685, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Gordon),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36182800136932525, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Gordon),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Gordon),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36811820154330793, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),InvoiceLine.Quantity,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3686112680507597, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),Customer.LastName,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3691333675051741, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Gordon),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37084390675819634, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Gordon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3798376712726342, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2278220732968404, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25240222389692973, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2667330336065739, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2723631162660888, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.28448054511225146, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28691319880606764, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28983356063940635, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2920197367758034, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29326239373874596, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.29749057135272106, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.30150487219338057, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.3086965152882022, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3138436329776562, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31863949205012415, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.3340549936750021, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.07132161882763478, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.19405250922894413, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2222384584764553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.2257400631009984, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2411610149366806, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.260528021872851, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3076365275805875, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.Address))", "score": -0.31622743520636554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.32813628550004126, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3390887456788176, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Invoice.BillingAddress))", "score": -0.35072466642373723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.35363954568924255, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3557799555576715, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.36559021147205056, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3834998273550657, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03388258218298699, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.4508358383452001, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5162050103701382, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.7563278093192959, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.7779858596695703, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.8444052226914209, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.8954818807615084, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9954663458598945, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.092117335562136, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.0973837739071104, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1281441746507999, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -1.1493980228542227, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1782621146577836, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(InvoiceLine), Album.Title),Album.Title))", "score": -1.1827012426747467, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.2253556291763266, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.1316176385229896, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.5072715742139251, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.InvoiceDate,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.543544645222058, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Customer.State,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5473784904570717, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5972953030602166, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6184121493117241, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6219584697461542, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.629484568303063, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6380437074652767, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6386964281605452, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6435189973457479, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6441717606939914, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.6709963356989072, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.7371757414778058, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Customer.City,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.7400587265299441, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.0936655279401748, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.37922269889029364, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Zimmermann),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.4613071633739498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.PostalCode))", "score": -0.48460397107191966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.5007400930080621, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.5167456318821181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Zimmermann),Customer.LastName,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5242215476206797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Zimmermann),Customer.PostalCode,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5293037016641698, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Zimmermann),Invoice.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5313228596839717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),filter(getData(Customer),Customer.LastName,=,Zimmermann),Invoice.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.545437264869334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5485715574120079, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.5515485373410709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.PostalCode),Customer.Address))", "score": -0.569371996276459, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Address))", "score": -0.5712498834472496, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Zimmermann),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5869717139484185, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.148480135660354, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1697729605561332, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18322132029389457, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20430261930342122, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21775097904118257, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23305485414239746, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2782097878205169, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.293308243555384, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29598302902834095, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2996782734643561, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,Bruce Dickinson/Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.30539727012617307, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30836673714054813, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bruce Dickinson/Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3234383272919081, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3292255580600867, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3393151090893573, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15276775528692704, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17806796352292698, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20812390715416795, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21098763388249986, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21416162406306608, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2513630439260692, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26088957020422404, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28582926709544426, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29821844073696574, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.3007851880049771, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.3090718876877894, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3095632541671488, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3145103629462881, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.32184996030883567, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33299354734191516, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.20156564152375744, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.23713237429895093, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),Invoice.InvoiceId,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.27747140636877576, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),Invoice.InvoiceId,>,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3130381391439693, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.31627905362678405, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3486499641167451, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.348895710723631, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.35798253999926144, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.35828981075316796, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3585605810156066, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.3839627805737325, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3842166968919386, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.39354927277445495, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.39385654352836147, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(InvoiceLine),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.4478214148324921, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Address),Customer.PostalCode))", "score": -0.18654967626935104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Address),Customer.Address))", "score": -0.36769761672621826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Address),Customer.PostalCode))", "score": -0.3740257301033125, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,leonekohler@surfeu.de), Customer.Address),Customer.PostalCode))", "score": -0.3828686752021895, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,leonekohler@surfeu.de), Customer.Address),Customer.PostalCode))", "score": -0.45188104888802627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Address),Customer.Company))", "score": -0.45440221360331634, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.49798835596448043, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Company),Customer.PostalCode))", "score": -0.5066144593656645, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.City),Customer.PostalCode))", "score": -0.5446204670370207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Address),Customer.Address))", "score": -0.5551736705601797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.State),Customer.PostalCode))", "score": -0.5564379819334135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,leonekohler@surfeu.de), Customer.Address),Customer.Address))", "score": -0.5640166156590567, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.5722916849554167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,leonekohler@surfeu.de), Customer.Address),Customer.PostalCode))", "score": -0.5747189798057661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Address),Customer.LastName))", "score": -0.5883328371346579, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.10590870942314723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Customer.State))", "score": -0.2875877235396729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.4694046553536282, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Customer.Fax))", "score": -0.4759189550145493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Customer.Address))", "score": -0.47848660390218356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5154629497169481, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5173377570076809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.5354397967649207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.5420548252145385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Track.UnitPrice))", "score": -0.5571014944775925, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Customer.City))", "score": -0.5753753844960556, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.5767503250092679, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.BillingState))", "score": -0.5860883657201157, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Customer.State),Invoice.Total))", "score": -0.5978599338172899, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.6229792300923691, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.27740083482058253, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.Fax))", "score": -0.2860935762146255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Track.Bytes))", "score": -0.4113839849451324, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Fax),Customer.State))", "score": -0.42102424275071826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Fax),Customer.Fax))", "score": -0.4297169841447612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Employee.BirthDate))", "score": -0.44132184829504695, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Employee.State))", "score": -0.47686946239264216, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Employee.Fax))", "score": -0.5006796106317779, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Employee.HireDate))", "score": -0.5054771586874267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.513084402642562, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Rogers Canada), Customer.State),Customer.Fax))", "score": -0.521777144036605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Fax),Track.Bytes))", "score": -0.5550073928752681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.Country))", "score": -0.5685327335813781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Fax),Employee.BirthDate))", "score": -0.5849452562251827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.5933064728596946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.1098471233735836, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.2105037519822872, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Michael), Employee.Address),Employee.Address))", "score": -0.38658813630445366, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,Michael), Employee.Address),Employee.Address))", "score": -0.41708437596662407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.4172798736135519, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.4529101258258379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Title),Employee.Address))", "score": -0.49917513189120655, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Title))", "score": -0.5136354310552633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.5179365022222555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5208526054511822, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.5535667544345415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.568527350772456, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Title),Employee.Address))", "score": -0.5998317604999102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Title))", "score": -0.6142920596639669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.6721251612643755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.05001102009917185, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.3308510622097477, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.5324719702694819, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5852109911877552, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.5864446775849501, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.5869882719453017, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6080076205851057, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6117661954675787, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,None),getData(Album),Invoice.CustomerId,Customer.CustomerId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6128170042997931, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6139427728302916, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,None), Artist.Name),Artist.Name))", "score": -0.615376176112477, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,None),getData(Album),Invoice.CustomerId,Customer.CustomerId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6351703653449238, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,None),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6525488416980937, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.676035670486597, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingCountry,=,None), Artist.Name),Artist.Name))", "score": -0.6942573951419035, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.35851717028344865, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),Track.MediaTypeId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4570058217975696, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),Track.MediaTypeId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.47411936785287245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.48031297242118304, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.4880322233303553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.4887963122153155, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.MediaTypeId,Playlist.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.4906450145983532, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.4981774605351519, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Playlist.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5007902518031498, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.MediaTypeId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5147667990648515, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),Track.MediaTypeId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5245103195843537, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),Track.Bytes))", "score": -0.5288124120716988, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Track),Track.MediaTypeId,Track.TrackId),Track.Milliseconds),Track.Bytes))", "score": -0.5329666393903171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Playlist.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.5443930195127357, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),Track.Bytes))", "score": -0.5459970940900315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.17095134919605653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.20667959245077216, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.23738044059986257, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.26498557155127617, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.27144315499193206, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.2752996567421437, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Album.Title))", "score": -0.28678040671021415, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.2909483818137145, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2917712956936787, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),Track.Milliseconds),Album.Title))", "score": -0.3050524165785713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.30881326823449007, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3184727016234694, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.324078255545218, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.32793475729542965, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33325038929616874, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.16972978756603382, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21379363334486587, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21982776547785038, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2253368203843809, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.24840148941556225, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25782396876590746, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2644675373438083, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.28025918510766323, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.28717729443070383, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.29214739572255966, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3029689421945587, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.30675869743065826, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3152120691925353, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3286782589977458, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.33088922393653775, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.10151776701241033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Fax),Employee.Fax))", "score": -0.33276490151911275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.BirthDate))", "score": -0.4184362649175455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Fax))", "score": -0.4325468952956726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Fax))", "score": -0.43274090655177133, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,AB), Employee.Fax),Employee.Fax))", "score": -0.4372682984176208, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.City))", "score": -0.4410434126111795, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,AB), Employee.Fax),Employee.Fax))", "score": -0.47768099263339536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5256819243732025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5401202853026916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Fax))", "score": -0.5633271730694105, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Email))", "score": -0.5880626200887491, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Fax))", "score": -0.6002016759666731, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Fax))", "score": -0.6050555206093122, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the different faxes of employees from AB", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,<=,AB), Employee.Fax),Employee.Fax))", "score": -0.6076822358372738, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.23387157103570644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.2544754140690202, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.30514657429012004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.3257504173234338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.4227544062450761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.44335824927838985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.4940294094994897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.4988928877428407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.5146332525328035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Customer.PostalCode))", "score": -0.5156182136997813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Customer.PostalCode))", "score": -0.5362220567330951, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.5701678909972543, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.5744328231230611, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (403) 262-3443), Employee.PostalCode),Customer.PostalCode))", "score": -0.5868932169541949, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,+1 (403) 262-3443), Customer.PostalCode),Customer.PostalCode))", "score": -0.5950366661563748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.15165637737118232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.27258920228086936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.33953819727503287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Genre.Name))", "score": -0.3443621241112851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.4319184825380944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Genre.GenreId))", "score": -0.4489446722527646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Employee.LastName),Genre.Name))", "score": -0.4652949490209721, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Genre.Name),Employee.LastName))", "score": -0.4772208773156308, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.4953807399233483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Track.Name),Employee.LastName))", "score": -0.5000231110116147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,+1 (403) 246-9899), Employee.LastName),Genre.Name))", "score": -0.5322439440151356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Employee.LastName),Genre.GenreId))", "score": -0.5698774971624516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5792725489100121, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Customer.LastName))", "score": -0.5865468822976254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Genre.Name),Employee.LastName))", "score": -0.5981537022253178, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03039767175927665, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5139149674133747, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6182069083140505, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -0.7595748258287034, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.78250800671466, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -0.8370440392327151, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -0.8677928680808692, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.9440185836954001, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9915102625850802, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.AlbumId))", "score": -1.0036792196110682, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Genre.GenreId))", "score": -1.0751715729619218, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Genre.Name))", "score": -1.10008864298369, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.108741396218839, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -1.1161396964799462, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.TrackId))", "score": -1.147271804139841, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.0987415525533464, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.20789376739716042, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2225818828382713, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.25688816092693006, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.257490829786458, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99), Playlist.Name),Playlist.Name))", "score": -0.26306746880435367, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.State))", "score": -0.3061680182674698, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3144764669660342, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3363819111016845, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,0.99),Track.UnitPrice,<,0.99), Playlist.Name),Playlist.Name))", "score": -0.348066406983895, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3564427866217342, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,0.99),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3709283988061487, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3802312194303438, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99), Playlist.Name),Playlist.Name))", "score": -0.3973226199365354, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.4110585499366108, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.1369163470195183, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.20319601638803864, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.2217551384410005, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2266135922241441, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.23956146433878314, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.27550193852177346, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.29131508568069553, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.29413374800400705, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3140906246636911, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3159028939840514, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.31804836187648705, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.3257334539107129, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3259641486135256, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Movies), Track.UnitPrice),Track.UnitPrice))", "score": -0.3512723349464867, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many different prices exist for tracks that are not in the playlist Movies?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3533451437010159, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.16115614447945514, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.19001076588490282, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.2267128687264796, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.22782769802946937, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.25903441994549864, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.2760173614559631, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.30256287053068753, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.3161762092358277, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.Composer))", "score": -0.31980228861137755, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.32697831019990403, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.33106612670074786, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.34300826017551844, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.34700681457348725, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Track.Composer))", "score": -0.35598504748127696, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Artist),InvoiceLine.InvoiceId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.3938640501101497, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2907244930539878, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.30559615986596006, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity),Customer.Address))", "score": -0.3188790050786074, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity),Customer.Address))", "score": -0.33375067189057966, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3375315388330673, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity),Customer.Address))", "score": -0.34140552942915126, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Address))", "score": -0.3550768691348513, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Customer.Address))", "score": -0.3612610791047024, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Address))", "score": -0.3699485359468236, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3978244806595626, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4126961474715349, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.41845924021097075, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4246136508324859, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity),Customer.Address))", "score": -0.425978983270131, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))", "score": -0.42975669442073494, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.21218433710628484, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2211281516872086, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24359348418608967, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.271091272000894, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27685694342520334, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2789276616226817, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2799899985118421, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2811567573708587, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2830858654813248, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2939254274675225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29726893738755394, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30776685843168095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31964234065885033, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3214232244194941, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,<,2011-03-05 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32476679802281294, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.110015051628179, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.192419700108051, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.45335188586821035, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4785345693571205, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5347015338869929, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5406510157706225, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.554290311882649, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5573607971172593, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5606840767950881, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5655541395585905, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.56880918750385, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5773939492365142, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5945289299804246, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6018978076941919, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6030543517146296, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2047809323695109, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.21437101118492094, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23576533310094097, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24220321589027363, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27139483490583954, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.2892996329255816, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Jerry Cantrell),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28934505317589637, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,Jerry Cantrell),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2955371541558291, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30237923563726965, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Jerry Cantrell),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30528211662039095, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3088171184266023, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3275770698431625, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.33868653689739964, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Jerry Cantrell),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3484316654670762, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.3582165459620719, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.UnitPrice),Album.Title))", "score": -0.36769963686704055, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),Track.MediaTypeId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.3707498343297964, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.38046793498970943, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3936934757377522, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.393949449908166, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),Track.MediaTypeId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.40107753022856496, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4024043748154342, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.UnitPrice),Album.Title))", "score": -0.40392466212222117, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.410795630888478, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.42427714580693454, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),Track.MediaTypeId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.42709414002776047, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.UnitPrice),Album.Title))", "score": -0.42839825909509854, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.UnitPrice),Album.Title))", "score": -0.429918440078484, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.MediaTypeId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.43024321526982134, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.4368122406876735, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.14191073139886706, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.1522894983570977, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.1688516021519424, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.17619053384518021, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.18014069652419168, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.26112597506268936, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.31860577413418034, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.32888043013464213, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3308970913892546, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.334889626107373, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.3373758914200729, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.33853913985483786, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3456670399227998, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.36956807541088227, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.3969879557850763, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13410539074993721, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.24986833973980538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27416641160107247, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3755627487525999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,2009-11-07 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.38992936059094063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.46658974035835854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.46744632048459606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.46750416041500176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.4780946800252015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.47815251995560726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-11-07 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.49132569774246804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4975438927040159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,2009-11-07 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5075279562279347, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.5111886029356596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities are invoices from November 7th sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,2009-11-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.5112464428660654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-11-07 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25818289333956007, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28868964658083784, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29086908833553976, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31309349883053267, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3176033111884442, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33145972232254156, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34060961804358225, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3446953968998314, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3502895061844239, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3595096493948011, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36308717762110515, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36311524023392144, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3641459076953393, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3670798683835199, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36911274275584205, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.05930076971617382, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.36049614934617846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.39090482391384285, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4253027833179736, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.43087422921538826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.43719373557301905, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4418453201507646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4431649021200049, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.45926220535033596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Country),Customer.Country))", "score": -0.45971374415201083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.4739767114069764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.48989534615946706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.490758269100959, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.4957847788066352, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.4964686433222596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.11072348385278019, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.23755942239586147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.2647527339977387, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.39158867254081997, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.41529237899158034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.4811674393004483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.5104902419370774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.5421283175346616, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,AB), Customer.PostalCode),Employee.PostalCode))", "score": -0.5496680605463038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,!=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.5693216291365388, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Customer.PostalCode),Employee.PostalCode))", "score": -0.5793210049268964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.6053185130166271, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Customer.PostalCode))", "score": -0.6233493122381333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.6373261804801587, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees working in the state AB? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Employee.PostalCode),Employee.PostalCode))", "score": -0.6544069084447983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)", "score": -0.07532847594513485, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<,11616384), Track.TrackId),Track.Milliseconds)", "score": -0.27983719975197163, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33767515158856276, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3855124485076551, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,<=,11616384),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.40519860382520945, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.41563406108074247, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11616384),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.42180763602508187, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11616384),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.422010453428401, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11616384),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4386194856282734, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4582687321795407, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.461280614173033, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)", "score": -0.5077933085504361, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11616384),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5219051605424104, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)", "score": -0.5228138316808085, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that are the size of 11616384 or smaller?", "inferred_code": "avg(distinct(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)", "score": -0.5619897306451154, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,11616384), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.3671138285916852, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Milliseconds))", "score": -0.3942175774504586, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,R&B/Soul),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.39812533909701686, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.4137149254819484, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard), Track.Composer),Track.Composer))", "score": -0.419236220546078, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Composer))", "score": -0.42399167397856513, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Composer))", "score": -0.42483578594557386, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Track),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Composer))", "score": -0.42574330923286113, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Milliseconds))", "score": -0.4305293981062692, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.4330305338074768, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R&B/Soul),getData(Track),Track.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.4368716699424601, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Composer))", "score": -0.44480350810607855, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.44653515339089217, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Composer))", "score": -0.447103258337986, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Milliseconds))", "score": -0.452920680898529, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.2593308943715474, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.2634145598950272, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.30689173860806696, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.32666770187986105, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.33279589553155586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Invoice.BillingCity))", "score": -0.3358568081762715, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.3383056255160835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.34348133460889463, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.3499359344579239, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Invoice.BillingCity))", "score": -0.35516506332237335, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.3572489605035071, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Invoice.BillingCity))", "score": -0.36153140551150087, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.37105982522317155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.3738258207448137, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the invoice billing cities that have at least one invoice for a track with a unit price less than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.37768993103245, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Invoice.Total)", "score": -0.1745665670118164, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.UnitPrice)", "score": -0.1953702318712444, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Green Day),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.23116769994287328, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28390288893305543, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28404565866077985, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Green Day),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2914951658186318, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Invoice.InvoiceId),Invoice.Total)", "score": -0.29498031963502835, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3047065537924834, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.3097187897395271, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.3157839844944564, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Invoice.Total)", "score": -0.3183020299003864, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32874096636170874, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33062604140448, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Invoice.Total)", "score": -0.33148765950155995, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.ArtistId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.4231697069648037, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09896709058345814, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.12855962683001104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.189740290442123, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.21769843957196017, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22250890852450586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23257583553364278, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25651557579626083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.26454607908146544, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.27280339693103306, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.275180622508073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2796195109640006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2827084241473351, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2878258852099299, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.29201797043770533, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31999113687413927, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.18131397806056662, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19312005850426578, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.20489095318948883, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25686383619155767, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31329952485526336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3188964200210377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.323558428485269, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.33643834851062326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.33854613178446197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.34949000614413, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3542460823861175, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.36942183612120444, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4046014897035677, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), MediaType.Name),Playlist.Name))", "score": -0.4073595714292034, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.42207476721335097, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.04826760992683916, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Bytes)", "score": -0.602535330609882, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Genre.Name,=,None), Track.TrackId),Track.Bytes)", "score": -0.6320125515052929, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Track.Bytes),Track.Bytes))", "score": -0.6509582572925865, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.6761890596895677, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,Track.GenreId), Track.TrackId),Track.Bytes)", "score": -0.6902999680104758, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "done(extractValues(distinct(getData(Track), Track.Bytes),Track.Bytes))", "score": -0.6968786053529474, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.7024029496644908, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.7054631458655696, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.7113141539228032, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.7193827786468406, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),Track.Bytes)", "score": -0.7195740445455735, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Track.Bytes))", "score": -0.7236075126875221, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Customer.LastName,=,None),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.GenreId), Track.TrackId),Track.Bytes)", "score": -0.7334936773268446, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all different tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Customer.Email,=,None), Track.TrackId),Track.Bytes)", "score": -0.7368161113748412, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.20991165221512606, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2766605047259923, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2784319267350108, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2806458549052842, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2847690949677874, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.3249668836582609, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34739470741615047, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.349166129425169, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35151794747865367, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35328936948767226, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.35669776258974284, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.39171573616912714, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.39348715817814567, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39570108634841905, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,182883),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.39611917947175196, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1365458490849356, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.19398842315508116, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.19471221290673002, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2392186724994836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2402578459324551, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2487083944410436, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2861701690721113, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.28921924592424386, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2903423396387187, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.2978658608806644, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.318559761716611, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3264708961683518, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34047319061314096, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3480593880973905, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.State))", "score": -0.3555074192607654, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))", "score": -0.10681212118288386, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Bytes))", "score": -0.11994791945835459, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,416365), Track.Name),Track.Name))", "score": -0.4704253066556703, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,416365), Track.Name),Track.Bytes))", "score": -0.483561104931141, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,416365), Track.Name),Track.Name))", "score": -0.5141206670778047, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,416365), Track.Name),Track.Bytes))", "score": -0.5272564653532754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,416365),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Bytes))", "score": -0.553255703265389, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,416365), Track.Name),Track.Name))", "score": -0.5720235694425355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,416365), Track.Name),Track.Bytes))", "score": -0.5851593677180063, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,416365), Track.Name),Track.Name))", "score": -0.5870609379599045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,416365), Track.Name),Track.Bytes))", "score": -0.6001967362353753, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,416365),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,InvoiceLine.TrackId), Track.Name),Track.Bytes))", "score": -0.6057799083017589, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,416365),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Bytes))", "score": -0.6168663224715375, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,416365),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Album.AlbumId), Track.Name),Track.Bytes))", "score": -0.6227663143431283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks shorter than 416365 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Milliseconds))", "score": -0.6270434351863514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,416365), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.07532177578398974, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.1536327425564979, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.17422838649328756, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.20310195124000058, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.22787451321823052, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27512284178105734, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.29416140242321887, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2951398339060643, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3088740080868201, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30951682368730216, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3171621360799252, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.32144663848761085, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3314544060960172, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3324214781473045, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average size of tracks in the playlist Grunge?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.33266607977499785, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17443123831281418, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2195879817942575, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Track.Bytes,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.22444640406930805, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.22681832883329403, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2411345715310803, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Track.Bytes,<,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2577240648928799, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26289153325070436, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2759657670984824, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes,!=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28643118673258205, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.296864755002292, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30015222304559386, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.3082609655988802, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,<,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3092434187848869, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.3363650593496745, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.35691420789556527, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.2041691531687772, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Name))", "score": -0.20649692240839626, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.22425994228744628, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Name))", "score": -0.231027147692793, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.2744703224798523, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Name))", "score": -0.281237527885199, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28199358280277287, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.2860493243934054, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Bytes))", "score": -0.3086776795312408, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Bytes))", "score": -0.3110054487708599, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Bytes))", "score": -0.33392849173353834, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Bytes))", "score": -0.34069569713888503, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.3422769642390277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.3428477492369896, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.3489125590907089, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.12094416124008502, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.UnitPrice),Artist.Name))", "score": -0.17110177388187103, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2352049400763288, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),Track.UnitPrice),Artist.Name))", "score": -0.26050514765046445, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2732879363124643, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,>,9010917),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.3108893402581441, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3165197514041542, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917), Artist.Name),Artist.Name))", "score": -0.3363084149475256, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(filter(merge(filter(getData(Track),Track.Bytes,>,9010917),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),Track.UnitPrice),Artist.Name))", "score": -0.34975083853486477, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35619149224967855, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,>,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3659285918682052, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.38622799498617866, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99),Track.UnitPrice),Artist.Name))", "score": -0.3868419886506168, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3898763298254844, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,>,9010917),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.3920947551787151, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.08740446596823247, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1762952996194832, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2219664768544384, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,7876564), Playlist.Name),Playlist.Name))", "score": -0.23353566238997173, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25610440917967775, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2682809935942589, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,7876564), Playlist.Name),Playlist.Name))", "score": -0.28236185587469925, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,1.99), Playlist.Name),Playlist.Name))", "score": -0.30832925122943416, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3085945786590607, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31085731050568916, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.32913825587500395, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,7876564),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3334399434289002, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33868381387278335, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.State))", "score": -0.348075417373877, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks that have a unit price lower than 1.99 and more than 7876564 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,7876564), Playlist.Name),Playlist.Name))", "score": -0.3571554729563152, "correct_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),Track.Bytes,>,7876564),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.2812702143912935, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.29319013915108477, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.2942377664171319, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.29995298581014274, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.30458364289320206, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3291767374015254, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33571030651723627, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.355795549656285, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3616117503520608, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Employee.BirthDate))", "score": -0.36834007372622685, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Employee.BirthDate))", "score": -0.3683808833112325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3699432166509904, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.3706401254126004, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3803886441646083, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file),Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.385726013839088, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.1807854033508227, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22884916123072865, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.25554360991301295, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27564830161396603, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29586555052051394, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.31284584624694867, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33407254978318296, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.3505918327676537, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.3656557475486802, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.36747711430269525, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3707191149806376, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),filter(getData(Track),Track.UnitPrice,!=,0.99),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3730232315505231, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.3800439636182589, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.4078940768993796, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.42477937076910743, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.GenreId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3213038525779632, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3454184492427978, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.GenreId,Genre.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3725157549109044, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3748407615066787, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(MediaType),Track.GenreId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38333758994130984, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.GenreId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3861450655521553, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.GenreId,MediaType.MediaTypeId), Track.Milliseconds),MediaType.Name))", "score": -0.3881448740651702, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3893649306670247, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.GenreId,Album.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.39876377759342363, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.40672804378384175, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4278909672918741, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.43720771178494294, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4493389869438278, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.45837076457978104, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(MediaType),Track.GenreId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.46289949026596444, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.03281063047916177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43360390272641164, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.45951313918053643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.4665356373575378, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,69 Salem Street),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48320119237597714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,>=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4967038467296696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.5019496484325139, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5178669704569195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,>=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5226130831837944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.5278588848866386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.530686881364447, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5360166525629211, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5437761637171624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5532899794666254, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5565961765179497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.21676805153128953, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.InvoiceDate,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2201322407636553, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24460126472273358, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.2733266230619868, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3326402795976063, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3410355124055856, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3414148663927755, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3438268481965093, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3449705335851083, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.34826033574222626, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.35260143499167856, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3537450494980099, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.35615707338809016, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3579389509372928, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.36074629707579614, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.22160249270914653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.23215571139477045, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2712797946568913, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.2764577451921317, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),MediaType.Name),MediaType.Name))", "score": -0.277305690556668, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.28233991017340754, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2861134405989379, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.28701874184789883, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),MediaType.Name),MediaType.Name))", "score": -0.2922236796895493, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.2928830703522969, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.295064721650104, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.29923881587657164, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.3118342153158405, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.31323770329063455, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),MediaType.Name),MediaType.Name))", "score": -0.31387942858829504, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11759620543596358, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.14721072590279705, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.15817996464848144, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1657665286647375, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16622385334837184, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20106954735584737, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.22586615085406217, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2442317727553373, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28115967887552357, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30685038669012094, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.312542992860065, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3132591964314408, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3190120655033915, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3339077268496334, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3585735684914551, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Employee.Fax))", "score": -0.26318596787132265, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.Fax),Employee.Fax))", "score": -0.2883846659151459, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.State),Employee.Fax))", "score": -0.4139082927194977, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Employee.State))", "score": -0.47705076373495103, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.Fax),Employee.State))", "score": -0.5022494617787743, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,None), Customer.Fax),Employee.Fax))", "score": -0.5269409336087847, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Customer.Fax))", "score": -0.5289471570340538, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.State),Employee.Fax))", "score": -0.5374771255937958, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,None), Employee.Fax),Employee.Fax))", "score": -0.5521396316526079, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.Fax),Customer.Fax))", "score": -0.5541458550778771, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.HireDate),Employee.Fax))", "score": -0.5628278154817963, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.BirthDate),Employee.Fax))", "score": -0.5909583467928314, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Employee.BirthDate))", "score": -0.5921872679082298, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Employee.Fax),Employee.BirthDate))", "score": -0.6173859659520531, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Employee.FirstName))", "score": -0.6274502102223778, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))", "score": -0.07118446307140402, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.BirthDate),Employee.Fax))", "score": -0.32668871732312255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.City),Employee.Fax))", "score": -0.4004011258657556, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.City))", "score": -0.4503769885923248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.BirthDate))", "score": -0.4505246292974334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Email),Employee.Fax))", "score": -0.4962355598981958, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.FirstName),Employee.Fax))", "score": -0.5314388975675683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,General Manager), Employee.Fax),Employee.Fax))", "score": -0.5528897812764626, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,General Manager), Employee.Fax),Employee.Fax))", "score": -0.5690693130891304, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Country))", "score": -0.5711805831815582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Address))", "score": -0.5727191578771453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.FirstName))", "score": -0.5757905852224212, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Customer.Fax),Employee.Fax))", "score": -0.6016139790590387, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Country),Employee.Fax))", "score": -0.606354217248736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees who do not have the title General Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Address),Employee.Fax))", "score": -0.6360964581544977, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,General Manager), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.Title))", "score": -0.16153452253274736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.BirthDate))", "score": -0.33640633231334505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.BirthDate),Employee.Title))", "score": -0.33860967016153154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.Title))", "score": -0.36107108822398004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.Country))", "score": -0.4190526426427823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,Jane), Employee.Title),Employee.Title))", "score": -0.42343398263983545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.BirthDate),Employee.BirthDate))", "score": -0.5134814799421292, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Jane), Employee.Title),Employee.Title))", "score": -0.5157026880078774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Email),Employee.Title))", "score": -0.5208804205649358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.Email))", "score": -0.5276999295347196, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.BirthDate))", "score": -0.5359428980045777, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.BirthDate),Employee.Title))", "score": -0.5381462358527642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.City))", "score": -0.5418397606008512, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Country),Employee.Title))", "score": -0.5491436020129186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Jane), Employee.Title),Employee.Address))", "score": -0.5505329788320523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
