{"index": 0, "beams": [{"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ben Harper),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.10795438766968368, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.16398822042882838, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.17341284267955015, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.18385602741306314, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ben Harper),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19975449079374435, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.21298151917851763, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.22031246942649557, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2284752818927458, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23284932616275236, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ben Harper), Genre.Name),Genre.Name))", "score": -0.242762708127399, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2435864803801578, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24871491580471433, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Ben Harper),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2521609562661421, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ben Harper),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2703259443058309, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by tracks in albums that haven't been made by the artist Ben Harper?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))", "score": -0.29033557583779357, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Ben Harper), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12022962573208536, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1645172688467717, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20011514483727488, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20586946512250326, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23795430016799146, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2703391307859585, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Genre),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27487603247877745, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27587604002659327, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2764211445231112, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.32287636689905835, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32995641179866275, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33623853973147433, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33678547593144303, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.339685120396307, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Genre),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34831306379999716, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.Address),Customer.Address))", "score": -0.05794042483375961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Oslo), Customer.Address),Customer.Address))", "score": -0.3002178011875003, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Oslo), Customer.Address),Customer.Address))", "score": -0.39955382928656036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Oslo), Customer.Address),Customer.Address))", "score": -0.4012857055704444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Oslo), Customer.Address),Customer.Address))", "score": -0.4111830531101077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.Address),Customer.City))", "score": -0.5632555768306702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.State),Customer.Address))", "score": -0.5674302880133837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,<=,Oslo), Customer.Address),Customer.Address))", "score": -0.5692989504377692, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Oslo), Customer.Address),Customer.Address))", "score": -0.5815349458198398, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.Address),Customer.State))", "score": -0.5848560616786926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Oslo), Customer.Address),Customer.Address))", "score": -0.6435630819241851, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.Address),Customer.Company))", "score": -0.6855443999584168, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.Address),Customer.Email))", "score": -0.6961195752437561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Oslo), Customer.City),Customer.Address))", "score": -0.6962010566558092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What is the address of the customer from Oslo?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Oslo), Customer.Address),Customer.Address))", "score": -0.7103277085761874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Oslo), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.16880101600929978, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2057545756158096, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.21511204466936396, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2213572203382014, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.23813755410701673, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.24034780503163344, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.26260676896914303, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.271561247679442, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.27913093507492187, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2794571536052227, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.28818117314211744, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.29305260104853625, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.306568953607288, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.33745988687575185, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.34584579782125846, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.06363937685182464, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.23220834189942252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.38949204569598805, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3915048694043435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4774577964684809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4980802436512403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5017666626526989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5256474959855958, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5469818203248681, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5550828134842881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5571561525882158, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5580610107435859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5782510011862187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.59728474617798, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.BillingState), Invoice.BillingState),Invoice.BillingState))", "score": -0.5977935568157681, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Invoice.BillingAddress),Track.Name))", "score": -0.3983804506292472, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Invoice.BillingAddress),Genre.Name))", "score": -0.40586882057095863, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Invoice.BillingAddress),Track.Name))", "score": -0.44163306774999, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Invoice.BillingAddress),Genre.Name))", "score": -0.44912143769170143, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Track.Name),Track.Name))", "score": -0.45409040870572426, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Genre.Name),Track.Name))", "score": -0.4591376108160148, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Track.Name),Genre.Name))", "score": -0.4615787786474357, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Genre.Name),Genre.Name))", "score": -0.4666259807577262, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Track.Name),Track.Name))", "score": -0.49734302582646706, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Genre.Name),Track.Name))", "score": -0.5023902279367576, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Track.Name),Genre.Name))", "score": -0.5048313957681785, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,174654), Genre.Name),Genre.Name))", "score": -0.509878597878469, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,174654), Invoice.BillingAddress),Track.Name))", "score": -0.522759474538816, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,174654), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.5253321451177726, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses to which tracks longer than 174654 milliseconds are sold to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,174654), Invoice.BillingAddress),Genre.Name))", "score": -0.5302478444805274, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,174654),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.02382159229091485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Company),Customer.Country))", "score": -0.4874800489815243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.4959890641803213, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5610697068805166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.FirstName))", "score": -0.566661349923379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Invoice.BillingCountry),Customer.Country))", "score": -0.6223001228245266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Employee.Country),Customer.Country))", "score": -0.6373323546322354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.State),Customer.Country))", "score": -0.6387313352497586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.FirstName),Customer.Country))", "score": -0.6537263737591275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.6565973836877674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.State))", "score": -0.6573742548534938, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Invoice.BillingState))", "score": -0.6806986848423549, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.7056894697780081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Company))", "score": -0.7435848633358546, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Address),Customer.Country))", "score": -0.745835457888461, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.1649978699477397, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.19328070868292793, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.25024927181791196, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Genre.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2592671381101633, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26113657326613315, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.27805656196127915, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2970940981841849, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Album),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.30320567150699435, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.31674574736142297, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34844276294328413, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.35138451449294, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),Album.Title,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.3738632121695815, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,AAC audio file),Artist.ArtistId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.39425278227601324, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,AAC audio file),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.4057939520902966, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "What's the name of the album with the smallest aac audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file),Artist.ArtistId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.4264140542859702, "correct_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.09469444404021488, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.2893279335148691, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.3061023271329759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.Country),Employee.State))", "score": -0.4360261792935489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.45018448186237947, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.State),Employee.Country))", "score": -0.478620232144749, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.5007358166076301, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.5219061962015985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.537229708457744, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.State),Invoice.BillingState))", "score": -0.5467045913137554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.5826969734080194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.Country),Employee.State))", "score": -0.6306596687682031, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.Address),Employee.State))", "score": -0.6416167850293277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.Country),Employee.State))", "score": -0.64743406238631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.6507444261260389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.056676861491723685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.FirstName))", "score": -0.42205225735597196, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Artist.ArtistId))", "score": -0.424364679154678, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.FirstName),Employee.LastName))", "score": -0.46022332705251756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.462085828778072, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Customer.LastName),Employee.LastName))", "score": -0.4979378978132445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5082407450645405, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.PostalCode),Employee.LastName))", "score": -0.5520843068479735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5756125307052571, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.Title))", "score": -0.5853200188248593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.PostalCode))", "score": -0.5910200110047299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Customer.LastName))", "score": -0.5998623600571591, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.6187826251953084, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.6327186679809529, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Title),Employee.LastName))", "score": -0.6390785971998412, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.34134800518553005, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.AlbumId,Album.AlbumId),Track.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.3425720994722569, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.37082684949054273, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.37489473497103615, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.AlbumId,Album.AlbumId),Track.Milliseconds,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.40342039849583233, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.40758324366519233, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.40785567523077915, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.4082115030755016, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.40885986317773365, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.41513213089842266, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4205114851052878, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.42084033017096567, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.4301480428838793, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.4307963963408988, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.4399917683024413, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3339558028380509, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,202004),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3423047206090513, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,202004),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35010832708421874, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,202004),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3555649155419768, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,202004),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3633685220171442, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,=,202004), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36344008552872015, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3708055317108621, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3785047227300358, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37922355645834344, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3891761478691623, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4016088869017874, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,202004),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4026515322690874, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,202004), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40419286890912626, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,=,202004), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4079890054207051, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases of tracks that cost 1.99 and are longer than 202004 milliseconds?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,=,202004), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4087078391490127, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,202004),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1505369470568324, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18436276260688209, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.27168979065760257, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,10317185),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2721095110330192, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.27799541841275294, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2787305317453719, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.280363606662063, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28592275671949735, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.29703499133869865, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.30091290039514135, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,10317185),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3038472368712387, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.3092380980635345, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32722259335878995, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.33473871144582834, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,10317185), Playlist.Name),Playlist.Name))", "score": -0.3382629746361951, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.16908415856021877, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.18123583666997317, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.21110684348016423, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.21405537263151878, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,+1 (403) 262-3322), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.26054883811268126, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.26284252763843335, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.2662122724164023, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.271379685873302, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,!=,+1 (403) 262-3322),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.27456196211734235, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,+1 (403) 262-3322),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2882675321175767, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.2886572561922068, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2937994493607746, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.311736981663124, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.3183345645461167, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.32698176694111847, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.City))", "score": -0.22837058868465354, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Company),Customer.City))", "score": -0.22847860440027493, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.City))", "score": -0.23393101019276394, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.City))", "score": -0.3159073404446222, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.Company))", "score": -0.3280402717011192, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Company),Customer.Company))", "score": -0.3281482874167406, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Company))", "score": -0.33360069320922964, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.Address))", "score": -0.33777590686199316, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Company),Customer.Address))", "score": -0.33788392257761457, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Company),Customer.City))", "score": -0.33841728041900077, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))", "score": -0.3433363283701036, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.City))", "score": -0.35626959088724547, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.City))", "score": -0.3649544030753599, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.City),Customer.City))", "score": -0.36893897886926774, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Country),Customer.City))", "score": -0.37035626780765946, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.1638861945393728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.LastName))", "score": -0.31884807111055125, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.LastName),Employee.Title))", "score": -0.35631835223466624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.FirstName),Employee.Title))", "score": -0.44449937106401194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.4489431469264673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.FirstName))", "score": -0.4602928137901472, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.48741675303608645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Address),Employee.Title))", "score": -0.4946148371818708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.5074428407970117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.LastName),Employee.LastName))", "score": -0.5112802288058447, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.Title))", "score": -0.5656810975197004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Phone))", "score": -0.5686042881134199, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Edmonton), Employee.Title),Employee.Title))", "score": -0.5696410624805139, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Fax))", "score": -0.584624794733827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}, {"orig_question": "What titles do employees from Edmonton have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.FirstName),Employee.LastName))", "score": -0.5994612476351904, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),InvoiceLine.Quantity))", "score": -0.17739077461344135, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Track.Composer),InvoiceLine.Quantity))", "score": -0.3114538062473086, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3295740073858685, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.33079152461555855, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.33348579079421714, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.3366178980164367, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),InvoiceLine.InvoiceLineId))", "score": -0.33694024236434766, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.3471835099194439, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36583079533120766, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock), Track.Composer),InvoiceLine.Quantity))", "score": -0.3739497885377001, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.38686847236775024, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),InvoiceLine.Quantity))", "score": -0.387346396057408, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3921440229892946, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.39681405986501683, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.39737078494344946, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.017504530786511055, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5331842986297989, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.7124902244675266, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.7926655782745482, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.8201189368337509, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.8210532489291751, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Album.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.8430988854137973, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Album.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9232742392208189, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9319490606086842, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9817955505092492, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.989580335751372, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -1.0170614707676577, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1302074769442434, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1463901134340204, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.1761654693619736, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03550015957079433, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.4960716534420763, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Genre), Album.Title),Album.Title))", "score": -0.5858369326922838, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.6012176232575622, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6613547847156572, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7476616960302636, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(MediaType),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7541246798173233, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(MediaType), Album.Title),Album.Title))", "score": -0.7545213718543993, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Genre.Name),Album.Title))", "score": -0.915930852719052, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.9449275751875708, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.9985806599000864, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Customer.LastName),Album.Title))", "score": -1.0353107160537294, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(null), Album.Title),Album.Title))", "score": -1.0581742670278447, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.Composer),Album.Title))", "score": -1.1160619171076898, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.1210009639251848, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.25988203700906076, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.27930399099308834, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2861396642388472, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.3009434750084739, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.3055616182228747, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.30801948461908457, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31607631199806535, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Music Videos), Genre.Name),Track.Name))", "score": -0.3226426617780351, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3303400493523383, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.3343595133704903, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.34435362958064836, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.3454728863419298, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.GenreId), Track.Name),Genre.Name))", "score": -0.35306890535336233, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Music Videos), Genre.Name),Track.Milliseconds))", "score": -0.3539605354890433, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks from the Music playlist that are not assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,!=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.3761950195680439, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.09851412802463752, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1770153186466984, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23067253538489343, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2328662261699474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2610886001146742, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2676622819833354, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2808685384446998, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2973151139746338, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29740053623684415, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.32415278069724307, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3350236554351408, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.33671944596794884, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.338518986058574, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.3490777324154139, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.3497581884791423, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.17093732159645392, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17568878598557325, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17657851233959054, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Employee.Title,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.21861627703345213, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Artist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.22210073257856355, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23576086169000915, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.2494581807759651, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.25602977496036267, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(Album),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2667163476976094, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27607439974757547, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2858063314339477, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2861238171727704, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29628359653844777, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.3065624710953086, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Genre.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31204207795472083, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.1984369390054073, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,6254796),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2433198679621005, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.25676366740755596, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.27895436534058876, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2854188079024072, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.29904260540238325, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,6254796),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.30176378235879514, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Sex Machine),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.30230370530694967, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Sex Machine),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.3083419178079385, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3141171669277, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.3142151119693823, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Sex Machine),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.329794359302089, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Sex Machine),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.335832580245902, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34498132623587274, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,<,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.34607350075898585, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.08402259337083084, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.13462840091660017, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.19904660465619234, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.2249262756547531, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2429701470082639, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25676369009907557, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), Track.Name),Track.Name))", "score": -0.2718649326656473, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.32700671505351403, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Album.Title))", "score": -0.3437634809236872, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.34680551444313407, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.34878110042406313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3519194221368315, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.37677082658021466, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.3846137170153689, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.Name),Album.Title))", "score": -0.3865721529236555, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.3521407473862662, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.4105760385226173, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(Playlist),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.41921267672063994, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4288262924878891, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.43490593103670755, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.43824604746817514, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(Track),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4474701762500193, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.45342480561331394, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.4576013151577027, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.45790978924885617, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.45933481015897865, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,Invoice.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.4957740787564864, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Track.Milliseconds),Track.Bytes))", "score": -0.504040757603375, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,Invoice.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5181151667861682, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Bytes),Track.Milliseconds))", "score": -0.5194621041429454, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Employee.State))", "score": -0.25934945195785986, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))", "score": -0.27471600621811376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Fort Worth), Customer.State),Employee.State))", "score": -0.3914192110287331, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Fort Worth), Customer.State),Customer.State))", "score": -0.406785765288987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Fort Worth), Customer.State),Employee.State))", "score": -0.421218195556321, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Fort Worth), Customer.State),Customer.State))", "score": -0.4365847498165749, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4702589489506863, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Fort Worth), Customer.State),Employee.State))", "score": -0.48055175840727316, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Employee.State),Customer.State))", "score": -0.4856255032109402, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Fort Worth), Customer.State),Employee.State))", "score": -0.4868431478726052, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Fort Worth), Customer.State),Customer.State))", "score": -0.49591831266752706, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Fort Worth), Customer.State),Customer.State))", "score": -0.5022097021328591, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Customer.State),Employee.State))", "score": -0.5222224384533547, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Customer.State),Customer.State))", "score": -0.5375889927136086, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Fort Worth), Customer.State),Employee.State))", "score": -0.5441333442913674, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.27028033480019076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.3007825423774193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.37121293291420443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.401715140491433, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Track.Milliseconds))", "score": -0.4064707566794823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.42281202569574816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.42358133539528353, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.44634936347574694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.4533142332729767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.4540835429725121, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.4768515710529755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1970-05-29 00:00:00), Customer.Email),Track.Milliseconds))", "score": -0.507403354793496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.5237446238097618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.5398876403269242, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.BirthDate,<=,1970-05-29 00:00:00), Customer.Email),Customer.Email))", "score": -0.5472819615897606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.3268940785189057, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Artist.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.34582542088736534, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.34771709140538426, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.3638633826708391, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.36664843377384393, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.38590053791996487, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),Album.Title))", "score": -0.3991148869153901, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.4015468132171851, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.40524083553165485, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.4158966890761052, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Artist.Name,=,Gustav Mahler), MediaType.Name),Album.Title))", "score": -0.41804622928384977, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),Album.Title))", "score": -0.4199378998018687, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.4223698261036637, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.42294469015462194, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "In how many different types do tracks with Gustav Mahler occure?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,InvoiceLine.InvoiceId),Artist.Name,=,Gustav Mahler), MediaType.Name),MediaType.Name))", "score": -0.4348280314445649, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.11948635653082806, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.12465941720709443, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.1707215351901979, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.197523314085917, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29704352481538066, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), MediaType.Name),Playlist.Name))", "score": -0.29833783273223374, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3012427137002646, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),MediaType.Name))", "score": -0.30943976956486097, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33308935969793174, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3447036799365051, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.3654951502858025, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.37199753503712685, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197), Playlist.Name),MediaType.Name))", "score": -0.372202253975192, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3731030994741828, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197), MediaType.Name),Playlist.Name))", "score": -0.38333005065262327, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Track.TrackId),Playlist.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.426893601691469, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.4554688265554661, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.4751124678296037, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.47750788233539326, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.4984387280543531, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.50113041128625, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.5060831825117997, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,PlaylistTrack.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5155188736796243, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.518209174707302, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5209008579391989, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5230701388584852, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Track),Track.TrackId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5257618220903821, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.531748188989019, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5344399165223331, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),merge(getData(Track),getData(Playlist),Track.TrackId,PlaylistTrack.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.5352893696179, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.1024815084583679, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.1659125404603401, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.1886014959383744, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.34266850990675124, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3480763487460103, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.44397710405194635, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.45205796166344314, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.46867544403774947, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.48739191567209916, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4911732631443592, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.5098897347787089, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.5148002410837039, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5343980557043054, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.5387914453835814, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.5467358590599858, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.3768070267098924, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.38835558340724674, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.3944049780147907, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3986420728396663, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.40196421090931345, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),InvoiceLine.Quantity))", "score": -0.40523698147689796, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.4222658089901743, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.4237992570390873, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),InvoiceLine.Quantity))", "score": -0.43039416567631894, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.43113182807075123, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.43280075786050465, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.4367890064110515, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.43701369653034383, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingCity))", "score": -0.45153689395122104, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingCity),MediaType.Name))", "score": -0.4529668742005251, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12495412078351364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19220353808850632, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24772919860333786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3250262751862465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4368547215744911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5258982876916364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5409732448472407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5431332602784096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5680331742078124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,18.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.571040499295738, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5750609482255636, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5963697448059975, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,18.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5995848502251462, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6281354441925942, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6352825915128051, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.2621527796654182, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Alternative & Punk), Album.Title),Album.Title))", "score": -0.2807767165383896, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Album.Title))", "score": -0.28166429339462673, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.282180635273353, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,!=,Alternative & Punk), Album.Title),Album.Title))", "score": -0.3260898285999734, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Alternative & Punk), Track.Milliseconds),Album.Title))", "score": -0.33044214056664567, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk), Album.Title),Album.Title))", "score": -0.3310831299448667, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.33697432934439936, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Alternative & Punk), MediaType.Name),Album.Title))", "score": -0.34268433219687094, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Album.Title))", "score": -0.35648584307360787, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3570021849523342, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.36467483047687554, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.36539121775885974, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Alternative & Punk), Track.Name),Album.Title))", "score": -0.36941609091499567, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3739742352578749, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.12910635043863294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25163657610301016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3006427923310184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.39396984522227285, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4043684566486263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42317301799539564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4842555562127018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5165000708866501, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.52167077195827, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.528293322967329, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.5642026795167112, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5655062871146583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5759048985410118, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5800177587288999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.606785781877079, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.18132848084252962, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.21722146567214112, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2215575700850812, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.PostalCode,=,94040-111),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.22658405755568564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2293290063966988, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,94040-111),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24846448768088641, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.PostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2625057599329837, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.PostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.27050951471657914, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.PostalCode,=,94040-111),merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.28337411107637206, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2843120967608578, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2852192116921044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2930831649109235, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2942249457616044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.294723000704822, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3080447549682581, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.100105826695646, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.19923153401274474, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.20960785496401357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2169395371430204, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2243313944262809, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2303264447866856, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.23480916198282023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.2385136388521324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24006713084611095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.28071432714381633, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.28245039812226574, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.2874571927976351, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.3000059056459709, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.30851422479058366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.35831056167113934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13378997677837826, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13675288480895673, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.15668516439816235, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15803883401323385, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))", "score": -0.18021778151880585, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20097550819692522, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20247494037199537, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20818402396233013, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))", "score": -0.2220615930198268, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23889580830363108, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.25499138214920114, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))", "score": -0.2627258827036469, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))", "score": -0.27866516985572, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))", "score": -0.29638870784075083, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there of tracks that were sold to the address Klanova 9/506?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Klanova 9/506),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3347113139903319, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Klanova 9/506), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.04074870115437079, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Customer.Phone),Employee.Phone))", "score": -0.332819563060184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Customer.Phone))", "score": -0.3642415774083929, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.4012937524385052, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.City),Employee.Phone))", "score": -0.6098718761495547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Fax))", "score": -0.6185329330182867, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Fax),Employee.Phone))", "score": -0.6469675420812564, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Customer.Phone),Customer.Phone))", "score": -0.6563124393142061, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Artist.ArtistId))", "score": -0.6840680611348944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Customer.Phone),Employee.Phone))", "score": -0.6933646143443184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.FirstName),Employee.Phone))", "score": -0.7111810564092593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7127830960816937, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7185416796273785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Employee.Phone),Customer.Phone))", "score": -0.7247866286925273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7483537175721722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.13927608027187544, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.14283597185756572, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.16592553233432375, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.17946592514412937, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1827465150365852, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19557867689651517, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19632548284493243, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.212118291247585, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21486446091331923, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21522321426925978, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2467899256161486, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,AC/DC),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2498948445521919, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26626926014530244, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2752775033495787, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2896608860166578, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Genre.Name),Album.Title))", "score": -0.16851137216144707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Genre.Name),Genre.Name))", "score": -0.19885823513322975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Genre.Name),Album.Title))", "score": -0.333593707633554, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Genre.Name),Track.Name))", "score": -0.346562255275785, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Track.Name),Album.Title))", "score": -0.35122666518145707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Genre.Name),Genre.Name))", "score": -0.3639405706053367, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Track.Name),Genre.Name))", "score": -0.38157352815323975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Album.Title),Album.Title))", "score": -0.5021829382603755, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Genre.Name),Track.Name))", "score": -0.5116445907478919, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.516309000653564, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Track.Name),Track.Name))", "score": -0.529277548295795, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Album.Title),Genre.Name))", "score": -0.5325298012321582, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Genre.Name))", "score": -0.5466558636253467, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Genre.Name),Customer.LastName))", "score": -0.6513112374668708, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,235598), Track.Composer),Album.Title))", "score": -0.6597206370061031, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.28466677797084855, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.32256660501601864, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3418090671989694, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.34328623078760945, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3452674619481818, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Jamiroquai),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36053463630382043, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.36869894436096035, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3707197554946783, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Jamiroquai),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3721969040935438, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4072752250792487, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40875238866788877, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.4089988692787676, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.4104760328674077, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.4152338974781321, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.4262614047240588, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.11947931387822634, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2105854243952582, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.27337555751209613, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.28283927278875287, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.34255241441947415, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.35372937293343293, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.36186238793288794, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.364481668029128, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.36638813079037796, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.37088830529105427, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3753156117287296, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.PostalCode))", "score": -0.37872751363867907, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.PostalCode))", "score": -0.3803776705502335, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.40102028972683557, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.44698707046371294, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2030205546804313, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20559457738161974, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.20979072436529975, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24712314899077645, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25010412477590205, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2503687713907354, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2520924174408215, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.25281129774880745, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2586824820111834, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.26981345269069956, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2767592457129605, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27862941117097506, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.28551695998809073, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2882917507133422, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price of the tracks that were in the invoices issued by employees that were born before 1958-12-08 00:00:00?  ", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.29203610130248364, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1958-12-08 00:00:00), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.09566265112789551, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Customer.City))", "score": -0.13178115851314942, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3843172690931169, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.5296348378362664, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.5596790666864027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5607249173496371, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.5678819171106739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.5734895196281916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,162 E Superior Street),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.5745464320789788, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5772243373218784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCity),Customer.City))", "score": -0.5795781120180082, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5839819929737593, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,162 E Superior Street),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.5946135143725213, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.5979261413922266, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.600961455212498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.20298547376569331, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.2852148645060879, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.3137257777589184, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.36052339602883876, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.42821165253099025, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,3.98), Employee.FirstName),Employee.Phone))", "score": -0.43350429911788524, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.4376595480825983, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.45070140887673915, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.Total,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.4804018390070938, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,3.98), Employee.FirstName),Employee.Phone))", "score": -0.5157336898582798, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,3.98), Employee.LastName),Employee.FirstName))", "score": -0.5204128556388241, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,3.98), Employee.FirstName),Employee.LastName))", "score": -0.5304575719374043, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,3.98), Employee.FirstName),Employee.Title))", "score": -0.5426248468893391, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3.98), Employee.FirstName),Employee.Phone))", "score": -0.5442446031111103, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of employees that attended invoices equal to 3.98", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,3.98), Employee.FirstName),Employee.FirstName))", "score": -0.5698978536265713, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,3.98),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.12471069680546672, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.13951537232016237, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15390120404710625, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Genre.Name),Genre.Name))", "score": -0.1744681496957414, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1882460043397689, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Genre.Name),Genre.Name))", "score": -0.20404353786260948, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Genre.Name),Genre.Name))", "score": -0.2089639280655615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Heavy Metal Classic), Genre.Name),Genre.Name))", "score": -0.2349397392877257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24577187248925103, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24827774193775826, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27545078667093714, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,Heavy Metal Classic),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28261552876910034, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2954916478525103, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30345433113522663, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres with a playlist named Heavy Metal Classic?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30520901175130366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.09770341245894087, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.20849151937727584, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Composer),Album.Title))", "score": -0.24240453569655074, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Album.Title))", "score": -0.3531926426148857, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Composer),InvoiceLine.Quantity))", "score": -0.48711265651945723, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.5345468225932564, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.5606983251637931, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),Track.AlbumId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.5637667476482717, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),InvoiceLine.InvoiceId,Album.AlbumId),Track.TrackId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.5861412980612892, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.5892097205457677, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),InvoiceLine.Quantity))", "score": -0.5979007634377922, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.6021971284668327, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,I'm Losing You),merge(getData(Track),getData(Album),Track.AlbumId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.6052655412517236, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Milliseconds),Track.Composer))", "score": -0.6608923438980128, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.6720911863303627, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102), MediaType.Name),MediaType.Name))", "score": -0.14283448225695086, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,84102), MediaType.Name),MediaType.Name))", "score": -0.18486990506019646, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20578869227291688, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2094163267208006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2140998504399292, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102), MediaType.Name),MediaType.Name))", "score": -0.21410720288456292, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21746690818283573, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,84102),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2274145000200102, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,84102), MediaType.Name),MediaType.Name))", "score": -0.2350427451637015, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Composer,=,84102), MediaType.Name),MediaType.Name))", "score": -0.23747564553729458, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,84102), MediaType.Name),MediaType.Name))", "score": -0.24357609806558095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2491140072648495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,84102), MediaType.Name),MediaType.Name))", "score": -0.258523207691433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,84102), MediaType.Name),MediaType.Name))", "score": -0.26662883852328234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any media types that were sold to the postal code 84102?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.29396052749308177, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,84102),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.17679739670165873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.28745889590391016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.31217504591950274, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.36324101912481593, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.3864551519460732, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.39769650187956845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40001154988172083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingCity),Invoice.Total))", "score": -0.4012999639035115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.40164719586404396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.40323331726284506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.BillingCity))", "score": -0.4058607362330804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.4065959921318169, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.41621489105359855, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.41820914150560107, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.45750728452048256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.1922638978689493, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3079216335080201, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3331175788284492, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.337215715319573, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.34485242464194915, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.34621812215312425, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.37096112601232345, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3736731429355321, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3741465064535021, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.37551220396467716, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,None), Album.Title),Album.Title))", "score": -0.38035558045319867, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.38314891328705336, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3891835061547776, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.40025520782387636, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4078919171462525, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.10618308580769316, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16786609106547473, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24514565232075278, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2656238673346462, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.2845949210674175, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.29245415197866853, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.30397767715743235, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.30585782305706144, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3095517018110363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.31183690806868336, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3135822953068311, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32057088418077007, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.32144152621808214, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.33032457088805856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3447747176100916, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18527081446394258, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.19867586388050607, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20181528925858258, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20305638804346948, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2044432370865661, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2054402931851516, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.21119156017416682, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.22544744486812537, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.22617109896645043, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.22716815506503596, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Toronto),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.23112687723433167, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23359365920405387, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2343282670005574, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Toronto),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.23719761976887982, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.25113394742818956, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.04169528490729135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Artist.ArtistId))", "score": -0.3601602700246076, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.397354887117217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.40534581764661864, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.44213613341648245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.4514113196131119, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.4818763157492406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.5185080590260788, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.5281775232841742, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Genre.GenreId))", "score": -0.5305451837075452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.FirstName))", "score": -0.5337022629273633, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.5480641337909185, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.5498789868497552, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Employee.LastName))", "score": -0.5598831263077955, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Artist.ArtistId))", "score": -0.575914927363638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.10082052921109293, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17233130959936027, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),Genre.Name,!=,Drama),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22298757722192536, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.229287025891701, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.25437421327217113, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.2927350850342688, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),Album.Title))", "score": -0.31786642082334227, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3254270269560374, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3314758031407317, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3370716903921767, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,!=,Give Peace a Chance),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), MediaType.Name),MediaType.Name))", "score": -0.3473099901604181, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.36473515009393953, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3673495533797589, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3760532683390897, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Drama), MediaType.Name),MediaType.Name))", "score": -0.3923462571740514, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Album.Title))", "score": -0.22691817729872504, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.2635861858287766, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Album.Title))", "score": -0.31080638477243216, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Edo de Waart & San Francisco Symphony),getData(Track),Album.ArtistId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3122951010243526, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.3173991218335686, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.ArtistId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Album.Title))", "score": -0.32123685222226894, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Edo de Waart & San Francisco Symphony),getData(Artist),Album.ArtistId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32324322167486724, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3256904740579203, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.ArtistId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.332764235551815, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.33616345671915177, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Track.Name))", "score": -0.34040214089943294, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Artist.Name))", "score": -0.34100215929512495, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3432118972404722, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Album.Title))", "score": -0.3644384973947046, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}, {"orig_question": "Whats the name of the biggest track composed by Edo de Waart & San Francisco Symphony?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Edo de Waart & San Francisco Symphony),Track.Milliseconds),Track.Name))", "score": -0.3662324195532208, "correct_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Edo de Waart & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.09869190455364962, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16556762291087332, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18666628974593102, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley), Playlist.Name),Playlist.Name))", "score": -0.20286065849744858, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley), Playlist.Name),Playlist.Name))", "score": -0.2304971530828382, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2517884740060689, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2803340390711945, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Paul Stanley, B. Ezrin, K. Fowley),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3047655727841959, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley), Playlist.Name),Playlist.Name))", "score": -0.30595537958085484, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32555817833685957, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3348263266080942, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Name,=,Paul Stanley, B. Ezrin, K. Fowley),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3444103850321519, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley), Playlist.Name),Playlist.Name))", "score": -0.3526734522192457, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,Paul Stanley, B. Ezrin, K. Fowley),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36086929157000586, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks composed by Paul Stanley, B. Ezrin, K. Fowley?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Paul Stanley, B. Ezrin, K. Fowley), Playlist.Name),Playlist.Name))", "score": -0.3745818444321056, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Paul Stanley, B. Ezrin, K. Fowley),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.15338000213646927, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17153733068589683, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1953520267658806, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20827393743762596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.21619776477005734, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.22179364404697702, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2295697004754088, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2404852551875824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25458070624928814, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2581698198181714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25984350827622055, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26483107915277054, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26581064908118934, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2715417373681831, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2875263475286636, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.16069976941124525, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.16501214109671317, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.18512954728121428, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21218663958321804, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.22620121793304945, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2527196527644291, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2845944796339703, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.3526691723283806, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Genre),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39287014496585654, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.39967629074592276, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.4164030096319226, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.42156116287500756, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.44858887446900325, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Album),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.47103871262959673, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.48190445815372684, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.15425189071669615, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.1714443601783972, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.18693562572948255, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.19807203026217637, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22881477410029064, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.2611816859370073, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.26646937627382594, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.2686547824095815, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2712919369657807, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.3015110565640148, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3019365162162961, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3042801953848406, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.3179009424459295, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31809805594565194, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,T2P 5M5),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.321669828340267, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.021379901661977663, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5652469526182416, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8080821585105931, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.8770098853468117, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9046684054234739, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.0417742230309046, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0548192756874497, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.0944640931277518, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.1508699777092155, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.1696069828042064, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -1.2053781456266808, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.FirstName))", "score": -1.2368358231773313, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.2415412316223517, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.253965205035807, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -1.2692668947030104, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))", "score": -0.029894293164034025, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.Fax),Customer.Fax))", "score": -0.38920206098737253, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.Fax),Customer.Fax))", "score": -0.42503333358945383, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,India), Customer.Fax),Customer.Fax))", "score": -0.48791212110700144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.City))", "score": -0.526711717591752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Album.Title))", "score": -0.5522948655943765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Phone),Customer.Fax))", "score": -0.6345649325467093, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7078621712225868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Phone))", "score": -0.7102832350592507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.City),Customer.Fax))", "score": -0.7305149995900138, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7389320459860755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Employee.Fax))", "score": -0.7428230795721902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<,India), Customer.Fax),Customer.Fax))", "score": -0.7453821636099747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7716059413451148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Employee.Fax),Customer.Fax))", "score": -0.7717727982617362, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.15838810085178293, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1824332176956636, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.18488480811998428, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.191133366140854, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.20318092655872547, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.248701722753002, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2555425731846252, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2820392804528266, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3332959864979871, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33966048612710287, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3581334081379603, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.36448631146064076, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.38463322807133227, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4111299353395337, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4118096626602075, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.15231169790968124, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.16024121833010038, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.16149770218547918, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Album.Title))", "score": -0.1829814795710293, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.2667730707138687, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Album.Title))", "score": -0.28467648366860204, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name,=,Heavy Metal Classic),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3178738831753669, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Customer.Fax))", "score": -0.32233813981688625, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.341213952406207, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Album.Title))", "score": -0.34563767184250144, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3483758069114499, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.3612990643177909, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3953126808529315, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Customer.Fax))", "score": -0.42258205542146937, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.423324394502901, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.019936842307288316, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.5075418096257636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Country),Customer.FirstName))", "score": -0.5125820962002763, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.Phone))", "score": -0.5581321701629349, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.606332395620484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.6095457416249701, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.Country))", "score": -0.6209043249709794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.6217307057522441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.LastName))", "score": -0.6356616005523392, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Phone),Customer.FirstName))", "score": -0.6454542902520188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.6526598615040695, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.6617917161656806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Employee.FirstName))", "score": -0.6828884467704484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.7131474953366705, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.LastName),Customer.FirstName))", "score": -0.7198727754166612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.018467493212483532, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.49218516642849863, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.State))", "score": -0.5043227163578194, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.State),Customer.Country))", "score": -0.5091692678133768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Phone))", "score": -0.6231009451175851, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.FirstName))", "score": -0.6306774107242745, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Address),Customer.Country))", "score": -0.6638490728537363, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.6857587903241438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.7014669984082502, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Phone),Customer.Country))", "score": -0.7102790645758432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Company),Customer.Country))", "score": -0.7272351555029672, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.7347656100491804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.FirstName),Customer.Country))", "score": -0.7560735515753549, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.775004348109178, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.City))", "score": -0.7832285252834481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Track.Composer))", "score": -0.3506249495758311, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Invoice.BillingCity),Track.Composer))", "score": -0.42799617433684034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Employee.City))", "score": -0.441059977652003, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Employee.City),Track.Composer))", "score": -0.4734947987808482, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Employee.Title))", "score": -0.4825326957716243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,New York), Track.Composer),Track.Composer))", "score": -0.5180961274518268, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Invoice.BillingCity),Employee.City))", "score": -0.5184312024130122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Invoice.BillingCity))", "score": -0.5324284889711635, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Invoice.InvoiceDate))", "score": -0.5504738547815577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Employee.Title),Track.Composer))", "score": -0.5536447473778026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Invoice.BillingCity),Employee.Title))", "score": -0.5599039205326335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Employee.City),Employee.City))", "score": -0.5639298268570201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Track.Composer),Artist.Name))", "score": -0.5720517494692103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Invoice.BillingAddress),Track.Composer))", "score": -0.5732370027317302, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,New York), Invoice.InvoiceDate),Track.Composer))", "score": -0.5838979789032237, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Corinne Bailey Rae),merge(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2927985328337346, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Corinne Bailey Rae),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3125525248772053, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)", "score": -0.31357190776469485, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3249466944193874, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)", "score": -0.3310158488337077, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.342363136662893, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Corinne Bailey Rae),merge(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3455110317676643, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Corinne Bailey Rae),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3571137643459425, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Corinne Bailey Rae),merge(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3612301348730396, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)", "score": -0.36236585429897533, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,InvoiceLine.InvoiceId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3626447693794673, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.365341609751212, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38006121502825013, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3809030418608206, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on tracks from Corinne Bailey Rae?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Corinne Bailey Rae),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38275805199471763, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Corinne Bailey Rae), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.1968326792908064, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))", "score": -0.2220004350932303, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.23289786060228526, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))", "score": -0.26443908034788444, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2878004270238058, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.29934126962658586, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Name))", "score": -0.3138809843013513, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.31480805465026623, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3213335515229125, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.UnitPrice))", "score": -0.33176586295651217, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name),Track.Name))", "score": -0.3439048699406709, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Bytes))", "score": -0.3502019154797388, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Album.Title))", "score": -0.3619763239368489, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.UnitPrice))", "score": -0.36783104426799107, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Album.Title))", "score": -0.37426350100808325, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.14695660798448054, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1877525816506835, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,>,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1951924952172015, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,0.99), Artist.Name),Artist.Name))", "score": -0.1992457391499533, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.2010562937407486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.20956596855727094, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2287533097904531, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23766450319484844, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))", "score": -0.242536260113336, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25597256260956264, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.268857898760012, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,0.99), Artist.Name),Artist.Name))", "score": -0.28744044909375044, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<=,0.99), Artist.Name),Artist.Name))", "score": -0.30098235795149614, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3162336717932737, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))", "score": -0.31972678139446215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,0.99), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.04269851558638038, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2852162309063715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4922906346691889, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Customer.Country))", "score": -0.5140649369059247, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5611672392187756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5677074380291742, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5697066970242304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.5697692679314059, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6071496196163935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.6388769032353769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.6516720103172702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.6749083390532178, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.679595012225036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.6810685762745936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.Country),Customer.Country))", "score": -0.7005820547716587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.03613683569801651, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.43235561240089737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Company),Customer.PostalCode))", "score": -0.4433300195969423, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.LastName),Customer.PostalCode))", "score": -0.5145952998436769, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.Company))", "score": -0.5170227045900901, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.Fax))", "score": -0.5179670805819114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.LastName))", "score": -0.5356790478117546, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Fax),Customer.PostalCode))", "score": -0.5669758318699678, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5896650253571352, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6202604471482118, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6249636708535036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.City))", "score": -0.6539195234663566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.Phone))", "score": -0.6669685299284538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6673124729431947, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6679069696701845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.034094357113644946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4764381788658667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.4869477511019914, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.4921474226551656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Bernard),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.4977644728468066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.49827156373794423, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.5029879165263833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.5084745549447229, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5167301170835488, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5330572493731061, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.5334653553546826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.5350754640760428, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),Employee.EmployeeId,Invoice.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.5466550801037127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.5497923883369833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.5505942277237438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,0.99), Album.Title),Album.Title))", "score": -0.3272786019188061, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Track.Milliseconds),Album.Title))", "score": -0.35016861095391505, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35078099371707666, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Track.Composer,!=,0.99),Track.Milliseconds),Album.Title))", "score": -0.36147417410575144, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,0.99), Album.Title),Album.Title))", "score": -0.37020646313249017, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.44684312593635755, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,0.99), Album.Title),Album.Title))", "score": -0.4766536680799618, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Album.Title),Album.Title))", "score": -0.4808241919581633, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,0.99), Album.Title),Album.Title))", "score": -0.49957368055402185, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.5034324804938853, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Track.Milliseconds,!=,0.99),Track.Milliseconds),Album.Title))", "score": -0.5063377200003742, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.5080322908359028, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Track.Name,!=,0.99),Track.Milliseconds),Album.Title))", "score": -0.5287138400908589, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Album.Title),Album.Title))", "score": -0.5539067713361874, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,0.99), Album.Title),Album.Title))", "score": -0.5640824631755095, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11493009397319204, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.18318385044828306, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19646649129139393, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19846677086038392, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2020612933716643, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21354239450079984, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23474123621173856, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24126954294709346, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24463552182673587, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2481518561358473, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2506596933648027, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25487743047044653, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.26096361570602095, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2620508473028143, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26239283615103004, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.0499044805937956, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.21936488898336393, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.LastName),Customer.FirstName))", "score": -0.5069699487821708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.LastName))", "score": -0.5431720111691902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5472008213573645, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Employee.FirstName))", "score": -0.616555700095887, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.627084277587528, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.6336135491901587, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.6741616353565405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,R3L 2B9), Customer.LastName),Customer.FirstName))", "score": -0.6764303571717392, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.7004385218197058, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,R3L 2B9), Customer.FirstName),Customer.LastName))", "score": -0.7126324195587586, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Artist.ArtistId))", "score": -0.7158798668706368, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.7265892252498816, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Employee.FirstName),Customer.FirstName))", "score": -0.7485493323938499, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2158133459411244, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.22654950926639392, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25932953737431985, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.2609418767585825, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2628961923318275, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.27554946136648023, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27605988023057887, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2808144996528379, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28465932855421605, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28498203232393715, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.AlbumId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.2856742668565797, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28780790507108217, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.29722158530835435, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30921500881930797, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(merge(getData(Album),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3122540655995909, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.10149523382385409, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.11329042025027224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.13311772360174184, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.17217849730618282, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.23152592297474398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.2600593119835236, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3407280867313865, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.GenreId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3692290540639049, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3693080161980417, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.38628577256827623, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.390006281934105, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.39619662830204155, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.4078551417307452, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.Name,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4091416263425904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.AlbumId),Album.Title))", "score": -0.42515052136174813, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.24043239292956683, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2574593604300054, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.262384399682825, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27209565206379166, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.27784435043223277, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.29703915338334597, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.304014351859596, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30627485846393054, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3083656666658699, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.31213701864054977, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.31582932876664555, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3443688158025633, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Track.Bytes)", "score": -0.3535037685845798, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.3567418479443013, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.3830454244801014, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.21973059971798836, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.2461677722876187, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),InvoiceLine.InvoiceId,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2781945309831806, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),MediaType.Name,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2800861988864719, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.286723993917691, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.29087958359732535, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2926486101252023, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.3005343709658554, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Address,=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3139406216605382, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.31672844805924466, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.3258135384059498, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3265318911001548, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.32997331629467913, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.3319798173173469, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)", "score": -0.34571953258089844, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.17351819331452134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4133689677219081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.State))", "score": -0.4281107349197555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Country))", "score": -0.43027295301362756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.44799079496116495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.Total)", "score": -0.4583900141387245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Country),Employee.Address))", "score": -0.4682170947889972, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.48643505329891923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Employee.BirthDate,=,Sales Manager), Track.TrackId),Invoice.Total)", "score": -0.5022429411853611, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Sales Manager),getData(Album),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Title,=,Sales Manager), Track.TrackId),Invoice.Total)", "score": -0.5075915613830287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Employee.Fax,=,Sales Manager), Track.TrackId),Invoice.Total)", "score": -0.5096491693049728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Email))", "score": -0.5354965491096664, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Sales Manager),getData(Album),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Title,=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.5396278395698105, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Customer),InvoiceLine.InvoiceId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.SupportRepId),Employee.BirthDate,=,Sales Manager), Track.TrackId),Invoice.Total)", "score": -0.6062488953967591, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.SupportRepId),Employee.BirthDate,=,Sales Manager), Track.TrackId),Invoice.Total)", "score": -0.6080987198416231, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24624175422341774, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2770792956280439, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3095342236921433, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3242985131051016, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)", "score": -0.36744402392595765, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3705896558849687, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37673617601666126, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3915004654296196, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3915228536649892, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)", "score": -0.39828156533058384, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4014271972895949, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40806618858102306, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4140367346150221, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4230195077700482, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.423052500078498, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.24063696921778577, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Milliseconds),MediaType.Name))", "score": -0.24658494115152843, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.25231780429918266, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.Milliseconds),MediaType.Name))", "score": -0.2864834717835872, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),Track.Milliseconds),MediaType.Name))", "score": -0.28659451244129697, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.2985664923552094, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.3009256006569844, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.31059960787670543, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3126064357383813, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Milliseconds),MediaType.Name))", "score": -0.32932332687465476, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Alternative),Track.Milliseconds),MediaType.Name))", "score": -0.3498150872518417, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.35323777275001705, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.Milliseconds),MediaType.Name))", "score": -0.36029011785667836, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.3603238270971156, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Alternative),Track.Milliseconds),MediaType.Name))", "score": -0.3619191683830331, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.15230231582792633, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.17522155228304442, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2136027085513768, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.23084620364172356, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23182937880283006, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2428588644288992, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24397975413211787, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24802520242092738, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.25580621452862456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2562995079640977, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27009231103056675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28279913872699824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.291034770770687, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.30631115065638737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31136539667995583, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.42599656063248403, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.44957305866410024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.45221914726425894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Genre.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.47113107520272024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.47579564529587515, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.LastName,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.49149890619446523, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Genre.Name,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.49470757323433645, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.49735366183449514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.5065666325681377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.LastName,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.5150754042260814, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.5209301598661114, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Take The Power), Track.Composer),Track.Composer))", "score": -0.5301431305997539, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.5327892191999126, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.5328862257592846, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Take The Power?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Take The Power), Track.Composer),InvoiceLine.Quantity))", "score": -0.5366334207647014, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Take The Power), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.24693088370443456, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2793253603333197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3121561793416001, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Milliseconds))", "score": -0.3351671816358838, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3445506559704853, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),Track.Name))", "score": -0.3454531976499857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3554415379644419, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3848249269181934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.38912347481193543, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),Album.Title))", "score": -0.3892218195086954, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),MediaType.Name))", "score": -0.38936461407142386, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3910263801693775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,=,Classical 101 - The Basics), Genre.Name),MediaType.Name))", "score": -0.39578236323255483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.39758232188072085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3982906439512466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32661484852619294, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.33151666330998436, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,1973-08-29 00:00:00), Track.TrackId),Invoice.Total)", "score": -0.3334713174096827, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.33575724460460765, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.340871435419447, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3427970409723506, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3447208487428507, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.34983503955769, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3514482170108515, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.36036610783581013, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.36644536400984556, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3675283121553485, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceDate,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3803691067438099, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3922296614634962, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the averaged total of invoices to customers supported by employees born in 1973-08-29 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,=,1973-08-29 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3993968863503835, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-08-29 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.24441383562238372, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3006039108566986, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3022909103030613, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Track),MediaType.Name,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.30245784870529824, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),MediaType.Name,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3052484934972995, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3181973303245747, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Track.Composer,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.32098797511657595, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.33047747890132273, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Invoice.BillingAddress,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.34203841990254613, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3431005756623061, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.34482902382703795, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3658629583618408, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3895590153438356, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Track.Bytes,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.415055559703133, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.42191979361056, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.09406566272982823, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.11028183279960291, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.21235356741006964, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.23653514367809927, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.2922948997315337, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.300633356656349, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Genre.Name),Track.Name))", "score": -0.3030496526445703, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Track.Name))", "score": -0.30695488637012447, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30877171555824934, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3235859939373424, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.33732595123976655, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Grunge), Track.Name),Track.Name))", "score": -0.3724916971138562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Genre.Name))", "score": -0.3783899752425512, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Album.AlbumId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3887403455617535, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Album.Title))", "score": -0.39369151238243594, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2077553781473398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23017345522793523, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23517110071778358, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26364712743811775, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2651790704477921, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,5064553),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26685169885497284, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28385373728388347, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.29920690069481753, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.30131327803170244, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3114878514008629, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31301979441053723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,5064553),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33607624445156115, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,5064553),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33974128587691543, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.352867178999559, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.Bytes,=,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3528871766593209, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Fax))", "score": -0.15000950285684667, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Fax))", "score": -0.22050510832559667, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Fax))", "score": -0.37581226715337834, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Fax))", "score": -0.388795002563711, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Title))", "score": -0.3896479580689629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.42432127819847665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.BirthDate))", "score": -0.4570344064522942, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.Fax))", "score": -0.459290608032461, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Title))", "score": -0.4601435635377129, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Fax))", "score": -0.49481688366722665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.BirthDate))", "score": -0.5275300119210442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Track.Milliseconds))", "score": -0.5435722444344719, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Address),Employee.Fax))", "score": -0.5778692711282929, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Track.Milliseconds))", "score": -0.6140678499032219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.BirthDate),Employee.Fax))", "score": -0.6145977668602427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cupertino), Track.Name),Track.Name))", "score": -0.2453959871945699, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.2994288297268264, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3268032664177599, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3425513532823215, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3612690229687842, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.361658893889583, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Cupertino), Track.Name),Track.Name))", "score": -0.3648024707183918, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3777817379378201, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3803237227469259, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3847119737723013, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Cupertino), Track.Name),Track.Name))", "score": -0.3888459940371831, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Cupertino),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.39430003150709053, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Cupertino), Track.Name),Track.Name))", "score": -0.3981435110570426, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3987640883597432, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.400370143483609, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3290080533365067, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.34493548661779583, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.34673939772926204, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),InvoiceLine.Quantity))", "score": -0.347869344061764, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3893461152300283, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.39771439714276924, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Track.Composer,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),InvoiceLine.Quantity))", "score": -0.3983679646916437, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.40651602885818355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.40794947102181456, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.41457330667536174, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.41491420412888264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.BillingCity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.41544573310377636, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.4170312608445357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4181495076561474, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.44229215638150476, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.16815885638726794, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19903807337943907, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21072415871957287, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2580899205424056, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26341476872332054, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2727029307737067, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3006552228747105, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31272445967792567, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3286805045828876, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Age Of Innocence),MediaType.Name,=,Age Of Innocence),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34806522173967047, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,0.99),MediaType.Name,=,Age Of Innocence),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3556524053038784, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35857730274644506, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.365723063762482, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Age Of Innocence),InvoiceLine.Quantity,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36719225840128544, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Age Of Innocence),Track.Name,=,Age Of Innocence),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36747082352887783, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.06450099550997375, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,None), Track.TrackId),Track.Bytes)", "score": -0.3994867005624166, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5477674389529481, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.5664698267723017, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Bytes)", "score": -0.567391946368025, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5697920007008603, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5818571726637681, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5860943341873787, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.588494388520214, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Bytes)", "score": -0.5894165081159374, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.6005595604831218, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Bytes)", "score": -0.6014816800788451, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6038817344116804, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.608118895935291, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.6201840678981987, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15284689618691483, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21275692121900044, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21773533792243713, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2202464468288379, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22738377999573436, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Artist.Name,=,Aerosmith),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23138725480365324, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23915263117119587, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.25112339577447557, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2515869470224513, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25447072723261216, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25450610300433935, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25939887265507056, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2683852131761822, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.2692078630034962, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.270953238616269, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.049408764692998375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29221288691494424, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33141018719890136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3548888309136623, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.36266625916812784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.36909821359817924, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38121467395675845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38976368630442576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39071208382208444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39803984671401826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4001238618651531, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4125312981144635, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4251251750088746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4762110968542076, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4781940180091624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.29185269061599683, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.3830480429915042, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.39122810993467283, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Employee.BirthDate))", "score": -0.41996977511917066, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.UnitPrice),Track.Bytes))", "score": -0.44377131865487246, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Milliseconds),Track.Bytes))", "score": -0.4515137798904468, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.BirthDate),Track.Bytes))", "score": -0.46351215226554826, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.4683346602705569, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.47685029205206814, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Track.Bytes))", "score": -0.47700884484956624, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Track.Milliseconds),Track.Bytes))", "score": -0.4836473319319339, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.485496960916862, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceDate),Track.Bytes))", "score": -0.4944521610707302, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Employee.BirthDate))", "score": -0.511165127494678, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.Address),Track.Bytes))", "score": -0.5143939049313945, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.2426825024960553, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.29580960306582876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2970837923333685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.30420531584954325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.33482236221962547, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.33865358663005996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.UnitPrice))", "score": -0.3430242202921495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3470492994137744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.36337742102845405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.37177313381216853, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.UnitPrice))", "score": -0.37629698782161314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.UnitPrice))", "score": -0.38469270060532756, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),Genre.Name,!=,Heavy Metal Classic),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.4008971969081409, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),Genre.Name,!=,Heavy Metal Classic),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.4014746912347221, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Playlist.Name,!=,Heavy Metal Classic), Genre.Name),Track.Milliseconds))", "score": -0.4046231377040845, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))", "score": -0.06408731736519258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.City),Customer.City))", "score": -0.23660289034523885, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.Fax))", "score": -0.4229194531617395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Fax),Customer.City))", "score": -0.4430520376590721, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Phone),Customer.City))", "score": -0.4621603927043907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.Phone))", "score": -0.5148943374333612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.PostalCode),Customer.City))", "score": -0.5775011917976371, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.PostalCode))", "score": -0.5886302898106806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.City),Customer.Fax))", "score": -0.5954350261417858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Customer.City),Customer.City))", "score": -0.5957960184132389, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.Fax),Customer.City))", "score": -0.6155676106391184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.Phone),Customer.City))", "score": -0.634675965684437, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,21000), Customer.City),Customer.City))", "score": -0.6830647285496525, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.City),Customer.Phone))", "score": -0.6874099104134075, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Album.Title))", "score": -0.7309095571217767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.16903695727499068, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.17055971510125478, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.19795861175006857, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21930268765815109, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.21962618685564578, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.23686800009824768, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Artist.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26177849509179907, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.28373771317856283, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.30377272509725256, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3093428461118627, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32026604404910725, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Artist.Name,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3246009025698641, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3447559371598906, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3469002409219958, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Genre.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35075653741169105, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.2883147463270584, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.2941646269868593, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.29498710239800047, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.3265519400765697, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.3267968679341019, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.3658418370576335, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.37405080960140275, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1.99),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.37897617464339545, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.37948526701104984, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.3807231656723448, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.398229058221903, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),InvoiceLine.Quantity))", "score": -0.3983508137414256, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1.99),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.3994651194024202, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,!=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.4114638161804902, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.41354858326871885, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.029634096453264647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4087033232472095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4197678228638324, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5088201470471176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5484910018540177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5593268575876209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5940025749414417, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6186191579590741, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6290945669434223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6381814487076554, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.6546921392700824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6564899387567493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Track.Composer),Invoice.BillingPostalCode))", "score": -0.6920679470322284, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7370705148468915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Genre.Name))", "score": -0.7435988488405201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.2812405502254478, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.32628604525871197, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.Composer))", "score": -0.46746963133876623, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.Composer))", "score": -0.4681149510497562, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Bytes,=,6252071), Track.UnitPrice),Track.Composer))", "score": -0.469173552773728, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.47576122636214035, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.Milliseconds),Track.UnitPrice))", "score": -0.4794312374497167, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6252071),Genre.GenreId,PlaylistTrack.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5316347547703955, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6252071),Genre.GenreId,Track.Bytes), Track.UnitPrice),Track.UnitPrice))", "score": -0.5322352958343085, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6252071),Genre.GenreId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5374708162622551, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,6252071),Genre.GenreId,PlaylistTrack.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5427774987720514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6252071),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5429969446581999, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,6252071),Genre.GenreId,Track.Bytes), Track.UnitPrice),Track.UnitPrice))", "score": -0.543378107378558, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6252071),Genre.GenreId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5465412025190258, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What's the unit price for the tracks with the bytes 6252071?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6252071),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,6252071),Genre.GenreId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5486136278065046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.029697742538701277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.FirstName))", "score": -0.41099283587391255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.4979629127701628, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.519295439349662, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5577525647750008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5737807305922615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Artist.ArtistId))", "score": -0.5765019406026113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Title))", "score": -0.6173358906453359, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.PostalCode),Employee.LastName))", "score": -0.6484261660298216, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.PostalCode))", "score": -0.7014843572324025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Email))", "score": -0.7372966755574453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.7468561681380379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Customer.LastName))", "score": -0.754738484734844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Title),Employee.LastName))", "score": -0.7584640292843687, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Phone))", "score": -0.7597356785481679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<=,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.2979716677109536, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.33578122592371074, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,<=,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.3926779609064397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<=,541 Del Medio Avenue), Employee.Country),Customer.Country))", "score": -0.4147469345371064, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Address,<=,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.42398983797829715, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,<,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.4304875191191968, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<,1970-05-29 00:00:00), Employee.Country),Customer.Country))", "score": -0.45255649274986354, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Address,<,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.46179939619105426, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.47725194132726756, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<=,541 Del Medio Avenue), Employee.Country),Employee.State))", "score": -0.5006597731153306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,<=,1970-05-29 00:00:00), Employee.Country),Customer.Country))", "score": -0.5094532277325925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,<=,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.5186961311737832, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<,541 Del Medio Avenue), Employee.Country),Employee.State))", "score": -0.5384693313280877, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Address,<=,1970-05-29 00:00:00), Employee.Country),Customer.Country))", "score": -0.54076510480445, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,<,1970-05-29 00:00:00), Employee.Country),Customer.Country))", "score": -0.5472627859453496, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09514276638990732, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09987172502291888, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.17836264492592363, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19106799305920125, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1941077850223717, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20085332803003816, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20478057388457413, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2082145416578226, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2092969124568356, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22837267654045917, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22923882564906634, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.2483241616393473, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2554958377046967, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.258709482963087, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.25980902368664954, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.1268586127701356, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.1821844511172789, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,+1 (403) 456-9986),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.1895946472542966, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.19349297976494884, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.19579437720415663, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.21520734964043509, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2287567448066087, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2393480672735994, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.24217945578350297, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.2423882078590274, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,+1 (403) 456-9986),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2746448794008497, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,+1 (403) 456-9986),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2852401536128091, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.29134506812062705, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3002734016463891, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.3015412188353199, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1301960551824338, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2401020800814781, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.24975645601863972, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2604074382031484, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2742323432968269, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2881072888900158, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.291479304307695, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3168694291400878, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.31801742210248585, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.32218778617164867, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3286684042869945, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.329066275675245, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3380854670406261, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35345831230821373, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3706490820678634, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.03189580905564071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Employee.State))", "score": -0.33302335831649543, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,1.99),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.47058770828320434, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5025606676408643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5263066596049318, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.539062921603545, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5539777639260137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5642078376529713, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Employee.State),Invoice.BillingState))", "score": -0.59434838564448, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5968077543129766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5985518238131035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.6031006881482333, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,1.99),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.6062164618564707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,1.99),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Employee.State),Invoice.BillingState))", "score": -0.6109940042238375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Employee.Country))", "score": -0.6129529068184638, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.14533240747956952, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15153254349084835, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.182754151264521, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.18585787066000967, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21095220585253385, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.22193205179491549, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2357540485020357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2458690110406981, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24882360246479035, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2507188032755287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25438595025308813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.25657514267076525, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2696283978026979, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27745563090673336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2866339053550733, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.03968313036511972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Customer.City))", "score": -0.3230808123762472, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40543569045166805, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.44222131816695764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.508986268919216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5381034359152181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,>,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6886004598627551, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCity),Customer.City))", "score": -0.6888333724627955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6974900559025627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7102217718775137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Customer.PostalCode))", "score": -0.715092693250881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,89503), Invoice.BillingCity),Customer.City))", "score": -0.7256190001780851, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.729621444624172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7473923012430532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Customer.City),Invoice.BillingCity))", "score": -0.7500406938188462, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Artist.ArtistId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.37389207987593925, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Employee.EmployeeId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.381159197530035, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.383241824979433, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.4004171159524115, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.41437726945207787, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.4184481794623115, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.42883498716083285, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Artist.ArtistId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.43263716167189703, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.43347467662714545, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Employee.EmployeeId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.44099583070935844, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.44432139674717314, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Album.ArtistId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.4488364312804567, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.44991896146927673, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.45189361615506785, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Invoice.BillingCountry,=,Andrew),getData(Customer),Artist.ArtistId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.4529628537968798, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13865930668587803, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.17946247746436858, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.1972352575494917, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2048095453420028, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22734977541626553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2371956821728849, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Album.Title))", "score": -0.2651756938771142, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28092153544334875, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),MediaType.Name))", "score": -0.29514004085920714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),MediaType.Name))", "score": -0.3028651761986553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))", "score": -0.3028897936474719, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),Album.Title))", "score": -0.30559753998802125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),Album.Title))", "score": -0.3190986287066565, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3234043990436398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3268956298620304, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,322063), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.35153562591585796, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,322063), Track.UnitPrice),Album.Title))", "score": -0.36385316417727154, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,322063), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.42368213848385494, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,322063), Track.UnitPrice),Album.Title))", "score": -0.4359996767452685, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.4448822216800181, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,<,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.48213522623748845, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,<,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5009503996274371, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.5049442805867325, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,<=,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.5072420120736156, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,322063), Track.UnitPrice),Customer.Fax))", "score": -0.510226421218249, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.5170287342480151, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5237594539766812, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,<=,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5260571854635644, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,<=,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.5300510664228597, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,<,322063),Track.Bytes,<,322063), InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.5338359189477743, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.2771942911253298, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Phone),Customer.Phone))", "score": -0.40633560815331293, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.44254820122465055, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.4441404365375545, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Phone),Customer.Phone))", "score": -0.46044494309899164, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.5387874188056939, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -0.5638388239063558, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Company),Customer.Phone))", "score": -0.573401288180321, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Phone))", "score": -0.6074696101972727, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.6094943466368753, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Phone),Customer.FirstName))", "score": -0.6174818883227999, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Phone))", "score": -0.6275106231259997, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Phone))", "score": -0.6395836631345446, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Phone),Customer.FirstName))", "score": -0.6715912232684786, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Email))", "score": -0.6851991354389495, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.11364803814900683, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.21948194606446408, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.FirstName))", "score": -0.5593082099771945, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.6350060516041024, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.6477686439462779, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.6733864313177909, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.6980091937370525, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8245645736324544, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.GenreId))", "score": -0.8482679086187382, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9436101041622457, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9469000640989039, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -1.050332498168479, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.054614563261709, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1125440927725236, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.122423098035372, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2181638201404894, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.22283998333705313, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.3202284147669161, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Customer.PostalCode))", "score": -0.42016147279036886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.4646862379839156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.4666132375019931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.4700754538976397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.47200245341571717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.4828807772981202, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.4882699417328879, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Track.Composer))", "score": -0.4890706112314547, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Australia), Artist.Name),Artist.Name))", "score": -0.4961405088532209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Employee.PostalCode))", "score": -0.503406362764963, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Australia), Artist.Name),Artist.Name))", "score": -0.5105721031064627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Australia), Artist.Name),Artist.Name))", "score": -0.5156913314087199, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.051171058372347034, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,2950224), Track.Composer),Track.Composer))", "score": -0.27706283102997986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Album.Title))", "score": -0.3535937103933975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,2950224), Track.Composer),Track.Composer))", "score": -0.3793678558922693, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Genre.Name))", "score": -0.5115995440191909, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,2950224), Track.Composer),Album.Title))", "score": -0.5794854830510303, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,2950224), Track.Composer),Track.Composer))", "score": -0.5797798315088585, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Artist.Name))", "score": -0.635680023164241, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6359191260460392, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(InvoiceLine),getData(Genre),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6772799143749759, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,2950224), Track.Composer),Album.Title))", "score": -0.6817905079133197, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(InvoiceLine),getData(Album),Track.GenreId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6830599424560092, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,2950224), Track.Composer),Track.Composer))", "score": -0.6902770973301813, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,2950224), Track.Composer),Track.Composer))", "score": -0.7110131064455345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.7154319641431357, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.11613165034587539, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.132667922274113, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.13527848820733968, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17113683216862385, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.19186670981535842, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.19996704872476442, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2228581081421936, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.24207688956834064, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27072790749557907, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.27974488724440977, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.29204861207518373, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29252497565305496, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2951754090009359, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.299646739371795, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3614767378995637, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.10379991441073184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.15147591587930279, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1643355557769019, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1718418247284889, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17985925137954098, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22258580837560665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.22566231160788972, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.25217846311310715, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.27922592959507775, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2919424408173929, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.29274418030503474, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2963248435058818, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3109164670479833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Album.Title))", "score": -0.33161780811675506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),Album.Title))", "score": -0.3433940733109665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Phil), Customer.Country),Customer.Country))", "score": -0.11032785313227578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Phil), Customer.Country),Customer.Country))", "score": -0.14373709099390908, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Phil), Customer.Country),Customer.Country))", "score": -0.39712583856680794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Phil), Customer.Country),Customer.Country))", "score": -0.47283288674452706, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,Phil),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.Country),Customer.Country))", "score": -0.5240589893727546, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Phil), Customer.Country),Customer.Country))", "score": -0.5246725066194813, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))", "score": -0.5373381360063831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Phil), Customer.Country),Customer.Country))", "score": -0.5959646089563648, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Phil), Customer.Country),Customer.FirstName))", "score": -0.5966857790576796, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Phil), Customer.Country),Customer.FirstName))", "score": -0.6300950169193129, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Phil), Invoice.BillingCountry),Customer.Country))", "score": -0.6407669710556547, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Phil), Customer.Country),Invoice.BillingCountry))", "score": -0.6520792960750441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Phil), Customer.Country),Customer.Country))", "score": -0.6556956751833241, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Phil), Invoice.BillingCountry),Customer.Country))", "score": -0.674176208917288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}, {"orig_question": "In which Country do Customers named Phil live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Phil), Customer.Country),Invoice.BillingCountry))", "score": -0.6854885339366774, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Phil), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.18332697616322377, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1858914080313373, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19497543115789698, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21358507513130012, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21780248917184783, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21807258874682994, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22308602262572844, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2300949620154081, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2382734751430647, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2413965332499937, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2430711689042612, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24552967334531958, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24944265245511596, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26345167923819135, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2651848095343526, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.23357822242948215, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.25437516337811333, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.2603885647113881, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.2663103373228011, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),Track.Bytes))", "score": -0.26737864078578244, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.26742380165056157, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes))", "score": -0.27211487292245873, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.2765714805624487, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.2802657666445395, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes))", "score": -0.28570234015622453, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.28913291088483134, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30798986355641206, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3084587070508285, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes))", "score": -0.3167193613013438, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes))", "score": -0.3230613824251959, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.04586030380141892, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.40296418988418736, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,ON), Customer.Company),Customer.Company))", "score": -0.4257633837432877, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,ON), Customer.Company),Customer.Company))", "score": -0.43698926293564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Country))", "score": -0.4658604471505896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Phone))", "score": -0.4886398522676245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))", "score": -0.5370311590404526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.City))", "score": -0.5912581591428534, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.FirstName))", "score": -0.6295705346883551, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,ON), Customer.Company),Customer.Company))", "score": -0.6638714524478928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Phone),Customer.Company))", "score": -0.669798771387832, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.PostalCode))", "score": -0.6794028191388861, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Address))", "score": -0.6811481623471991, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,ON), Customer.Company),Customer.Company))", "score": -0.6916067453594223, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.6924100914066003, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.17813899234351993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24076940730628849, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.380694406632756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4127112503613169, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4183877879422653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4258442087198718, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43686921330871437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,VV), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.44332482159552455, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,VV),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4435620401727048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Invoice.Total))", "score": -0.4437710852962482, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4500021880097951, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4542793692689884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,VV),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.46762422649629887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,VV), Invoice.Total),Invoice.InvoiceDate))", "score": -0.48101820290503383, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,VV),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4974507493216191, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.15407397580577292, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.18101752630950635, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.24694461879968782, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.28577935599310905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.3122127391281501, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.33496887358825295, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3362241985484071, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,1), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.33915628963188355, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.3448242267357691, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3461696290743953, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.359337227975789, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.36527912860389994, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3664201913485957, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.38136876488775495, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.38748051088874985, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13124163405039094, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1451684740938061, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.15714697500971486, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15829652393138752, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.1948862396099928, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1972413697515305, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2007256541701677, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21997753805970635, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23959432599907618, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.29495235269521386, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.3068998099883292, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3336542137428722, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.33473074008988596, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3445838925636874, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3566186545480228, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.19749163262790115, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.20139778337229533, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2122947079230783, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.2301838572968718, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.24626182753413497, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2514268737646584, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2547341468421708, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.25898021546885575, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2629607145739424, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.2640414468389411, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2786802878168888, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2789118243979598, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28171704850868073, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2895525304081992, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2942124133161311, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.254697265641274, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.Composer),Track.Composer))", "score": -0.27673782624460974, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.Composer),Track.Composer))", "score": -0.27699925436199424, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.28438746343707444, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.Composer),Track.Composer))", "score": -0.30325264531818086, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.Composer),Track.Composer))", "score": -0.30552911188597187, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.3141809343877383, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.32073055602165956, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),InvoiceLine.Quantity))", "score": -0.3261854174354422, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.32626464085269874, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.32685608992974485, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.Composer),InvoiceLine.Quantity))", "score": -0.3476508911054916, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.Composer),InvoiceLine.Quantity))", "score": -0.3479123192228761, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.34841567976773097, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers who have a song with the artist Black Eyed Peas are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.35244757042489727, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,!=,1.99), Album.Title),Album.Title))", "score": -0.16721311968809616, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceDate,!=,1.99), Album.Title),Album.Title))", "score": -0.19389136229414203, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.22891497678290235, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1.99), Album.Title),Album.Title))", "score": -0.23365229248238464, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.2529751258724019, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25777610376035526, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2716741421172412, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.277132847571268, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1.99), Album.Title),Album.Title))", "score": -0.2977896516344612, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,1.99), Album.Title),Album.Title))", "score": -0.3001027786526884, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,<,1.99), Album.Title),Album.Title))", "score": -0.30467034670009063, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.313864014417411, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceDate,<,1.99), Album.Title),Album.Title))", "score": -0.3313485804285478, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.33275959061202587, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,!=,1.99), Album.Title),Album.Title))", "score": -0.33502106689743427, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.15070576094608715, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16655731462399098, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.21701252524102776, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25820680860485923, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.26238807450869683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.2701391017711654, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27555040770142364, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27860148216297487, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<=,1.99), Artist.Name),Artist.Name))", "score": -0.288440311507672, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.2947214310350888, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.Total,<,1.99), Artist.Name),Artist.Name))", "score": -0.31801308467507394, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Artist.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.3251196610875234, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.InvoiceDate,<,1.99), Artist.Name),Artist.Name))", "score": -0.32970486109900454, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.3319223589211894, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Invoice.Total,<,1.99), Artist.Name),Artist.Name))", "score": -0.3493152797514647, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.05307863889748658, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Phone),Customer.Phone))", "score": -0.3424864404805703, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Phone),Customer.Phone))", "score": -0.46863728696189355, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Phone),Customer.Phone))", "score": -0.5956266366847558, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Phone),Customer.Phone))", "score": -0.6350197677602409, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Album.Title))", "score": -0.7261588781263472, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.7296100525709195, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.8348879630086883, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Phone),Album.Title))", "score": -0.8470179245778127, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.8616863754326387, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.889879718522368, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.8943662516119747, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.8970652291641464, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.9019882501116553, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Artist.ArtistId))", "score": -0.9052364492278395, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23904935243476505, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26242910082302995, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2788139955557774, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2875878398603741, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2998235562033155, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31543158168842755, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32146526921846336, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3240720973592854, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3263326482148692, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.329647802593042, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.GenreId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33373986661674293, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3368248895609665, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3461076091844372, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34847966436420075, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.356090595909968, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.1707636210987598, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.23396385758644417, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.25355519823426936, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.2540930937391429, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.2541505852241609, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2646713894332005, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2671375299559202, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2702609891260383, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.27302322222995823, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2781032950344998, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3061436446151426, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.31837249304211457, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.32404077494055816, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Bytes)", "score": -0.32738920510404573, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.32743334806166813, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.10022806800328286, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.13680430628702753, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.14362718170576583, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.22980851273969902, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.2682769509531225, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3583202046446143, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3744253014455552, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.38213837335108003, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.38653416027535986, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3910387956543844, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.39678324193696307, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.39890422135747877, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4014915643883554, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4032375732585633, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.42002594500238577, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.09962545578355275, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.29745304082507573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.BillingAddress),Invoice.Total))", "score": -0.313558798851318, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.41556332503432714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.4238210717307993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.BillingAddress))", "score": -0.46261452940279923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,9, Place Louis Barthou), Invoice.BillingAddress),Invoice.Total))", "score": -0.511386383892841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5192634415852823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5249546887509473, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5278598848785145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5399831334220835, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,9, Place Louis Barthou),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.5429166721546006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5477324524986216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,9, Place Louis Barthou),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.5624608725770166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the distinct totals of invoices issued to 9, Place Louis Barthou?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))", "score": -0.5989890793430277, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,9, Place Louis Barthou), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.06065772229525291, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13046613058036474, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.17818990431848658, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.19201853668678606, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.24151426483752306, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.24432382660063412, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2741336913334362, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.27621405768394675, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2820103794025623, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.29048011681647856, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2937609941982608, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.31501285203362145, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3271045310684652, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33404161723963205, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.3542888436901174, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mundo Livre S/A),Track.Milliseconds),Track.UnitPrice))", "score": -0.17851019498879014, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.19767301761420356, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Track.UnitPrice))", "score": -0.19997175146428378, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.212052929616645, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mundo Livre S/A),Track.Milliseconds),Track.UnitPrice))", "score": -0.21303457219216923, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.24388069295124512, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Milliseconds),Track.UnitPrice))", "score": -0.2681876711861827, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.2981232145543279, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mundo Livre S/A),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.31174129383667226, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.31692622164287987, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.3335581691486377, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Track.UnitPrice))", "score": -0.34243047558336914, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3646983395639348, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.38740285502200084, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),Track.Milliseconds),Track.UnitPrice))", "score": -0.389558830706601, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37131212761047594, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.387754950465121, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40015317159049074, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Kiss), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4119241757470766, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4174158032205382, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4197301180092007, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4205741488860391, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),InvoiceLine.Quantity))", "score": -0.42955079623902054, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),InvoiceLine.Quantity))", "score": -0.43039482711585897, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Kiss), MediaType.Name),Invoice.Total))", "score": -0.4407299574480572, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), MediaType.Name),Invoice.Total))", "score": -0.4541714073022063, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), MediaType.Name),Invoice.Total))", "score": -0.4550154381790447, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Kiss), Invoice.Total),InvoiceLine.Quantity))", "score": -0.4638756146134535, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))", "score": -0.46399208553202614, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have purchases of Kiss tracks been made?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))", "score": -0.4648361164088646, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Kiss), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Customer.State),Employee.Address))", "score": -0.3241536339332384, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Customer.Address),Employee.Address))", "score": -0.36634268875869364, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96),Invoice.Total),Employee.Address))", "score": -0.3719859913591771, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Employee.HireDate),Employee.Address))", "score": -0.3760706420538106, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Employee.Address),Employee.Address))", "score": -0.3785538605365368, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Customer.State),Employee.State))", "score": -0.38270450905341646, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Employee.State),Employee.Address))", "score": -0.39020109299292394, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<=,3.96), Customer.State),Employee.Address))", "score": -0.4052632182430119, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96), Customer.State),Employee.Address))", "score": -0.40962716036354624, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<=,3.96),Invoice.Total),Employee.Address))", "score": -0.4183009634353133, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Customer.Address),Employee.State))", "score": -0.42489356387887167, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96),Invoice.Total),Employee.State))", "score": -0.42715223819887166, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Employee.HireDate),Employee.State))", "score": -0.4346215171739886, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<=,3.96), Employee.Address),Employee.State))", "score": -0.43710473565671487, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<=,3.96), Employee.State),Employee.Address))", "score": -0.4374567231071844, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13174473124445532, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1560325925138891, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1647991667057608, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16571449523177456, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.18085307239012732, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.18107816003392352, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20195638840789853, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20475201729481707, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.23802902747935079, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.25332380305192265, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.25992246872487684, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.26444100391966996, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2671588175054849, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32592753751992143, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3379734172075278, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.06634050577114964, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43742980448457075, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.454542727058887, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.5170300480997972, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5236819135266931, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5781486443070382, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.6137449632026104, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Invoice.BillingCity),Invoice.Total)", "score": -0.6163531353241015, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6197739701913926, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6206772621346116, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Invoice.BillingCity),Invoice.Total)", "score": -0.6326291230549588, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6334543636789143, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Invoice.BillingCity),Invoice.Total)", "score": -0.6358952033672312, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6505774367759627, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6508353310412642, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2408539220492871, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.27550253010198217, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2762524201923453, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.308027102272863, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.31090102824504035, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3225797615249611, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3282705095264375, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3344655370381649, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3352406433340909, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.34267571032555805, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3434256004159212, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),MediaType.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34808359708302977, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.35252324536249247, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35879042053236504, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.36988925138678597, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.19506492986146814, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2035853492791497, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20609666992939318, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.22641187118021092, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T5K 2N1),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22777651161207063, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,T5K 2N1),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2648951671593448, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27731986433226385, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.2782430709127264, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.28897779587239913, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T5K 2N1),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.29074947053054884, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.29273662979376536, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T5K 2N1),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.29573639089770926, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,=,T5K 2N1),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.303819469019348, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.30628048665393093, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price for tracks that have been sold by an employee that lives in an area with the postal code T5K 2N1?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,=,T5K 2N1), Track.TrackId),Track.UnitPrice)", "score": -0.3146293482309358, "correct_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.13706495837780452, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.16980138930936275, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,K.Hammett),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1816819185944238, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.21979460483113253, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2370328031545188, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2770343871197502, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.28703383446973885, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31599303257575795, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3296505215839493, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3308712130342528, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33278357097596145, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.338730990632069, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3395984934378645, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3409399456471439, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3452439408853655, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Email),Customer.Email))", "score": -0.3539409831782905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Email),Customer.LastName))", "score": -0.4123993114253608, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.Email),Customer.Email))", "score": -0.43159392184225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Email),Customer.Phone))", "score": -0.47629525220600044, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.Email),Customer.LastName))", "score": -0.4900522500893203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Email),Customer.FirstName))", "score": -0.49643494641986763, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.LastName),Customer.Email))", "score": -0.5320730999728767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Email),Customer.Email))", "score": -0.5486527950188247, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.Email),Customer.Phone))", "score": -0.5539481908699599, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Phone),Customer.Email))", "score": -0.5657762483378974, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), MediaType.Name),Customer.Email))", "score": -0.5682432845851508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.Email),Customer.FirstName))", "score": -0.5740878850838271, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Company),Customer.Email))", "score": -0.5835757449885932, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.LastName),Customer.LastName))", "score": -0.590531428219947, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Email),Customer.LastName))", "score": -0.607111123265895, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1481279971459113, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18514173831305003, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19731034598688227, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20550454294935597, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2107172512362798, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.22923281769779463, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.23472045563176588, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23506890094135743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.23944394015490708, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24254917644496346, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24521577099441577, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26694324437115563, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2684476819930904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2746663557222974, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3051585685999394, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.07038297089729895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2133211489299356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3799778218844949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.Total),Invoice.InvoiceDate))", "score": -0.3983153426552235, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5400466016026257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AZ), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5412535206878601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.551477341959071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5516096675301014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5877455468753396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AZ), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6829847796352624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6890439982989847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.68935736925323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6944155199917077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AZ), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6945478455627381, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates of invoices sent to the state AZ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7033858588429212, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AZ), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.12306839251914425, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29820589745440884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3332174571792166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35043065274157925, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43214397715428277, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44145540917315884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.45898123109736844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49078719900944634, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.51067228639522, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5142304154674093, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5149071666041891, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5511110278407614, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5516309284234922, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Artist.Name,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5965070866609494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6072814513559024, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.17609264806631703, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,+1 (403) 467-8772),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.21626111615201946, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,+1 (403) 467-8772),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2174668152606923, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.21903335427042617, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,=,+1 (403) 467-8772), Track.TrackId),Track.Bytes)", "score": -0.23067477309359852, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,=,+1 (403) 467-8772), Track.TrackId),Track.UnitPrice)", "score": -0.23090285661234827, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.24722875069065622, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,=,+1 (403) 467-8772), Track.TrackId),Track.UnitPrice)", "score": -0.25261257218680316, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.25375972555157816, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25588411198118627, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.2565444926013406, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,=,+1 (403) 467-8772), Track.TrackId),Track.Bytes)", "score": -0.2605546296459861, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 467-8772),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2722045537081369, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 467-8772),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.27341030594520443, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all tracks sold by our employee with the fax number +1 (403) 467-8772?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,=,+1 (403) 467-8772), Track.TrackId),Track.UnitPrice)", "score": -0.2752618578978897, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14162429846397698, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15391531333891778, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1590856115312103, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17195653965990412, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18509596604241735, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19089184574554893, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1909987503237289, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19399390121977148, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.21047229477159615, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21483402909100874, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23758091972198409, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24903459699804942, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2511237056343096, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.2602792241932564, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26035773692401754, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.27636907602936844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.39904298241526703, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.4356607085028372, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.4461883081057749, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.4960942750731192, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Jailbait), Customer.PostalCode),InvoiceLine.Quantity))", "score": -0.5060609353640757, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.507530662969657, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.5087965911188803, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Jailbait), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5292193068125925, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.5583346148887358, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5688622144916735, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Jailbait), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5701409352877818, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.5714508032360754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Artist.Name,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.5768650507488928, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.5779371110656939, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13247136067911924, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13564733457133116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3198254554470048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Spain),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3307541902385997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.35073760266471543, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Spain),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3689200610305942, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38565309619116334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4120781098834566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Spain),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41781549984560723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Spain),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4245533511318617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Spain),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42678657228671363, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43454853957476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.44128639086101445, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5124830235199624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5259958733277017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Composer))", "score": -0.1313518293109155, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Composer))", "score": -0.15902960374023678, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.UnitPrice))", "score": -0.3426182240154958, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.UnitPrice))", "score": -0.3702959984448171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Composer))", "score": -0.41700615434911015, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Composer),Track.Composer))", "score": -0.44468392877843144, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.4984298914578176, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Name))", "score": -0.5261076658871389, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.TrackId),Track.Composer))", "score": -0.6178300686087823, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Milliseconds))", "score": -0.6213965386059499, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.UnitPrice))", "score": -0.6282725490536905, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Milliseconds))", "score": -0.6490743130352712, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Milliseconds),Track.Composer))", "score": -0.6533469267096734, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Composer),Track.UnitPrice))", "score": -0.6559503234830117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost more than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Composer))", "score": -0.7054067745712018, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Track.Composer),Genre.Name))", "score": -0.1820829988546393, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Invoice.BillingPostalCode),Genre.Name))", "score": -0.30229817639065004, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,239124), Track.Composer),Genre.Name))", "score": -0.3197288469500563, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Genre.Name),Genre.Name))", "score": -0.3356035829610846, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,239124), Track.Composer),Genre.Name))", "score": -0.33715283433866716, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Track.Composer),Track.Composer))", "score": -0.3642020181841872, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,239124), Invoice.BillingPostalCode),Genre.Name))", "score": -0.43994402448606706, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,239124), Invoice.BillingPostalCode),Genre.Name))", "score": -0.4573680118746779, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,239124), Genre.Name),Genre.Name))", "score": -0.47324943105650163, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Invoice.BillingPostalCode),Track.Composer))", "score": -0.4844171957201979, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,239124), Genre.Name),Genre.Name))", "score": -0.4906734184451125, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,239124), Track.Composer),Track.Composer))", "score": -0.5018478662796042, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Genre.Name),Track.Composer))", "score": -0.5177226022906325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,239124), Track.Composer),Track.Composer))", "score": -0.519271853668215, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}, {"orig_question": "What are composer names which composed a track longer than 239124 millisecond.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,239124), Track.Composer),Invoice.BillingPostalCode))", "score": -0.5258432583041213, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,239124), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Netherlands), Employee.Title),Employee.Title))", "score": -0.24065593388149864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Title),Employee.Title))", "score": -0.3181873039242636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.Title),Employee.Title))", "score": -0.3362944299051037, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.LastName),Employee.Title))", "score": -0.3434787704047907, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.PostalCode),Employee.Title))", "score": -0.3557125181848817, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Fax),Employee.Title))", "score": -0.36777660925734257, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.LastName),Employee.Title))", "score": -0.36859469957013485, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Netherlands), Employee.LastName),Employee.Title))", "score": -0.3829446708805335, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Title),Employee.Title))", "score": -0.3938203957609709, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.40255435594142, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.41521909591028816, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.LastName),Employee.Title))", "score": -0.419111862241498, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Email),Employee.Title))", "score": -0.42171369112378904, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.Title),Employee.Title))", "score": -0.42587352816020496, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.PostalCode),Employee.Title))", "score": -0.43156956295183374, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.11043102323722426, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21434669022596192, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.21784835518522822, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.21912889436165375, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2254373925463432, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24592194703491516, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26862664651620277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.26972883463680325, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27069812223427936, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.28834914773928544, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2998728888263494, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3064516859287322, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),Genre.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3167461554325092, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.3187543046661747, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the distinct names of playlists containing tracks composed by \"Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))", "score": -0.33657419165931873, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Geddy Lee And Alex Lifeson/Geddy Lee And Neil Peart/Rush), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Genre.Name),Album.Title))", "score": -0.09168079840713375, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.44880149057895724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Genre.Name),Genre.Name))", "score": -0.4773825805753462, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Album),Track.GenreId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.4783479000832545, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.4789931191046803, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Genre.Name),Album.Title))", "score": -0.4828903582825699, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Album.Title),Album.Title))", "score": -0.4865989829131336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Album),Track.GenreId,Genre.GenreId), Genre.Name),Album.Title))", "score": -0.5044822940605825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Genre.Name),Album.Title))", "score": -0.5197963579575208, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.530189925729682, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Album),Track.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5346107709159674, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.546278885399159, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.5494920632080592, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.5603815088464523, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Album),Track.GenreId,Genre.GenreId), Album.Title),Album.Title))", "score": -0.5607451410812837, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.19885916660347872, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1),Track.Milliseconds),Album.Title))", "score": -0.28546446713352486, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1),Track.UnitPrice),Album.Title))", "score": -0.2910400663071967, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2983392158457893, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3002808510596926, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3011437189148165, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1), Album.Title),Album.Title))", "score": -0.3064927211623768, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3166648995905376, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.3239204428412101, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),Track.Composer,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3285325382431243, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3333941539155451, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),Track.Name,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3546249920687097, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3667754301704996, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3711667284162066, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3964501472998476, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19119135848086444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.273289779190236, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32450489512484637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3894280772547063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40660331583421794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,1.99), Customer.Address),Invoice.BillingAddress))", "score": -0.42908260411422816, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4299126155565318, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.47152649796407786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<,1.99), Customer.Address),Invoice.BillingAddress))", "score": -0.5111810248235997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5120110362659034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5361596625189122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Customer.Address),Invoice.BillingAddress))", "score": -0.5623961407582101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5632261522005138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,1.99), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.5747625008116302, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addressed of our customers that have placed orders smaller than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6182580832282838, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.09951791906350722, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.31513645723116823, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.4313614494258218, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Country))", "score": -0.5421513231157953, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.FirstName))", "score": -0.5959411985331826, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.6244845404380612, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.6604272214945621, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.FirstName),Customer.Country))", "score": -0.6668710834437661, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.7012798833638517, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Country))", "score": -0.7013802654200845, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.7425687327140622, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.7514247417375962, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.7577698612834562, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.7809119175821514, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.FirstName))", "score": -0.7890642895454221, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.015813458299817285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Employee.Email))", "score": -0.42135011130812927, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.5579971760125773, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Track.Milliseconds))", "score": -0.6251081424379663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Employee.Email),Customer.Email))", "score": -0.6999921359783912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7089973777146952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7146827667565958, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Employee.Address))", "score": -0.7256706553125696, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7435112684579508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7533772676797525, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7812224223234807, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.LastName))", "score": -0.7856033044481592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Fax))", "score": -0.8043610053682642, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),MediaType.MediaTypeId))", "score": -0.8170219259882288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.821390756926121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.1422203715975609, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.1512091145332306, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.4061646335239857, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.Country),Customer.Country))", "score": -0.4586551063175648, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.49290849496082956, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.FirstName))", "score": -0.5072481682936996, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.5895630118371259, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.FirstName),Customer.Country))", "score": -0.614924910892114, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Country))", "score": -0.6295473607669919, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Invoice.BillingCountry))", "score": -0.6797773888747543, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Invoice.BillingCountry),Customer.Country))", "score": -0.6992036434303373, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Company))", "score": -0.7363823702971786, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.FirstName))", "score": -0.7622036872844546, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Invoice.BillingState))", "score": -0.7762059620063155, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Country),Customer.Country))", "score": -0.7831049722799435, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.15538461140064141, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16748129992647037, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.17228010657275902, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.18556668300675908, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2115221157632701, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21834850424489038, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22276175110680688, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23057804557254294, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24248848036464235, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24575953919430543, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2618216507013253, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2815668327277275, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2844058667826371, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scorpions),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.31816106998812865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.3303393711874201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Customer.Phone))", "score": -0.2999537157083978, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Phone),Customer.Phone))", "score": -0.3175117092396249, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Customer.Fax))", "score": -0.34101452102913754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Phone),Customer.Fax))", "score": -0.35857251456036465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Address),Customer.Phone))", "score": -0.4339607076908578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Customer.LastName))", "score": -0.4356912391449441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Phone),Customer.LastName))", "score": -0.45324923267617123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Address),Customer.Fax))", "score": -0.47502151301159756, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Album.Title))", "score": -0.5504187362457742, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Company),Customer.Phone))", "score": -0.5615952329899301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Artist.ArtistId))", "score": -0.5663838999535074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.LastName),Customer.Phone))", "score": -0.5663956420685281, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Phone),Album.Title))", "score": -0.5679767297770013, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Address),Customer.LastName))", "score": -0.5696982311274041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}, {"orig_question": "In which town is the customer with the last name Goyer?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.Fax),Customer.Email))", "score": -0.5725877898003091, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Goyer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.09002536383923143, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.34385938418563455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Riotur), Customer.State),Customer.State))", "score": -0.38885391724761575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Riotur), Customer.State),Customer.State))", "score": -0.4100487328832969, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.4257175422972068, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Employee.State))", "score": -0.4800199161982164, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.4837290741270408, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Invoice.BillingState))", "score": -0.4905825149035081, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.Address),Customer.State))", "score": -0.49420302303042263, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.Address))", "score": -0.5210500251268968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),MediaType.Name,=,Riotur), Customer.State),Customer.State))", "score": -0.5290584064787254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.5377166367834434, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.Country))", "score": -0.5857860933756456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Riotur), Customer.State),Customer.State))", "score": -0.6142333842581138, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.6223315218230709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))", "score": -0.04937960045572254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Artist.Name))", "score": -0.2693014128708455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.PostalCode),Employee.PostalCode))", "score": -0.4235639704966161, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.City))", "score": -0.5100530667805288, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Calgary), Employee.PostalCode),Employee.PostalCode))", "score": -0.5509714156032715, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.Phone))", "score": -0.5561691506409261, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.Title))", "score": -0.5872117860817525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.LastName))", "score": -0.5892035944962117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.City),Employee.PostalCode))", "score": -0.5998685548656795, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Calgary), Employee.PostalCode),Employee.PostalCode))", "score": -0.6291492253185424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.PostalCode),Artist.Name))", "score": -0.6434857829117391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Album.ArtistId))", "score": -0.6780834777855489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Customer.PostalCode))", "score": -0.6811932309174153, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.FirstName))", "score": -0.6816170199417684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of the employees that live in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Artist.Name),Employee.PostalCode))", "score": -0.7220128963344905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23941014074419897, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2823950026464983, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2856393722915932, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2865457680557096, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2952182047997952, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.SupportRepId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2975695347259417, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.2993689702090065, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3016093115982081, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.SupportRepId,InvoiceLine.InvoiceId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.301720300135153, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.30576007700741936, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3155791629834595, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.32315281487205255, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.3377364679231323, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.33851206472709794, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,robert@chinookcorp.com), None),None)", "score": -0.33990202962206356, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.1806148079946923, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Company))", "score": -0.2730884213056536, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Address))", "score": -0.32739256478007595, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.35906145507611986, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.3744292230030293, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),MediaType.Name))", "score": -0.376673248719789, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,ON),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.3818338300012752, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.3874107050557648, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON),Invoice.BillingAddress,=,ON),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.4146454390056711, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), MediaType.Name),Customer.Company))", "score": -0.41838210580440355, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,ON), MediaType.Name),Customer.Company))", "score": -0.4185370006363981, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON),Invoice.BillingAddress,=,Denmark),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.42877646129497554, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark),Invoice.BillingAddress,=,ON),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Company))", "score": -0.4341866043148174, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), MediaType.Name),MediaType.Name))", "score": -0.4372306643287856, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON),Invoice.BillingAddress,=,Denmark),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Company))", "score": -0.448317650618357, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.23063426308544877, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.25546086423310044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.2859527974596858, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.3386816590300441, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.Composer),Track.UnitPrice))", "score": -0.3911284825971961, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.Composer),Track.UnitPrice))", "score": -0.4159550837448478, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.Composer),Track.UnitPrice))", "score": -0.4464470169714332, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,260154), Track.Composer),Track.UnitPrice))", "score": -0.49917587854179146, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.UnitPrice),Album.Title))", "score": -0.5085030294230819, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Album.Title))", "score": -0.5333296305707336, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.UnitPrice),Track.Milliseconds))", "score": -0.5333519376090408, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5409286341837287, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260154),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5540028034199198, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260154),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5568956704630569, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Track.Milliseconds))", "score": -0.5581785387566924, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Album.Title))", "score": -0.2325104088668013, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Album.Title))", "score": -0.3681119256798411, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Milliseconds))", "score": -0.41583056609670166, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.43514700095693115, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Album),Track.MediaTypeId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.4544738270585565, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.4569106885382369, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Album),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.4832359285910819, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,<,1.99), Track.Name),Album.Title))", "score": -0.48613211188057903, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Track),Track.MediaTypeId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.499473248612812, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Album),Track.MediaTypeId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.5015962877127373, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.501910174364158, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Track),getData(Album),Track.MediaTypeId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.5135707592331039, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.UnitPrice))", "score": -0.5285403267625952, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Album.Title),Album.Title))", "score": -0.5335229211632395, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Milliseconds))", "score": -0.5514320829097414, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26096304093915385, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27710418454619307, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.28170741690693135, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),InvoiceLine.InvoiceLineId))", "score": -0.2883674711868002, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),InvoiceLine.InvoiceLineId))", "score": -0.2929707035475384, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2961544935157036, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.2967652743656679, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),InvoiceLine.InvoiceLineId))", "score": -0.304606009468101, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),MediaType.Name))", "score": -0.30554383416546893, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.31014706652620716, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),InvoiceLine.InvoiceLineId))", "score": -0.3115446953288242, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3133169363775347, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),InvoiceLine.InvoiceLineId))", "score": -0.31350263931107053, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),InvoiceLine.InvoiceLineId))", "score": -0.31411342016103483, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.31470387111458525, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.33886640556654574, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,=,None), Track.TrackId),Track.Bytes)", "score": -0.4354457808209571, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Bytes)", "score": -0.503809509318465, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(filter(getData(Track),Employee.Title,=,None), Track.TrackId),Track.Bytes)", "score": -0.5040696210972235, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,None), Track.TrackId),Track.Bytes)", "score": -0.5284729262472299, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.5594162571445056, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Milliseconds),Track.Bytes))", "score": -0.5896241376121907, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Track.Milliseconds),Track.Bytes))", "score": -0.6204368779381184, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Milliseconds),Employee.Email))", "score": -0.6295028636177449, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Track.Bytes))", "score": -0.6296525904854207, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Track.Milliseconds),Employee.Email))", "score": -0.6603156039436726, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Track.Bytes),Track.Bytes))", "score": -0.6604653308113484, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Employee.Email))", "score": -0.6695313164909749, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,None), Track.Milliseconds),Track.Bytes))", "score": -0.6723827430923848, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Track.Bytes),Employee.Email))", "score": -0.7003440568169026, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17415943176548823, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2053245883661648, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22008487135046553, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,!=,1.99), Genre.Name),Genre.Name))", "score": -0.22805412569193587, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.23690261951297942, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1.99), Genre.Name),Genre.Name))", "score": -0.2467438426718076, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,!=,1.99), Genre.Name),Genre.Name))", "score": -0.25195960018203023, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26218017604309646, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2623385043518954, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26491557095699564, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,1.99), Genre.Name),Genre.Name))", "score": -0.2692973752407935, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27197129080469606, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.27735472346265966, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,1.99), Genre.Name),Genre.Name))", "score": -0.3162224154101773, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,!=,1.99), Genre.Name),Genre.Name))", "score": -0.32982323958305637, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3824241725248063, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38446806856200705, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3981969639295999, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3984696907894612, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4031370358885529, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40793648287739454, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.408753614207575, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40998037891459527, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4116554387286794, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41547621684515207, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41632278382777105, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41857955564631977, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.4296557938188516, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.44316922550136034, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice))", "score": -0.452814635791892, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Genre.Name))", "score": -0.17927721321029821, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))", "score": -0.2775838690940873, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Composer),Track.Composer))", "score": -0.33096605322391914, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),InvoiceLine.Quantity))", "score": -0.33479763745708624, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Composer),InvoiceLine.Quantity))", "score": -0.33756109003127577, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Composer),Genre.Name))", "score": -0.3750234937424689, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Genre.Name),Genre.Name))", "score": -0.39936974264128366, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),InvoiceLine.InvoiceLineId))", "score": -0.42425386785907904, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Composer),Invoice.BillingPostalCode))", "score": -0.4403313760817349, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.4579971443571518, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Track.Composer))", "score": -0.462268576258114, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.Composer),InvoiceLine.Quantity))", "score": -0.4645921811645084, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,522919189), Track.Composer),Genre.Name))", "score": -0.46811678438825766, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,522919189),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),InvoiceLine.Quantity))", "score": -0.46886361306547064, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Invoice.BillingPostalCode))", "score": -0.49330513357563177, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10594425346748274, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.12747660435511662, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17803491069469027, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18848094918279032, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19684252113196338, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19791228412345888, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.21821027342972832, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22695941385008706, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23966831820069123, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.2492343197301891, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingCity),Invoice.Total)", "score": -0.25052659324211857, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2576647560999849, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2587651189383544, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.2619940209447879, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.2668846646413568, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13628245693713276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1670976514669598, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.1760271610328095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.18193051408305122, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.19290885529117485, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22189432951060517, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.22712832750524306, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23584392853361563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2646113438374462, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2712748082798247, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2790660821404964, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.28554432630265164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2891497988078566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2893684153619551, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2936270481219829, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.37189419894912135, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.3824780839631785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4177801194737185, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.4283640044877757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.44980721502997767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.46039110004403483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4781102868864764, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4857960487852324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.48869417190053355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1962-02-18 00:00:00), Employee.State),Invoice.BillingState))", "score": -0.4963799337992896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5239962074110736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5253190728972186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5316819693098296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5345800924251307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5359029579112757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.03210315551223175, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.40408412437500374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.45343784313263313, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.4675004265791358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.HireDate),Employee.BirthDate))", "score": -0.5338011996409477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Track.UnitPrice))", "score": -0.5755754278561653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.62079707603516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.HireDate))", "score": -0.6436590717694344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.6543635295292916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6785432116648735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.6828884265905799, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Track.UnitPrice),Employee.BirthDate))", "score": -0.6973500268122734, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.7442486069685401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.Fax))", "score": -0.7526897953412117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.BirthDate))", "score": -0.761296154703814, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.09856547450507952, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.13309342310085, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.24888307389973183, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2559915930461395, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2929218103599044, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.32645320754772456, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.32801222548862696, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.34759427802945053, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,None),Artist.ArtistId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3506763174260676, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3562160040118725, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.36593210833916917, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3767027809271177, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3768942944841717, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3773085215246747, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,None),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4039137184959106, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.004126230864565373, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.0188977106655084, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -1.0460969360574381, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0962104647217188, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1007134973523458, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -1.115822855627472, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.1783171485304695, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.Name,Album.ArtistId), Artist.Name),Artist.Name))", "score": -1.2172818249867252, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.3109051766144382, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.4140413481525282, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.4340076895673115, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.4407901161428793, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.4694375013860614, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.5489350551654526, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.552210016695062, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.15598734343989146, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.182557697841822, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2041490173050208, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.23712155940148788, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.24707408091307542, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.25726507389303244, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2825628244385643, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.28478424278189274, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.29448908483225766, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.29475358849967787, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3073629171668763, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3196327205870209, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3198443453939559, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3207785692514952, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3271697762437962, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.1922977137946873, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.19577629301784327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2888252455377369, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2923038247608929, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3359864605559182, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.40373923191930267, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4437883732349891, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4462889153146534, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4497674945378094, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5130224332398994, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5390493962549954, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.LastName),Track.Name))", "score": -0.5443540301376851, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5649577499934821, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5684363292166381, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5767742115640431, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3577593897124811, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36672475185279935, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Album.AlbumId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38378015396883275, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.385682941920771, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3871758348043294, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4023571033178286, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40511115598912273, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4066040488726811, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.415436468995147, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4295377979681911, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44729140565055064, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45558764563281456, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4594083216973346, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46003419047776223, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Album.AlbumId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4748720334311842, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.14212021457205992, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2153626702929614, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.4065760042722104, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Album.Title))", "score": -0.40796228910039645, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Album.Title))", "score": -0.4798184599931119, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Album.Title))", "score": -0.48120474482129794, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Album.Title),Track.Name))", "score": -0.5251685282419203, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.562420909515003, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Album.Title),Track.Bytes))", "score": -0.572354366464424, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Track),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.5733073625926586, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.5812789075280307, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.593604424623002, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Milliseconds),Album.Title))", "score": -0.6011427161318112, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Track),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.6044907237532325, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}, {"orig_question": "How many different tracks with the unit price of 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.6115715444292086, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,!=,WI),merge(filter(getData(Customer),Customer.City,!=,Budapest),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3666436504609694, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,!=,WI),merge(filter(getData(Customer),Customer.Address,!=,WI),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38225855110859913, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,=,WI),merge(filter(getData(Customer),Customer.City,!=,Budapest),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3978738370365557, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,=,WI),merge(filter(getData(Customer),Customer.Address,!=,Budapest),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41348873768418537, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,!=,WI),merge(filter(getData(Customer),Customer.State,!=,WI),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42148550664949536, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,!=,WI),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42577719117781904, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),merge(filter(getData(Customer),Customer.City,!=,WI),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42981350618135644, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,!=,WI),merge(filter(getData(Customer),Customer.City,!=,WI),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4371025263389232, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.State,<,WI),merge(filter(getData(Customer),Customer.City,!=,Budapest),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44350594417866496, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Customer),Customer.State,!=,WI),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,<,WI), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44699963666315456, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,<,WI), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4470120259926745, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Customer),Customer.State,!=,WI),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,Budapest), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4520255188148702, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.State,<,WI), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45945756678783156, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Customer),Customer.State,!=,WI),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Customer.Country,<,Budapest), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.46164589805093903, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,WI), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4627525148028855, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Track.AlbumId,Album.AlbumId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),Track.Milliseconds),Album.Title))", "score": -0.36204029725895415, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Track.AlbumId,Album.AlbumId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.3783386070418589, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Track.AlbumId,Album.AlbumId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),Track.Milliseconds),Album.Title))", "score": -0.38709753328601826, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.39880279298176674, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Track.AlbumId,Album.AlbumId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.403395843068923, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,2113),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4065952852801772, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.4240076324709371, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.42594938574119534, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),Track.Milliseconds),Album.Title))", "score": -0.4278607912976112, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.4321269127016441, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2113),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4353116810404909, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),Track.Milliseconds),Album.Title))", "score": -0.44234561674944195, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.44244628216475196, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2113),InvoiceLine.Quantity),Album.Title))", "score": -0.4441590916664648, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,2113),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.446042883955074, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))", "score": -0.021011009785524948, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.39029386543779765, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))", "score": -0.4637538525007585, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5047839064170481, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5354172909553584, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5584524796084082, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5664760758383205, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5747235004191283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Alfred Ellis/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5823117118724684, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5823517939864292, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Album.Title))", "score": -0.582842974896721, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5890858591628091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.Composer))", "score": -0.5953091671422044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6101477232876679, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks composed by Alfred Ellis/James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Alfred Ellis/James Brown),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6108650188871483, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Alfred Ellis/James Brown), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.19196170810705798, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.2154802078449674, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.24716895797588423, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.28085504478838524, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.29863168607320295, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Artist.Name))", "score": -0.3071533673000885, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Genre.Name))", "score": -0.31346716985024403, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Playlist.Name))", "score": -0.3468466929225766, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),MediaType.Name))", "score": -0.34897479124435576, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3580228967949882, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Artist.Name))", "score": -0.36241256944096356, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3713939387866175, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.3733689298398131, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Album.Title))", "score": -0.3771815106170336, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),MediaType.Name))", "score": -0.37734072942025615, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.22614675521914349, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,!=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.24535918192598527, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.2589241701621846, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,!=,9593064),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.25980354548735984, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(filter(getData(Track),Artist.Name,!=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.27243693727037877, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(filter(getData(Genre),Artist.Name,!=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.2801967707477013, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(merge(filter(getData(Genre),Genre.Name,!=,9593064),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.28935959776143805, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,9593064),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.3127397233100628, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(filter(getData(Track),Genre.Name,!=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.3176464327093512, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3272865733017722, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,9593064),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.35305526369939455, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,!=,9593064),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,9593064),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.36318107372496006, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,!=,9593064),Track.UnitPrice),Artist.Name))", "score": -0.38510204682376215, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,!=,9593064),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Album.AlbumId),Album.Title,!=,9593064),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.39505638876976995, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,!=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.4070097514096879, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.37663500812413514, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.GenreId),Genre.Name,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.40494879260417355, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4147311790507071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.42246972966898244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.GenreId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4247268458104701, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.GenreId),MediaType.Name,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.42644880202901647, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4358082384145997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.43622390209025397, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.GenreId),Playlist.Name,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4399483299037406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4423100451043534, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4430449725294709, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4484542475214976, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.GenreId),Genre.Name,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.4530406300157878, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4622084199427691, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))", "score": -0.48105815933412605, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.1287459549712149, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1485880862260689, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21180873070724393, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2347157957013127, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2600623588037631, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2669634707237445, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27166441768575306, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2770296338588858, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Drama),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2815262520789725, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3066960296813791, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32927612918137267, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33399715069303343, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.3345117701216237, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3368853208373949, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3540412023513082, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.1355467968370764, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3698087643842775, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3711079862470572, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39138979916931216, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4393567638304391, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.44065598569321884, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45755378679305236, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4609377986154738, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.46996505686307455, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5024149609527425, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5054195298994839, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5067187568662718, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.5140380839374574, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5159731140604462, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5163523198168466, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.16860997334879357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Phone),Customer.LastName))", "score": -0.2433677952067228, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.Phone))", "score": -0.3650861832575174, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.PostalCode),Customer.LastName))", "score": -0.3685990612284513, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.FirstName))", "score": -0.4157107028440805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Phone),Customer.Phone))", "score": -0.43984400511544663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.FirstName),Customer.LastName))", "score": -0.45310604975384194, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Company),Customer.LastName))", "score": -0.45934033796947915, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Phone),Customer.FirstName))", "score": -0.49046852470200974, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Artist.ArtistId))", "score": -0.5180821272806497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.PostalCode))", "score": -0.559901222892222, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.562088840015349, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.PostalCode),Customer.Phone))", "score": -0.5650752711371752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.5730122256354662, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.5819796252326341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.14371287237827346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.22423910509769485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2843309507888989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.3648571835083203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.4298429430646138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.44824873909328744, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Track.Composer))", "score": -0.5187325419110493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,33000), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5287749718127088, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),InvoiceLine.Quantity))", "score": -0.5704610214752392, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Track.Composer),Invoice.BillingPostalCode))", "score": -0.579305873922749, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5888668175039129, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.612296218722804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6158466234055595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Customer.PostalCode))", "score": -0.618206137530251, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Track.Composer))", "score": -0.6593506203216748, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.03723226444890315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.328382014800809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.5128536150241416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.State))", "score": -0.5288216458084207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Email))", "score": -0.5362792001487833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.City))", "score": -0.5636273608924967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5694492753045779, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6075269873635989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Email),Customer.Address))", "score": -0.62550040338283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Company))", "score": -0.6381221996070963, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6486568744676333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6734339292543154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Fax))", "score": -0.6932424293281656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6939371521966677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Company),Customer.Address))", "score": -0.7070713863158744, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.12581951067841146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.Milliseconds))", "score": -0.28115423665440176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Fax))", "score": -0.29748750374710653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Title))", "score": -0.40115660698211286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Address),Employee.Title))", "score": -0.4289990094403038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.46206081182754133, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Email))", "score": -0.49792381272709463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.BirthDate))", "score": -0.5109862004319439, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,>=,AB), Employee.Title),Employee.Title))", "score": -0.5514926918694982, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.LastName))", "score": -0.5536801432172069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Track.Milliseconds),Employee.Title))", "score": -0.5558636811474571, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Track.Milliseconds))", "score": -0.5564913329581032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5728246000508079, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Address),Track.Milliseconds))", "score": -0.5843337354162941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.UnitPrice))", "score": -0.5963224981824169, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.19806132011035515, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.31715444393375947, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.3891716926536901, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.39278211362579896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,AB), Customer.Company),Customer.Company))", "score": -0.3949199645958288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.3984069480738981, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Invoice.BillingCountry),Customer.Company))", "score": -0.4242204195998056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.5082648164770944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Customer.Company),Customer.Company))", "score": -0.5140130884192331, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.5175000718973024, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.FirstName))", "score": -0.5379224076114042, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingCountry),Customer.Company))", "score": -0.5433135434232099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Country),Customer.Company))", "score": -0.5658659703276498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Employee.Country),Customer.Company))", "score": -0.5744499332449777, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.5838924861691339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.10663803242368886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3729448487083573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.439353901373579, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Employee.Country))", "score": -0.46455057285947987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4678284706942577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.Country))", "score": -0.5079302372805614, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5084425988070507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5222661201305527, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5223036589495678, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.FirstName))", "score": -0.527152437197401, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Employee.Country),Invoice.BillingCountry))", "score": -0.5320052126817245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.54137483280374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.5508818211428661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.5552143076829452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5602104102190424, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.40741477208496074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.City))", "score": -0.4970007964532096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.5507766041528157, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.5936336550485066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Fax))", "score": -0.5945213731266041, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.6329231295358113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.634942415691512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.6515098917852811, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.6718171942602567, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.6757801804315022, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6766017112504414, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Norway), Customer.Address),Customer.Address))", "score": -0.6881579789887837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.6896108496557645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,Norway), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.6934972438584737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are all non-Norwegian postal codes?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Artist.Name,=,Norway), Invoice.InvoiceDate),Customer.Address))", "score": -0.694366942680972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.25775295080211436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.2585354256775645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.25944423259761606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Artist.Name,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.38629374982383524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.4071453023102549, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.41346047402885233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5461966204788951, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5612955638539461, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5620780387293962, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5629868456494478, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.569574245750573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5703567206260232, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5712655275460747, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5737221050408152, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,United Kingdom), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6930712419098313, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,240325), Playlist.Name),Playlist.Name))", "score": -0.19270862502396155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,240325),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.20799364638403448, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.2528352218143738, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<,240325),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27403717390019333, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,240325),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2918746564768158, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,240325), Playlist.Name),Playlist.Name))", "score": -0.3042117158523296, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.30928260669945384, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Album.AlbumId),Track.Milliseconds,!=,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3258915665737385, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.32994750917826643, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,240325), Playlist.Name),Playlist.Name))", "score": -0.3337204305209591, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,240325),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33917408377973596, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Album.AlbumId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34380056070539783, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<,240325),getData(PlaylistTrack),Track.AlbumId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3530393073943644, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,240325), Playlist.Name),Playlist.Name))", "score": -0.3749380726641361, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<=,240325),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37934209188943974, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33102896640208135, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35152666752532374, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.37735394669996414, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3926469546274054, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.39610022175223836, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.399555472502419, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4026328119043215, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.406897557359417, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.41334182138270736, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.41405599956594535, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41428196177308335, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41560885910791123, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41835429371722593, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41924327623425484, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.42853257768573777, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Address),Customer.Country))", "score": -0.3004194690684514, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.Country))", "score": -0.3265250538341198, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.3326520505980146, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Address),Customer.Address))", "score": -0.33265622822166446, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Country),Customer.Country))", "score": -0.34131336309933086, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Country))", "score": -0.35875763536368294, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.Address))", "score": -0.35876181298733284, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Address),Customer.Company))", "score": -0.3611530971689117, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.36488880975122767, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Country))", "score": -0.36531737129132474, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Country))", "score": -0.3696817623665967, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Address),Customer.Country))", "score": -0.41083390262620195, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Address),Customer.Country))", "score": -0.42562215850602386, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.Country))", "score": -0.4321878745733511, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.4361241294192209, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),Customer.Email))", "score": -0.45218893952937833, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),Customer.Address))", "score": -0.4791980094489645, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),Customer.Fax))", "score": -0.48378963835807554, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),MediaType.Name))", "score": -0.48707005448909513, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Customer.Email))", "score": -0.5081811852035116, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Customer.Address))", "score": -0.5351902551230978, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Customer.Fax))", "score": -0.5397818840322088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),MediaType.Name))", "score": -0.5430623001632284, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Email),Customer.Email))", "score": -0.5757617510137152, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Email),Customer.Address))", "score": -0.6027708209333014, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),Customer.Company))", "score": -0.6041129387197088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Email),Customer.Fax))", "score": -0.6073624498424124, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Email),MediaType.Name))", "score": -0.610642865973432, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Fax),Customer.Email))", "score": -0.620606974440534, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Customer.Address),Customer.Email))", "score": -0.6235609433826994, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.22127208325117498, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.2282139068284281, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.24336218759723102, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.25890044703606163, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2642729527310654, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.26798414000578036, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.2721253016934844, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.2994896023734643, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Invoice.Total),Track.Milliseconds))", "score": -0.3209414074261607, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.3302359618766014, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.3462016591280696, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Album),Track.AlbumId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3588625404892513, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Invoice.Total),Track.Bytes))", "score": -0.367653464180766, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Album),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3683985401734192, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.36991060367080947, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.14387130472779208, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.18991860854405487, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20858448956111086, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21257001871655462, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2185927282847526, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23104570177131914, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24137080713548786, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24167708957196432, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24560725972141942, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27287632163594094, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27329619012282286, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28522673930161896, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28603224775570163, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,None), None),None))", "score": -0.2930853037131789, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.309737459166009, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.08777234737681283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.22935814444826974, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.34247144532309903, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Track.Bytes))", "score": -0.3562997210483445, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.4628637958030595, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.48405724239455594, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Milliseconds),Track.Bytes))", "score": -0.5351852494004561, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.5413284249316348, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Milliseconds))", "score": -0.5664307292263402, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.607259086250064, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,1.99), Track.Bytes),Track.Bytes))", "score": -0.6109988189946307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6250258418212501, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.631739228757345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.6375099358028765, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6495059843285312, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.02952303314850724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6900619), Track.Name),Track.Name))", "score": -0.35988987932250893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Milliseconds),Track.Name))", "score": -0.429016631527702, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,6900619), Track.Name),Track.Name))", "score": -0.5119455302719871, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,6900619), Track.Name),Track.Name))", "score": -0.582213524461622, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,6900619), Track.Name),Track.Name))", "score": -0.5964049135454843, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Bytes),Track.Name))", "score": -0.6261506494720379, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Genre.Name))", "score": -0.647906737833182, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Genre.Name),Track.Name))", "score": -0.6854432043273846, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Bytes))", "score": -0.6988288336087862, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.7102482760910789, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Employee.Title),Track.Name))", "score": -0.7111716684539715, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Milliseconds))", "score": -0.7187899523069063, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Employee.LastName),Track.Name))", "score": -0.7247695144851605, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Employee.LastName))", "score": -0.751449959783713, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.25865760312171915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Invoice.BillingCountry))", "score": -0.30856206134649256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Porto), Employee.Country),Employee.Country))", "score": -0.36258449272008875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Customer.Country))", "score": -0.3668490858444784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Porto), Employee.Country),Employee.Country))", "score": -0.4122040034899328, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Porto), Employee.Country),Invoice.BillingCountry))", "score": -0.41248895094486215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Porto), Employee.Country),Invoice.BillingCountry))", "score": -0.4621084617147062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Porto), Employee.Country),Customer.Country))", "score": -0.470775975442848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Porto), Employee.Country),Employee.Country))", "score": -0.4744654358992193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Porto), Employee.Country),Employee.Country))", "score": -0.49608430878015497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Invoice.BillingCountry),Employee.Country))", "score": -0.5036443868348215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Employee.FirstName))", "score": -0.5121652247080419, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Porto), Employee.Country),Customer.Country))", "score": -0.520395486212692, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Porto), Employee.Country),Invoice.BillingCountry))", "score": -0.5243698941239927, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Porto), Employee.Country),Invoice.BillingCountry))", "score": -0.5459887670049284, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.11269751069085032, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Album.Title))", "score": -0.2910180340422812, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Employee.Title),Track.Name))", "score": -0.3508916149748984, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Milliseconds),Track.Name))", "score": -0.35428526502983004, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Employee.Title))", "score": -0.450886155189437, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Employee.LastName),Track.Name))", "score": -0.4910082469596091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,5264376), Track.Name),Track.Name))", "score": -0.4996881794086221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Employee.LastName))", "score": -0.5019498716010276, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Bytes))", "score": -0.5144502173079673, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Employee.Title),Album.Title))", "score": -0.5292121383263293, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Milliseconds),Album.Title))", "score": -0.5326057883812609, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Genre.Name),Track.Name))", "score": -0.5605835567130271, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Composer),Track.Name))", "score": -0.5659425507201377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Artist.Name))", "score": -0.5805251846923056, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,5264376),merge(getData(Track),getData(Album),Album.ArtistId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.5857820215653836, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.0420423266114085, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.City),Employee.PostalCode))", "score": -0.4267603852422326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.43689515065489104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.46438929108990123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Artist.Name))", "score": -0.48032670511020115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.City))", "score": -0.49271120919001987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Customer.PostalCode))", "score": -0.547344141137728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.5800645877243369, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5827528801382869, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Phone))", "score": -0.5831898976684897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.6027905312002986, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.6311003532828181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6454990435959189, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Artist.Name),Employee.PostalCode))", "score": -0.6955442227990716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Title),Employee.PostalCode))", "score": -0.7067900695474236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))", "score": -0.049280034201728995, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.Country),Customer.State))", "score": -0.41538427566229075, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Employee.State))", "score": -0.4174248835170147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.Country))", "score": -0.4254903754317638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Invoice.BillingState))", "score": -0.5499567648494121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.Address))", "score": -0.5774271151149151, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.Address),Customer.State))", "score": -0.6159115860336897, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Sullivan), Customer.State),Customer.State))", "score": -0.6379924368211505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Employee.State),Customer.State))", "score": -0.6422977278107282, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Sullivan), Customer.State),Customer.State))", "score": -0.663062090809035, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Employee.HireDate))", "score": -0.6643039843165752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.6749831523730606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Invoice.BillingState),Customer.State))", "score": -0.6954276392334577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),filter(getData(Employee),Customer.LastName,!=,Sullivan),Employee.EmployeeId,Invoice.CustomerId), Customer.State),Customer.State))", "score": -0.704170076127966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),filter(getData(Employee),Customer.LastName,!=,Sullivan),Employee.EmployeeId,Invoice.CustomerId), Customer.Address),Customer.State))", "score": -0.7746107579194359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Name))", "score": -0.0777139257206727, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.15452512014053355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,232202), Track.Name),Track.Name))", "score": -0.42981623518608103, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Genre.Name))", "score": -0.43544489736996184, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Genre.Name))", "score": -0.5122560917898227, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,232202), Track.Name),Track.Name))", "score": -0.5769037197842408, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Album.Title))", "score": -0.591005301432233, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Album.Title))", "score": -0.6678164958520938, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Genre.Name),Track.Name))", "score": -0.676465457168888, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,232202), Track.Name),Track.Name))", "score": -0.6890358518376161, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Genre.Name),Track.Name))", "score": -0.7532766515887488, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,232202), Track.Name),Track.Name))", "score": -0.7554121742523421, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Employee.LastName))", "score": -0.7589982509180118, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Milliseconds))", "score": -0.7592206954523135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,null,232202), Track.Name),Track.Name))", "score": -0.7647107433094789, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.23266061662980064, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.3435553115541552, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Track.Composer,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.3665302050048922, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),InvoiceLine.Quantity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40665981958319625, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.44785414158650383, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.ArtistId),InvoiceLine.Quantity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4500758827446091, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Invoice.BillingCity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45184142493628016, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4632431166764159, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4753839996392344, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.48066098510571464, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.49015401987419904, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.ArtistId),Invoice.BillingCity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.49525752384347205, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Customer.PostalCode,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5035095605319787, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),InvoiceLine.Quantity,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.505125566628146, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5301483374769305, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19296880686563006, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2085300586964886, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21518401185918268, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2168282277716672, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2196276243498664, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.Total),Invoice.Total))", "score": -0.22126274307172686, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.22239425635655954, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22534296282861163, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23125132250993288, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23360537787567612, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23553366311953897, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24057145598661464, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2497633886920139, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2608297181610998, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.26119233600678843, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.State))", "score": -0.17542889031028608, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Customer.State))", "score": -0.2675558558330522, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,None), Customer.State),Customer.State))", "score": -0.28503384502982954, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.State))", "score": -0.3777144296691404, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Country))", "score": -0.3831186487004743, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Country),Customer.State))", "score": -0.4698413951919065, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Customer.Country))", "score": -0.4752456142232404, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,None), Customer.Country),Customer.State))", "score": -0.48731938438868383, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.488824395966736, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,None), Customer.State),Customer.Country))", "score": -0.49272360342001775, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,None), Customer.State),Customer.State))", "score": -0.5410086146221147, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Address),Customer.State))", "score": -0.5762347324416623, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.5854041880593286, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Employee.State),Customer.State))", "score": -0.6061573966071592, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Address))", "score": -0.6146574212834821, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.06821566156213521, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.17679708532159566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.40963585010831594, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5770475350982451, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5814278804427886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5941127025253081, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.State),Customer.Country))", "score": -0.6120784071936214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Company),Customer.Country))", "score": -0.645106234933337, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6524179064399505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.FirstName))", "score": -0.6639823411787802, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.State))", "score": -0.6641807054365927, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Address),Customer.Country))", "score": -0.7118643907560909, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,jacksmith@microsoft.com), Customer.State),Customer.Country))", "score": -0.7206598309530818, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.7403807722694182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.7408121310836577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.07923498158243092, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.27637435276892575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.37746478398230465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.Country))", "score": -0.38500967402842434, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.4127460845270434, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.45960606415656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.49865276892569455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.Phone))", "score": -0.5503338851490298, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.5551395543375293, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Country),Customer.Company))", "score": -0.5614183155344108, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.577097428635625, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Country))", "score": -0.5821490452149192, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.FirstName))", "score": -0.586284992889432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.City))", "score": -0.6449270226517001, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.PostalCode))", "score": -0.6706703283348361, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1132703452504493, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1324391944741049, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.16536528577505463, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16950781189329048, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1895839961420612, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20256868144045329, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.219447863070699, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22852293643500218, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.23747281477130017, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.23861988348053106, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.24050628379967146, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24230496573441265, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.24822341306866805, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2599196459971247, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.27363175174001186, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.11257611193126763, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15659920050137738, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2289812389978672, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.24187694886461036, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.263579298025906, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.2863437149390822, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2872887077335273, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28780971971521535, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2909415109469767, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29322130260369006, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2944415486698139, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.3093635465058306, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3219044147784194, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33598111923808405, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),InvoiceLine.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3393211671472862, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.11943652396746643, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Email))", "score": -0.4894218370820456, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.4915730880944062, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Phone))", "score": -0.5013273167539852, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Email))", "score": -0.5502426978158298, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Email))", "score": -0.5626860358810373, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6700568336095104, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Email))", "score": -0.6859605014030696, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.7054203284960623, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Email))", "score": -0.7436032268611268, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Email))", "score": -0.7505363497869145, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.7515457111805366, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.7579509938573544, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), MediaType.Name),Customer.Email))", "score": -0.8156366704232413, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),MediaType.Name))", "score": -0.8392041283170918, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.1815214675734751, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.23268812120659277, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3253796619246714, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Artist.Name),Customer.PostalCode))", "score": -0.3528931510518305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37654631555778906, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Artist.Name),Invoice.BillingPostalCode))", "score": -0.4040598046849482, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.4287813631304626, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.4588750002437601, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.464831022254657, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.5124442537198775, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5159976758877747, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.527838435207489, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5350312842691778, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Artist.Name))", "score": -0.5582860630820505, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5636109073529951, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17995691972782346, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.1940281576086404, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2086670778485836, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,5194092), Playlist.Name),Playlist.Name))", "score": -0.2202168296824245, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2236249952418274, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092), Playlist.Name),Playlist.Name))", "score": -0.23445042318125806, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25084577072449776, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2855889239782038, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29972717912869534, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30003125689499516, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.31149157526594834, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3141662038794602, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,5194092), Playlist.Name),Playlist.Name))", "score": -0.3183235369617343, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.328990529475924, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.347941918456394, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.11277851263821503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2710954899603166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3940050395840444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4658388252073564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4673405642324724, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4721652025991716, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47804341266692063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,USA), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.501611424487237, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,USA), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.5340920219832697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.552322016906146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5738106424623766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5867268833035268, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5898954922968187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5948246176058092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Playlist.Name,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6102525592950769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Invoice.InvoiceDate),Track.Bytes))", "score": -0.25759518877748633, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Invoice.InvoiceDate),Track.Bytes))", "score": -0.27101410166505957, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Employee.BirthDate),Track.Bytes))", "score": -0.41883648918155814, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4267158618677058, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Employee.BirthDate),Track.Bytes))", "score": -0.4322554020691314, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.44013477475527907, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.44918298707489157, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.4626018999624648, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Customer.State),Track.Bytes))", "score": -0.5756639836836257, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,1.99), Invoice.InvoiceDate),Track.Bytes))", "score": -0.5760381294894614, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Employee.BirthDate),Employee.BirthDate))", "score": -0.5879571622717776, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Customer.State),Track.Bytes))", "score": -0.5890828965711989, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,1.99), Invoice.InvoiceDate),Track.Bytes))", "score": -0.5894570423770347, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.5978782175589004, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Employee.BirthDate),Employee.BirthDate))", "score": -0.6013760751593509, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.12268047777070024, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.25191904965521056, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.2874962724472425, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.294391425334621, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3097141093704638, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3521864850498742, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.354062905256011, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.36597576980539137, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3850550426714856, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3875726390540241, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3948778514578875, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.4013136066223524, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.41254897294037995, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.41856478643731765, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.4197363238508842, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.23011629885513685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Milliseconds))", "score": -0.26898044204790494, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Name),Track.Bytes))", "score": -0.32545416659195325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Name))", "score": -0.3571216449745407, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Name),Track.Milliseconds))", "score": -0.36431830978472135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Milliseconds),Track.Bytes))", "score": -0.37737912541706464, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,291866), Track.Bytes),Track.Bytes))", "score": -0.4081227727838268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Milliseconds),Track.Milliseconds))", "score": -0.41624326860983274, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,291866), Track.Bytes),Track.Milliseconds))", "score": -0.4469869159765949, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Name),Track.Name))", "score": -0.4524595127113571, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,291866), Track.Name),Track.Bytes))", "score": -0.5034606405206432, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Milliseconds),Track.Name))", "score": -0.5043844715364685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,291866), Track.Bytes),Track.Name))", "score": -0.5351281189032306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,291866), Track.Name),Track.Milliseconds))", "score": -0.5423247837134113, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,!=,291866),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.MediaTypeId), Track.Bytes),Track.Milliseconds))", "score": -0.6356931062302509, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.19426387024754968, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.20533795975950733, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23390346039950025, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2349829761557373, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.24911674314104554, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.25574939630042115, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.26429706773650957, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,R&B/Soul),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2706149294758165, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R&B/Soul), Genre.Name),Genre.Name))", "score": -0.2892867582758698, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.30796153991684644, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,R&B/Soul),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R&B/Soul), Genre.Name),Genre.Name))", "score": -0.31840119328599553, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard), Genre.Name),Genre.Name))", "score": -0.3194922401499547, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3225773045735985, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.33755099093212376, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}, {"orig_question": "How many R&B/Soul albums were produced by Dean Brown, Dennis Chambers & Jim Beard?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R&B/Soul),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Dean Brown, Dennis Chambers & Jim Beard), Genre.Name),Genre.Name))", "score": -0.3522854249429759, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Dean Brown, Dennis Chambers & Jim Beard), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.034620612030266784, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Track.UnitPrice))", "score": -0.41926571271324065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.4322899217804661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.45162757589423563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.BirthDate),Employee.BirthDate))", "score": -0.5042250750630654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5310194609339959, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5459278359003296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.5602880372753134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Track.UnitPrice),Employee.BirthDate))", "score": -0.5621935130184283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5794978077610722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5902061555399195, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5914142506147259, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6033697309079462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.6172501092067758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birth dates of the employees that are not Sales Manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.629779153605341, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.12769384430194347, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.1701992087217271, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.19271248016268544, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.19366104248799182, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19930614456613238, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,6854313),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22286488493698556, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.23927708851014506, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2874949535933243, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.29999684140671207, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.3045878175295347, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),Customer.SupportRepId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3236154002928458, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.33176400553671664, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.33400088773724673, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),InvoiceLine.InvoiceId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.33801317446723494, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3615755057845592, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Country))", "score": -0.29090776122757234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.State))", "score": -0.31355158067890443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.State),Employee.Country))", "score": -0.3661332336778287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.State),Employee.State))", "score": -0.3887770531291608, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Address))", "score": -0.38920459724613465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Email))", "score": -0.3945723978395108, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Country))", "score": -0.419330855977023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.State))", "score": -0.4419746754283551, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Country))", "score": -0.46081334925838746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.State),Employee.Address))", "score": -0.464430069696391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.State),Employee.Email))", "score": -0.46979787028976716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Title))", "score": -0.47929491676040925, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.State))", "score": -0.48345716870971955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Country))", "score": -0.4923180399055127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.State))", "score": -0.5149618593568448, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.09536085853382276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.12078676143058338, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.17076076934482567, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.19823602678239377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.20326306971638822, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2299220098406107, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23770176124550327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.25266484370580133, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2680788764962399, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2728417338323542, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.2744973225815536, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.28432670202350874, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.31538777327879, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Genre.Name),Genre.Name))", "score": -0.3162789968407282, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre name for the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3220932784299395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.17192773684205112, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1911089702149836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.22567327240262672, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31415833191906634, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.31673786832948275, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.31674209884687254, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32872462744983094, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.33228041781627343, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33591910170241523, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3406174309206078, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3482458268140698, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3484537231598872, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35694280088797126, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.3571422117637383, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35979866429354024, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.22040402787638413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.InvoiceDate))", "score": -0.31232416528177964, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3368134488434862, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total))", "score": -0.39346910352719533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.42043435471964585, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-05-06 00:00:00), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4287335862488817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.4621629704804491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.4781604846091341, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48538924093259084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.505148684024789, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5098785244942974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5123544921250414, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,2009-05-06 00:00:00), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5540831078858446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.5583946694703172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total))", "score": -0.593499430370457, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.07880794711942851, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.524990266018069, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.6480744693574328, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Phone),Customer.Phone))", "score": -0.6678651015445212, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.6905834490666245, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Phone),Customer.Phone))", "score": -0.7469281743451575, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.7817511268470604, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.8376608313931032, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Phone),Customer.Phone)", "score": -0.9437111445133961, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.9494239734170199, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Album.Title))", "score": -0.9596866211241358, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Phone))", "score": -0.972404013037829, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.City))", "score": -0.9809966862214063, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.9818869071400541, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are all the customer phone numbers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Phone),Customer.Country)", "score": -1.002109249589477, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.FirstName))", "score": -0.38030058275307965, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.Title))", "score": -0.39215207229699445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.Title),Employee.FirstName))", "score": -0.41598266492928815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.Title),Employee.Title))", "score": -0.42783415447320294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.LastName))", "score": -0.4283615959748204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.Title),Employee.LastName))", "score": -0.46404367815102887, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.LastName),Employee.FirstName))", "score": -0.4692974774106915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))", "score": -0.4764197407230313, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.LastName),Employee.Title))", "score": -0.4811489669546063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.Title))", "score": -0.4882712302669461, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.LastName),Employee.FirstName))", "score": -0.5049795595869, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.FirstName),Employee.FirstName))", "score": -0.5121018228992398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.LastName),Employee.Title))", "score": -0.5168310491308148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.LastName),Employee.LastName))", "score": -0.5173584906324322, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,General Manager), Employee.FirstName),Employee.Title))", "score": -0.5239533124431546, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,221910),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.1607992665448473, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,221910),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.21288928248785027, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,221910),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23388940548846557, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2438182294684787, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,221910),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Milliseconds,>=,221910), Genre.Name),Genre.Name))", "score": -0.2631940655375456, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2737344627597445, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.27738102928175506, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Milliseconds,>=,221910), Genre.Name),Genre.Name))", "score": -0.2808635370572867, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,221910),merge(getData(Album),getData(Track),Album.AlbumId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.30292471192182513, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,221910),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds,=,221910), Genre.Name),Genre.Name))", "score": -0.3100084882047253, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,221910),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,>=,221910), Genre.Name),Genre.Name))", "score": -0.3114701732597631, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Milliseconds,>,221910), Genre.Name),Genre.Name))", "score": -0.3270236220804661, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,=,221910), Genre.Name),Genre.Name))", "score": -0.3333547951496207, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,English Renaissance),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,>,221910), Genre.Name),Genre.Name))", "score": -0.3412997470369577, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}, {"orig_question": "Of how may different genre are tracks from the artist English Renaissance that are longer than 221910 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,221910),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,=,221910), Genre.Name),Genre.Name))", "score": -0.34304284554247205, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,>,221910),Album.Title,=,English Renaissance), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.07144190819599316, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.24361249135472463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.Country),Employee.State))", "score": -0.3837655855495541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.4266238443706243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Country))", "score": -0.4556856470335333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5299465291354863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5522864096019475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,11120 Jasper Ave NW), Employee.Country),Employee.State))", "score": -0.5559361687082855, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5685641400668828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5784547560069768, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5986150138232915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.HireDate))", "score": -0.6168431358564703, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,11120 Jasper Ave NW), Employee.State),Employee.Country))", "score": -0.6278562301922648, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.Address),Employee.State))", "score": -0.6386976314861386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Address))", "score": -0.6506747918356268, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.40377542631821767, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41221427537482164, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.44304992489377354, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4514887739503775, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.4643218609474165, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4727607100040205, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.498359293319979, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5035963595229723, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.506798142376583, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5120352085795763, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.5132277975048357, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.5143365632738227, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.5161976735115487, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.5292446891817219, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.5461261117091561, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.10684899872182126, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.13770620633914762, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14126650352660125, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15574274868228755, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17983568070603087, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.19240190386790396, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20002004571048307, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.266093965610006, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29333828719615224, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.30096621160618986, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),Album.Title))", "score": -0.3012679219218042, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3023162642369748, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3073707403802464, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Album.Title))", "score": -0.32763027486799157, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.34622282520840225, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.13842788927953073, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.1418013560099096, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.14700015356561477, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.15279271709283382, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.15288638021082365, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),MediaType.Name),MediaType.Name))", "score": -0.3220823937484781, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),MediaType.Name),MediaType.Name))", "score": -0.3401176727701818, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),Track.Bytes),MediaType.Name))", "score": -0.3524389475904653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3886527735987774, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.39793296853408683, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Bytes),MediaType.Name))", "score": -0.4009847721806347, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.40612506170573476, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),Track.Name),MediaType.Name))", "score": -0.41860940510509753, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4330997724727913, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Name),MediaType.Name))", "score": -0.43724672723570507, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.07523923696425629, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15027132924548237, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.16957046447170804, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.1719751333646942, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.20257785816040164, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.21702967752804173, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2268710661625304, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.23835066380765985, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.25451716086293225, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2583683888485563, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2626947772363683, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.26510399180502836, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26845278063090366, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.277277007212401, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2934125341022319, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.08854098858909186, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26500777648048324, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,1),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2703267075376234, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.27430958563816493, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.2974943901452011, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.3021396293333908, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.3051002773102698, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,1),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3135154814359304, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.3211435950152038, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Composer,=,1),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32142870691456693, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.32144930462761623, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId),Genre.Name,=,1),Track.Milliseconds),Album.Title))", "score": -0.3257777617022741, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3262867135594824, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,1),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3391478628279525, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,1),Track.Milliseconds),Album.Title))", "score": -0.3416070983431156, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.04767394176815287, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.3025662453765108, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,560001), Customer.City),Customer.City))", "score": -0.3923418607482745, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.4912947515877022, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,560001), Customer.City),Customer.City))", "score": -0.5176823224792315, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,560001), Customer.City),Customer.City))", "score": -0.5290091123351885, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.BillingCity),Customer.City))", "score": -0.5708903313534393, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,560001), Customer.City),Customer.City))", "score": -0.5954698409805133, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.Fax),Customer.City))", "score": -0.5976820231335296, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.6472341643566324, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),InvoiceLine.Quantity))", "score": -0.6566402792850567, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.InvoiceDate),Customer.City))", "score": -0.6674621344463958, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.6861733283767535, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.Fax))", "score": -0.6877402543941571, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,560001), Customer.City),Customer.City))", "score": -0.7083444375930412, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Track),Track.AlbumId,Album.AlbumId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.4796466238936738, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.AlbumId,Album.AlbumId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.48786938337487235, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Track),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,296829), Album.Title),Album.Title))", "score": -0.4896587087586822, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,296829), Album.Title),Album.Title))", "score": -0.4978814682398808, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Track),Track.AlbumId,Track.TrackId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.5291460195003753, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.5300917971675423, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),MediaType.Name,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.5359505600216687, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.AlbumId,Track.TrackId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.5373688055624243, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,296829), Album.Title),Album.Title))", "score": -0.5383145832295912, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Track),Track.AlbumId,Track.TrackId),Track.Milliseconds,=,296829), Album.Title),Album.Title))", "score": -0.5391581686024388, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.540613239889373, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.5511234809013128, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),Track.Composer,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.5557861818121902, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),MediaType.Name,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5662722220674032, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,296829),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5709349019351075, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Jane), Employee.Title),Employee.Title))", "score": -0.1943158108915668, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.Title))", "score": -0.36778935344773345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Jane), Employee.Title),Employee.Title))", "score": -0.38080603402048935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Artist),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,Jane), Employee.Title),Employee.Title))", "score": -0.42767143166950516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Jane), Employee.Title),Employee.Title))", "score": -0.42880762109416537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Jane), Employee.Title),Employee.Title))", "score": -0.4407203246082645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Jane), Employee.Title),Employee.Title))", "score": -0.4591602141548158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Jane), Employee.Title),Employee.Fax))", "score": -0.46147432664292865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Jane), Employee.Title),Employee.BirthDate))", "score": -0.4634510550822597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))", "score": -0.46820358650892935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Artist),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))", "score": -0.4865368835349254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Album),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,Jane), Employee.Title),Employee.Title))", "score": -0.4924913822413198, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Artist),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,Jane), Employee.Title),Employee.Title))", "score": -0.4949161205088219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Artist),Customer.SupportRepId,Employee.EmployeeId),Employee.Country,=,Jane), Employee.Title),Employee.Title))", "score": -0.5080568615997552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Artist),Customer.SupportRepId,Employee.EmployeeId),Employee.Title,=,Jane), Employee.Title),Employee.Title))", "score": -0.5101624752351468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
