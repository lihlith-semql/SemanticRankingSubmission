{"index": 0, "beams": [{"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "score": -0.11554631050967146, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_day))", "score": -0.21028771456622053, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.birth_day))", "score": -0.3441745305462973, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.death_day))", "score": -0.4389159346028464, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_place),person.birth_day))", "score": -0.48474153522693086, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),movie.release_date))", "score": -0.5367575084819691, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1998-05-14), person.birth_day),person.birth_day))", "score": -0.5432967387168901, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_place),person.death_day))", "score": -0.5794829392834799, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1998-05-14), person.birth_day),person.birth_day))", "score": -0.5939864955871599, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),movie.runtime))", "score": -0.6198922192706959, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1998-05-14), person.birth_day),person.death_day))", "score": -0.6380381427734392, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), movie.release_date),person.birth_day))", "score": -0.6426920855446951, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.name),person.birth_day))", "score": -0.6436921918793814, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1998-05-14), person.birth_day),person.birth_day))", "score": -0.6471975587337511, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_place))", "score": -0.6563885008945363, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.13629969488229757, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.1407087845771858, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.number))", "score": -0.22509025892073897, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.number))", "score": -0.2294993486156272, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.sub_category),oscar.category))", "score": -0.2691665917786894, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.2755732805999593, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), person.birth_place),oscar.category))", "score": -0.3170009939291881, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.sub_category),oscar.number))", "score": -0.35795715581713083, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.sub_category))", "score": -0.36168262148162905, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.sub_category))", "score": -0.3660917111765173, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),person.birth_place))", "score": -0.3698553823832811, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),person.death_day,>=,2000-05-26),oscar.id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.37327514687550484, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),person.birth_place))", "score": -0.3742644720781694, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),person.death_day,>=,2000-05-26),oscar.id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.37859671526382666, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),person.death_day,>=,2000-05-26),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.3802651611936401, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "score": -0.008776265360211255, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.budget))", "score": -0.5895766393987287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.release_date))", "score": -0.6526381656767626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.release_date))", "score": -0.7049581691862841, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.popularity))", "score": -0.7537622229901899, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), person.birth_day),movie.release_date))", "score": -0.7604950949789782, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.release_date))", "score": -0.7624985859038134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.release_date),movie.release_date))", "score": -0.7633138674318616, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.release_date))", "score": -0.7704995557905931, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.release_date),movie.release_date))", "score": -0.8328121679842297, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),person.birth_day))", "score": -0.8394750134793867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.runtime))", "score": -0.8456451074926008, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), crew.movie_id),movie.release_date))", "score": -0.8502555176855822, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.status),movie.release_date))", "score": -0.8518606111647387, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.title))", "score": -0.8588163630811323, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.12686324282330028, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.15850626915156651, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "score": -0.20985616153906336, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.23886918186894257, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.2779681605337604, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "score": -0.2902190742564394, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "score": -0.29210729455066137, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.30939667997493764, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,oscar.id), movie.title),movie.title))", "score": -0.33219925257614286, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.runtime),movie.title))", "score": -0.3527802783847598, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3532442368832704, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,oscar.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.35845007818424107, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.title))", "score": -0.37051596094186307, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.37216258235371863, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.40584934635991127, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))", "score": -0.02184014996237238, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>=,140000000), movie.original_language),movie.original_language))", "score": -0.3433335083136626, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,!=,140000000), movie.original_language),movie.original_language))", "score": -0.5800639050612517, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.budget))", "score": -0.7099802495977201, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.revenue),movie.original_language))", "score": -0.7172213662015565, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.title))", "score": -0.7197923066160001, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.popularity),movie.original_language))", "score": -0.7462168205129274, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), language.name),movie.original_language))", "score": -0.760528610979236, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),genre.name))", "score": -0.7744072677633085, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),language.name))", "score": -0.7783412935277738, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,>,140000000), movie.original_language),movie.original_language))", "score": -0.7787859732816287, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,>,140000000), movie.original_language),movie.original_language))", "score": -0.7843121583173343, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,<,140000000), movie.original_language),movie.original_language))", "score": -0.8012136476645537, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,140000000), movie.original_language),movie.original_language))", "score": -0.8046950990865298, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}, {"orig_question": "How many original languages of movies are there for a movie budget over 140000000?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.budget),movie.original_language))", "score": -0.8070122468816407, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,>,140000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.06193931815500452, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.19144872401497923, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Paramount Pictures), movie.id),movie.vote_count)", "score": -0.21557869842855096, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.title),movie.vote_count)", "score": -0.3268572880105122, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_average),movie.vote_count)", "score": -0.3383655605138632, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id),merge(getData(movie),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.37842709166064376, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.vote_count)", "score": -0.3802821613661627, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.38237828987983, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Paramount Pictures), movie.vote_count),movie.vote_count)", "score": -0.3931956350344518, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(merge(filter(getData(company),company.name,=,Paramount Pictures),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.4099436093290781, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(production_company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.41721877880772357, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.42715159783537604, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.movie_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.4306391257476962, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.4313844259193041, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.id,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.4381984986292583, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))", "score": -0.009347780665848404, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,83), movie.original_language),movie.original_language))", "score": -0.43604368629166856, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),language.name))", "score": -0.7643285458325408, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,83), movie.original_language),movie.original_language))", "score": -0.8039724594564177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.popularity),movie.original_language))", "score": -0.8240645520272665, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,83), movie.original_language),movie.original_language))", "score": -0.8266675602062605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), language.name),movie.original_language))", "score": -0.8385285131516866, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,83), movie.original_language),movie.original_language))", "score": -0.838725007197354, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.title))", "score": -0.8525551622151397, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.revenue))", "score": -0.8651352589367889, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.budget),movie.original_language))", "score": -0.8668750516953878, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.budget))", "score": -0.8674079840420745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.revenue),movie.original_language))", "score": -0.8818151347222738, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,83), movie.original_language),movie.original_language))", "score": -0.8927125464542769, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}, {"orig_question": "What original languages do movies with a runtime of less than 83 minutes have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.vote_count))", "score": -0.8978350227116607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,83), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.name))", "score": -0.13899519720871467, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.name))", "score": -0.23333427363832016, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.birth_place))", "score": -0.3293232662399532, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_day),person.name))", "score": -0.37288357930083293, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.birth_place))", "score": -0.4236623426695587, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.birth_day),person.name))", "score": -0.4672226557304384, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.birth_day))", "score": -0.4675371987541439, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_place),person.name))", "score": -0.48254193978209514, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Zehner, Saskatchewan), person.name),person.name))", "score": -0.514148101749015, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.name),person.death_day))", "score": -0.5411531669815304, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.birth_day))", "score": -0.5618762751837494, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Zehner, Saskatchewan), person.birth_day),person.birth_place))", "score": -0.5632116483320715, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.birth_place),person.name))", "score": -0.5768810162117006, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Zehner, Saskatchewan), person.name),person.name))", "score": -0.6354713296314003, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}, {"orig_question": "Who was born in Zehner, Saskatchewan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan), person.name),person.death_day))", "score": -0.6354922434111359, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Zehner, Saskatchewan),person.name), person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.15564484917962554, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "score": -0.2410430565553383, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24446433442059456, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.2794487877694186, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(language),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.2843131258884642, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,=,ps), genre.name),genre.name))", "score": -0.32031044838498635, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,ps), genre.name),genre.name))", "score": -0.34534140481131775, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "score": -0.3561898898253832, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(language),language.name,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),language.name,=,ps), genre.name),genre.name))", "score": -0.3610542279444288, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.3856142946033731, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(language),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.3904785993235995, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,<,ps), genre.name),genre.name))", "score": -0.39104138239764913, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps), genre.name),genre.name))", "score": -0.3920331748394134, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,ps),genre.name), genre.name))", "score": -0.39743281763093846, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}, {"orig_question": "Are there genres that for portuguese speaking movies?", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(movie),movie.original_language,=,ps),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name), genre.name))", "score": -0.39998375247830725, "correct_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,ps),genre.name), genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.022317040637409878, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,nl),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3064580475560121, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,nl), country.name),country.name))", "score": -0.3122793317612772, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.33079040192506154, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "score": -0.38195689918166087, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.38540067871450173, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.category))", "score": -0.3886779912417569, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),movie.status))", "score": -0.3889858683713125, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), movie.status),country.name))", "score": -0.3967346533573202, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.sub_category))", "score": -0.3992497979332959, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))", "score": -0.41568956152184394, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),oscar_winner.oscar_id,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4176117981455779, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4180282539648592, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.42000985739827873, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced in which the original language is nl?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nl),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.movie_id))", "score": -0.4236536412171245, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,nl), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.07702952258841833, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,m), person.birth_day),person.birth_day))", "score": -0.23375814788596472, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>,m), person.birth_day),person.birth_day))", "score": -0.504768780512677, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.6159326281485846, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_day),person.birth_day))", "score": -0.6445585152468993, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.popularity,!=,m), person.birth_day),person.birth_day))", "score": -0.6601229571606382, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,m), person.birth_day),person.birth_day))", "score": -0.6614974058102234, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,m), person.birth_day),person.birth_day))", "score": -0.6856692694927915, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),movie.release_date))", "score": -0.6941490718963905, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>=,m), person.birth_day),person.birth_day))", "score": -0.7112628734539612, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.death_day))", "score": -0.7254978963974281, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.birth_day))", "score": -0.7404711163471802, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,m),person.birth_day), person.birth_day))", "score": -0.7494866173801711, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.7611357391870115, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birthdays of all non male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),movie.runtime))", "score": -0.7663646289947792, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.0400020074133087, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,17500000), genre.name),genre.name))", "score": -0.23693248055882632, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,!=,17500000), genre.name),genre.name))", "score": -0.25446889534098704, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,!=,17500000), genre.name),genre.name))", "score": -0.27717046552596847, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,17500000), genre.name),genre.name))", "score": -0.2789522508085566, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.30360493543015227, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),genre.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.3090698580343271, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.34471459619130623, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),person.death_place))", "score": -0.36501351666610465, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>,17500000), genre.name),genre.name))", "score": -0.3721247791994092, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.revenue,!=,17500000), genre.name),genre.name))", "score": -0.38512628563119894, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),has_genre.genre_id,!=,17500000), genre.name),genre.name))", "score": -0.39546045952042763, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),language.iso_639_1,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.41581484952292325, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.41784059218890673, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), person.death_place),genre.name))", "score": -0.42300542336072977, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "score": -0.09474356396094663, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "score": -0.09766949636832578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "score": -0.5983325025835976, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "score": -0.6058204831878685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.original_language),movie.original_language))", "score": -0.640789463352121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.6585422440268276, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.6677716823335332, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.7291857295164216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),language.name))", "score": -0.7357076671250979, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.7384150969408596, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),language.name))", "score": -0.7386335995324771, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,5.3), movie.original_language),movie.original_language))", "score": -0.7667657874335418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,5.3), movie.original_language),movie.original_language))", "score": -0.8185327607716317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,5.3), movie.original_language),movie.original_language))", "score": -0.8214586931790109, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), language.name),movie.original_language))", "score": -0.8401466480499948, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "score": -0.0832226087586605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.budget),movie.release_date))", "score": -0.4077956636683666, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),person.birth_day))", "score": -0.4337635875926935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,6.2), movie.release_date),movie.release_date))", "score": -0.4346404631869518, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.runtime),movie.release_date))", "score": -0.45184796650573844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.title),movie.release_date))", "score": -0.46751340825721854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.budget))", "score": -0.4732751787887537, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.birth_day),movie.release_date))", "score": -0.5346900184886181, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.2), movie.release_date),movie.release_date))", "score": -0.5590485136272036, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.runtime))", "score": -0.5596512795673334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,6.2), movie.release_date),movie.release_date))", "score": -0.60671364863083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.revenue))", "score": -0.6163440884338343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.popularity),movie.release_date))", "score": -0.6243158539073193, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), crew.movie_id),movie.release_date))", "score": -0.6522455175654613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.birth_place),movie.release_date))", "score": -0.687309499575349, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.14745437846431741, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.3069641529757758, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.3294596684086868, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.3336428044722221, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,crew.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.35645870775492966, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.36929557371256105, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.37388707969225876, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,cast.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.3817264757460485, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.3862957959199122, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.3917911124037161, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.39480539378759827, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.40313596996657425, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.4072141166604643, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id), person.birth_day),person.birth_day))", "score": -0.4138942612590987, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,2.3), person.birth_day),person.birth_day))", "score": -0.4262153888161065, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.22215171533446362, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.2239562505008937, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.23061476160865144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.2542120725729233, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,spoken_language.iso_639_1), movie.original_language),movie.original_language))", "score": -0.26925513694098024, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3009029754829051, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.30192504661136343, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "score": -0.3165071503164849, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.317555889315316, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.32788922361048717, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.329648718522065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3301267672280444, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.33145326471970005, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.33825827133328984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "score": -0.3574020538817861, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.09164345530724294, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.11691137682180845, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.12626737020961448, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,es), country.name),country.name))", "score": -0.26699396583849333, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_average,=,es), country.name),country.name))", "score": -0.38327344057785373, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.41288611326296465, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.4135323114560333, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "score": -0.41390158025233603, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),production_country.iso_3166_1))", "score": -0.42651132702736155, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.4290816836290465, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.43323400424109887, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.original_language,=,es), country.name),country.name))", "score": -0.4384464716258376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,es), country.name),country.name))", "score": -0.4417155158473245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.44336544281548745, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,es), country.name),country.name))", "score": -0.4490306816066807, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "score": -0.3504211762560887, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "score": -0.39627260709768825, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),genre.name,=,My Lucky Star), person.name),person.name))", "score": -0.42723984268650766, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.death_day))", "score": -0.42740081631635013, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.death_day),person.name))", "score": -0.4299776569842223, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.name,=,My Lucky Star), person.name),person.name))", "score": -0.4355601804694156, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,My Lucky Star), person.name),person.name))", "score": -0.44005695152939195, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,My Lucky Star), person.name),person.name))", "score": -0.44688475724795124, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "score": -0.44937423511642965, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "score": -0.461473386330529, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_day,=,My Lucky Star), person.name),person.name))", "score": -0.4647071638550193, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,person.id),language.name,=,My Lucky Star), person.name),person.name))", "score": -0.46785487923122326, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),genre.name,=,My Lucky Star), person.name),person.name))", "score": -0.47309127352810726, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.name),person.death_day))", "score": -0.4732522471579497, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Did any oscar winners star in the film \"My Lucky Star\"?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),language.name,=,My Lucky Star), person.death_day),person.name))", "score": -0.47582908782582184, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,My Lucky Star),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.vote_average)", "score": -0.028356664634928, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average)", "score": -0.5463358453091769, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.vote_count)", "score": -0.6220234841507885, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(filter(getData(movie),movie.title,=,Tiny Furniture),movie.vote_average)", "score": -0.6512639052382843, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.6897174916307858, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.title,=,Tiny Furniture), movie.id),movie.vote_average)", "score": -0.7058295382062056, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_average)", "score": -0.7239129486314578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))", "score": -0.7280027047236217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_average)", "score": -0.7357180702467265, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.popularity)", "score": -0.7364624068486061, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,=,Tiny Furniture),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_nominee.movie_id), movie.id),movie.vote_average)", "score": -0.773659505967926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(filter(getData(movie),movie.title,>=,Tiny Furniture),movie.vote_average)", "score": -0.7878176076096027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),company.name,=,Tiny Furniture), movie.id),movie.vote_average)", "score": -0.8360644597496719, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),movie.revenue)", "score": -0.8525389186080032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average movie vote of movies with the title Tiny Furniture?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.id),oscar.year)", "score": -0.8714450770109157, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tiny Furniture), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.08907827194840087, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.1813314167309968, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(cast),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.2426508461068968, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.24650064757566292, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,Castle Rock, Colorado), movie.budget),movie.budget))", "score": -0.2575445141083197, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),movie.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.2611358205786486, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.26357430847051955, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.2846834042030856, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.person_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.2943066515277663, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.3004991134135333, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.30955695264949884, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,cast.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.31972429837873667, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.number,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.33079474567794465, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special achievement award (sound effects editing)),oscar.category,=,Castle Rock, Colorado), movie.budget),movie.budget))", "score": -0.3402313176155305, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,<,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.37440786417629573, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "score": -0.0668536638981698, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.11413891182986839, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), company.name),company.name))", "score": -0.19818066197391854, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2746235543310298, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,119), company.name),company.name))", "score": -0.2813903913488929, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119),movie.title,!=,119), company.name),company.name))", "score": -0.3792004829044044, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,119),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.38707749117774454, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "score": -0.3932164797707146, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>=,119), company.name),company.name))", "score": -0.39866608573634443, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.42449262019328127, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),person.death_place))", "score": -0.4254879699804482, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),person.birth_place))", "score": -0.4296349016084177, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,119), company.name),company.name))", "score": -0.4403023395543765, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,!=,119),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.45132787532004404, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.46211978309042373, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.019882274296833202, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.44686647548223846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.5032415915920865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.popularity))", "score": -0.6105564199096989, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), person.death_day),movie.revenue))", "score": -0.6221356289170217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.632844023843063, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.popularity),movie.revenue))", "score": -0.6581290857575368, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.6855827823455911, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.original_language))", "score": -0.7318320832855534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.vote_count))", "score": -0.7327406368858647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.budget))", "score": -0.7352454028732609, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),cast.person_id))", "score": -0.7443554363853764, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.7656969681556802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1984-05-01), movie.revenue),movie.revenue))", "score": -0.7851681366737466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies released on May 1st 1984?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),person.death_day))", "score": -0.7896446548111271, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,1984-05-01), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "score": -0.16559325239696007, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "score": -0.1978228878822739, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.death_day))", "score": -0.23838363525517903, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_place))", "score": -0.2442042744281311, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.name))", "score": -0.27061327074049285, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "score": -0.2964363940997013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.name),person.death_place))", "score": -0.31699465728635007, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "score": -0.3286660295850151, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.birth_day),person.death_day))", "score": -0.3323748246261895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "score": -0.33245978145411464, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)), person.death_day),person.death_day))", "score": -0.3422344195330127, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "score": -0.3600887457157438, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,documentary (short subject)), person.birth_day),person.name))", "score": -0.36460446011150327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,person.id),oscar.category,=,documentary (short subject)), person.death_day),person.name))", "score": -0.36468941693942847, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id),oscar.category,=,documentary (short subject)), person.name),person.death_day))", "score": -0.3692267769579203, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))", "score": -0.06083188154298114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Mark Tallman), person.gender),person.gender))", "score": -0.2842830246736412, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.birth_place),person.gender))", "score": -0.5123834195037489, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Mark Tallman), person.gender),person.gender))", "score": -0.6072775548745994, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,Mark Tallman),person.gender), person.gender))", "score": -0.6150814446082222, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Mark Tallman),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.gender),person.gender))", "score": -0.6297230878676269, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Mark Tallman), person.gender),person.gender))", "score": -0.6313096901358222, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Mark Tallman), person.gender),person.gender))", "score": -0.6451046294023399, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.birth_place))", "score": -0.6478589851831202, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Mark Tallman),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.gender),person.gender))", "score": -0.6533273880326007, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.birth_day),person.gender))", "score": -0.6779696228404646, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Mark Tallman), person.gender),person.gender))", "score": -0.691208702926815, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.death_place))", "score": -0.7162081677888636, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),movie.release_date))", "score": -0.7354443151925807, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}, {"orig_question": "What is gender of Mark Tallman?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Mark Tallman), person.birth_place),person.gender))", "score": -0.7358345626344089, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Mark Tallman), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.09953232933619462, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(language),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.22760626475693396, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(movie),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.2567297152296765, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),language.name,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.2809712713466402, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.oscar_id,person.id), person.name),person.name))", "score": -0.2811407154074673, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,hi),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.28388205940546196, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.movie_id,person.id), person.name),person.name))", "score": -0.2916622311301058, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.30297872692561884, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3179907071245995, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,<=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3191183808734566, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.name))", "score": -0.32540437940851485, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3290644649332279, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.350632905096046, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),language.name))", "score": -0.3630766717744028, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}, {"orig_question": "What are the names of the persons who have been nominated for an Oscar where the original movie language is Hindi?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.original_language,=,hi),getData(person),oscar_nominee.person_id,person.id), person.name),oscar.year))", "score": -0.40753190357902735, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.original_language,=,hi), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.15472837406701995, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),language.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.25584669120783643, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.38955501599359604, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.4473472325695922, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.44780625756955234, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.4637120217628177, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(oscar),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.4961548958193561, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5033409491805954, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5040132760672091, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),language.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5055984741455485, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),person.gender,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5125551049549033, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.521648950351675, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),person.death_place,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5266199405002595, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(person),person.name,=,Leehom Wang), movie.id),movie.budget)", "score": -0.538738670813402, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(getData(oscar),language.name,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.5972732129601726, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.07780221211144014, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.16980214580851938, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.20253664910548302, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2544662033874299, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.25781719803191155, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,=,London, England,),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.29632885834061623, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.29970574470279315, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),oscar.category,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3321098596707916, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),country.name,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3914373253455298, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.39917534521034775, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_place,=,London, England,), movie.title),movie.title))", "score": -0.4104601130003883, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.4252063763889042, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.budget)", "score": -0.4286930082642443, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.title)", "score": -0.4518197522088024, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies witout an oscar nominee born in London in it?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_place,=,London, England,),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title)", "score": -0.46152702420076497, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,!=,London, England,),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.011751731814001687, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,14661007), movie.vote_count),movie.vote_count))", "score": -0.6316009849106194, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,14661007), movie.vote_count),movie.vote_count))", "score": -0.661811122277868, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.773664561289479, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.title),movie.vote_count))", "score": -0.7854729960236, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.7912527594744461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,14661007), movie.vote_count),movie.vote_count))", "score": -0.8057103246246697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.title))", "score": -0.8078075180092128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.revenue),movie.vote_count))", "score": -0.8087259600433754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), keyword.name),movie.vote_count))", "score": -0.8155659506592201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_average),movie.vote_count))", "score": -0.8469731877121376, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.8549166440825502, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.8556006226717727, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))", "score": -0.876445275862352, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}, {"orig_question": "What vote counts do movies with a revenue of at most 14661007 Dollars have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.revenue))", "score": -0.879485023979214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,14661007), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "score": -0.10798444000101881, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "score": -0.14286140912008705, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.release_date),movie.budget))", "score": -0.7411709044317831, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.budget),movie.budget))", "score": -0.7521272603844409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.budget),movie.budget))", "score": -0.7771729272863013, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.release_date),movie.budget))", "score": -0.7822399337383104, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.budget))", "score": -0.7831283424238791, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.budget))", "score": -0.8300575811954332, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.title))", "score": -0.8378696212967043, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),person.death_place))", "score": -0.8475158581932192, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.original_language),movie.budget))", "score": -0.8626888010840048, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))", "score": -0.867100129937171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.1), movie.budget),movie.budget))", "score": -0.8741312925194507, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), person.death_place),movie.budget))", "score": -0.8843112800459494, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}, {"orig_question": "How big are the different budgets for movies with an average vote other than 6.1?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.title))", "score": -0.8967605414873105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(getData(movie),person.gender,=,Mother and Child), movie.id),oscar.number)", "score": -0.3786475249983048, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(getData(person),person.gender,=,Mother and Child), movie.id),oscar.number)", "score": -0.3836966745238992, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.45297374862882356, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.45760476717679316, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.47226806981942937, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.47689908836739897, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(getData(movie),person.gender,=,Mother and Child), movie.id),movie.runtime)", "score": -0.49090626180425134, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(getData(person),person.gender,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4959554113298457, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.49903064827296784, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.5036616668209374, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.5094951987543883, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.51412622637615, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.5179197988381177, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.5183248937541199, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Mother and Child), movie.id),oscar.number)", "score": -0.5506280966851265, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<,2007-10-17), company.name),company.name))", "score": -0.1056189658800881, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,=,2007-10-17), company.name),company.name))", "score": -0.1486725362829866, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<=,2007-10-17), company.name),company.name))", "score": -0.25844700044998536, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<,2007-10-17), company.name),company.name))", "score": -0.2599898050596422, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,<,2007-10-17), company.name),company.name))", "score": -0.27772784112953874, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,<,2007-10-17), company.name),company.name))", "score": -0.2854594130767447, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),keyword.name,<,2007-10-17), company.name),company.name))", "score": -0.2916385924800582, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,=,2007-10-17), company.name),company.name))", "score": -0.30304337546254073, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,=,2007-10-17), company.name),company.name))", "score": -0.3207814115324373, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,=,2007-10-17), company.name),company.name))", "score": -0.32851298347964325, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),keyword.name,=,2007-10-17), company.name),company.name))", "score": -0.3346921628829567, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<,2007-10-17), company.name),company.name))", "score": -0.33913020798418164, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,2007-10-17), company.name),company.name))", "score": -0.3821837784909116, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<,2007-10-17), company.name),company.name))", "score": -0.3864703127450259, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}, {"orig_question": "Which companies produced movies before October 17th 2007? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_place,<,2007-10-17), company.name),company.name))", "score": -0.3901272352567026, "correct_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.release_date,<,2007-10-17),getData(company),production_company.company_id,company.id),company.name), company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.1857817252949463, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.20727344149447366, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.22761590825153097, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.22844185924108895, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.24993357544061634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.2627827585096141, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.27638766000663495, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.28427447470914147, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_place,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.30484848704963463, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3054428924557568, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.31552430460867265, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),person.death_place,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.326340203249162, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.budget,<=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3269346751074101, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.movie_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3370160463161254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,=,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.release_date),movie.budget))", "score": -0.3600478248329694, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_day))", "score": -0.25296183237514924, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "score": -0.2562244118162198, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.birth_day))", "score": -0.3001500547834439, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.birth_day))", "score": -0.3034126342245145, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_place))", "score": -0.3685799420782132, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "score": -0.37184252151928376, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.release_date))", "score": -0.4293669045873685, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.release_date))", "score": -0.43262948402843904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.budget))", "score": -0.5273273468919797, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.budget))", "score": -0.5305899263330502, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),movie.revenue))", "score": -0.5308757008024259, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.revenue))", "score": -0.5341382802434964, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.gender))", "score": -0.5728019953676267, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.gender))", "score": -0.5760645748086972, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),oscar_nominee.person_id))", "score": -0.6199228645273251, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "score": -0.18607182356699842, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.vote_count)", "score": -0.27491137424157436, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.vote_count),movie.vote_count))", "score": -0.35313508221588563, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.vote_count)", "score": -0.37302584686477513, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_average)", "score": -0.4012222115789961, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.vote_average),movie.vote_count))", "score": -0.4239724532671971, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.vote_average)", "score": -0.49006176225357206, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.vote_count),movie.vote_count))", "score": -0.5215171308227582, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,6.00342), movie.id),movie.vote_count)", "score": -0.5431076698194197, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.revenue)", "score": -0.5689716306220013, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.vote_average)", "score": -0.5881762348767728, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.vote_average),movie.vote_count))", "score": -0.5923545018740697, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,6.00342), movie.id),movie.vote_count)", "score": -0.6177574199367772, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.revenue)", "score": -0.6578111812965772, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>,6.00342), movie.id),movie.vote_count)", "score": -0.6785239482406614, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.05475131357685537, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,<=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.19868398398910772, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "score": -0.2876726179734049, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3011716025977223, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3041148370678905, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3046219516816506, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3051045924436094, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.number))", "score": -0.3097649974441061, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,199),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.31501688250774046, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,company.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3221422084292499, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.sub_category))", "score": -0.3241199550715917, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,oscar_nominee.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3397068480256616, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),person.death_place))", "score": -0.34288979104731804, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(oscar),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3447595977281935, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}, {"orig_question": "How many different keyword names are there with movies that have a runtime more or the same as 199?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.runtime,>=,199),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),has_keyword.keyword_id))", "score": -0.34478135070169325, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.runtime,>=,199), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09247140474686773, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.10046202564512961, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,cs), keyword.name),keyword.name))", "score": -0.25952282993529313, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,cs),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.27401669027343334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.original_language,!=,cs),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.2968963984457934, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.3588956380791856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.37654247163899257, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.38866952196048915, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.40416521455719745, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4077737314919338, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.4118396289055948, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.4222421113015542, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.4257732969769283, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.42708537730043744, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.43824262948826775, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.1088412417127578, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.17691040147195078, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.18017294325261096, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.21495386831061944, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1), country.name),country.name))", "score": -0.22593423329012546, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,production_country.movie_id), country.name),country.name))", "score": -0.23671758912060978, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.24824210301180394, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.25314488432347926, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_country.iso_3166_1),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.26666556597662017, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(has_keyword),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2667051140720308, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(has_genre),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2762745389117308, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.name), country.name),country.name))", "score": -0.27945048818496615, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.28302302112423894, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.28628556290489915, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.29434461191487243, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.06971931143119346, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.1269048657511679, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.24142007710826757, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "score": -0.29883532412141833, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.3242689704293686, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "score": -0.37648700220065706, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.3909171243979473, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.3959526798236987, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.39959425421513745, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,person.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.41757967053068096, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.4219896342036716, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.release_date),movie.runtime)", "score": -0.4344958854740102, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.4356174829630771, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,person.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.43607264487354175, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.4412791643611052, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.vote_count))", "score": -0.046054904189077206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))", "score": -0.2160135776066454, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,185), movie.vote_count),movie.vote_count))", "score": -0.482395258572069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,185), movie.vote_count),movie.vote_count))", "score": -0.5273367733025225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,185), movie.vote_count),movie.vote_count))", "score": -0.5408194631600054, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.revenue),movie.vote_count))", "score": -0.707127037414466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,185), movie.vote_count),movie.vote_count))", "score": -0.7533304661774309, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.title))", "score": -0.7964707134087803, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.vote_count),movie.vote_count))", "score": -0.8281498640571954, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), person.death_day),movie.vote_count))", "score": -0.8518901494826423, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,185), movie.vote_count),movie.vote_count))", "score": -0.8536587327980669, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.title),movie.vote_count))", "score": -0.8595409420813667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.revenue),movie.vote_count))", "score": -0.8770857108320342, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,185), movie.vote_count),movie.vote_count))", "score": -0.882687187709962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}, {"orig_question": "What were the vote counts for movies with a runtime shorter than 185?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,185), movie.budget),movie.vote_count))", "score": -0.9060540226782905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,185), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.0348657896205473, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,64572262),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.22672911301788312, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(movie),movie.revenue,<=,64572262),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.3291197456808682, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.3568013155213537, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),person.birth_place))", "score": -0.3636630152959991, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,>=,64572262), company.name),company.name))", "score": -0.37986750824440574, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.3839949190066169, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.3943461400812164, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<,64572262), company.name),company.name))", "score": -0.40031941701858126, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,64572262), company.name),company.name))", "score": -0.41067017735844097, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.4142490183452711, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), person.birth_place),company.name))", "score": -0.4187904725069296, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(production_company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.4193923578612553, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,64572262), company.name),company.name))", "score": -0.437377035080562, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a revenue of at most 64572262 Dollars?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,<=,64572262), company.name),company.name))", "score": -0.4376326667180632, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,64572262), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.04197617303725565, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.runtime),movie.runtime))", "score": -0.25670217033621157, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime)", "score": -0.6292897909375017, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime)", "score": -0.6627442540280337, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2998), movie.runtime),movie.runtime))", "score": -0.7413481777548441, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.vote_count))", "score": -0.7439206067720079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.title))", "score": -0.7845803920426988, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.runtime),movie.runtime)", "score": -0.7999164277174855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2998), movie.runtime),movie.runtime))", "score": -0.8078158205389627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2998), movie.runtime),movie.runtime))", "score": -0.8085995620131143, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.id),movie.runtime)", "score": -0.8333708908080175, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime))", "score": -0.8365451718927943, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.vote_average),movie.runtime))", "score": -0.8401839758516871, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.8551806484247209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), person.birth_day),movie.runtime))", "score": -0.8641337181688868, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.01553416936803842, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.popularity),movie.status))", "score": -0.5038148386884131, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.6413974720999249, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7107539817370707, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.popularity))", "score": -0.7193860995830619, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7206625897451886, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7396981675192364, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.release_date),movie.status))", "score": -0.7499743326116004, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.vote_average),movie.status))", "score": -0.7741859181332984, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7948786225533695, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.runtime),movie.status))", "score": -0.8033121450353065, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), country.name),movie.status))", "score": -0.816734157364408, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,<=,Topsy-Turvy), movie.status),movie.status))", "score": -0.8210750630314578, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.vote_average))", "score": -0.8319135892452323, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),production_country.iso_3166_1))", "score": -0.8352840530933463, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.1278734632226459, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.13269841918186076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>,2006), person.birth_day),person.birth_day))", "score": -0.2008419494766888, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))", "score": -0.22744662472521474, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>=,2006), person.birth_day),person.birth_day))", "score": -0.22987656231735212, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006), person.birth_day),person.birth_day))", "score": -0.26225775252721545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>,2006),oscar.year,>,2006), person.birth_day),person.birth_day))", "score": -0.35600517367110784, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.movie_id,person.id), person.birth_day),person.birth_day))", "score": -0.35835360290994855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>=,2006),oscar.year,>,2006), person.birth_day),person.birth_day))", "score": -0.3620533506911787, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006),getData(person),oscar_winner.movie_id,person.id), person.birth_day),person.birth_day))", "score": -0.3631785588691634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>,2006),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))", "score": -0.38390933301636637, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,!=,2006),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.4134586334974726, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(movie),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.41563166037847404, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(person),oscar_winner.oscar_id,person.id), person.birth_day),person.birth_day))", "score": -0.4177027280321435, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday of a person who won the oscar after the year 2006?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,2006),getData(oscar),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.41984861406517177, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,2006), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.13732820126067866, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.title)", "score": -0.20293986862523472, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.budget)", "score": -0.2804868050751773, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.390060162641548, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar.number)", "score": -0.39431648032968075, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.5327577878878832, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.popularity)", "score": -0.5469933828824899, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.release_date)", "score": -0.5687232813481871, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),production_company.movie_id)", "score": -0.6045682516068126, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.status)", "score": -0.6101613664781601, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.homepage)", "score": -0.6361675394974639, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar_nominee.movie_id)", "score": -0.7086863468193018, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "score": -0.7344907615591283, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.tagline)", "score": -0.7513701407433675, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar_nominee.oscar_id)", "score": -0.7680801680942595, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "score": -0.21936329099496976, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,None,Italiano), None),None))", "score": -0.24517934854332613, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,None,Italiano), None),None))", "score": -0.25366196900404286, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Italiano),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),language.name,=,Italiano), company.name),company.name))", "score": -0.2704203072008454, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,=,Italiano), company.name),company.name))", "score": -0.2721624314989338, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "score": -0.3061504045312617, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),movie.original_language,=,Italiano), company.name),company.name))", "score": -0.3246467833585728, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.original_language,=,Italiano), company.name),company.name))", "score": -0.32501084035817573, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.original_language,None,Italiano), None),None))", "score": -0.33656800988706326, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),company.name), company.name))", "score": -0.3391635243980926, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,=,Italiano), company.name),company.name))", "score": -0.3403650875265109, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),movie.original_language,None,Italiano), None),None))", "score": -0.34484240274701355, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),company.name), company.name))", "score": -0.34682777728559, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),spoken_language.movie_id,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,=,Italiano), company.name),company.name))", "score": -0.35004290406990707, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,Italiano),company.name), company.name))", "score": -0.35162158165583474, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.04042570778625115, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.23128013903504507, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.budget),movie.title))", "score": -0.2984872359391467, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.vote_count))", "score": -0.3214808496502627, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,keyword.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.3455538297372941, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.3524978110880284, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.vote_count),movie.title))", "score": -0.35894966848356236, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.budget))", "score": -0.37231093135805987, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), company.name),movie.title))", "score": -0.37933466439707236, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(keyword),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.37939915279345604, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), oscar.number),movie.title))", "score": -0.38128109146685407, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.keyword_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.38135351597759737, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.movie_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.39680802068031323, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.4003551411601585, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many movies have the keyword brain scan assigned?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,brain scan),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.40160362358687135, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.popularity))", "score": -0.01868782201745489, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.revenue))", "score": -0.5437765005972324, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2.6), movie.popularity),movie.popularity))", "score": -0.6125919354144571, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.vote_average))", "score": -0.6249496821310458, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2.6), movie.popularity),movie.popularity))", "score": -0.6367196572009561, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,2.6), movie.popularity),movie.popularity))", "score": -0.6940054161004809, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.release_date))", "score": -0.7101331237699924, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.revenue),movie.popularity))", "score": -0.7123500029319985, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.6), movie.popularity),movie.popularity))", "score": -0.7256813180629251, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.6), movie.popularity),movie.popularity))", "score": -0.7394640577022074, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,2.6), movie.popularity),movie.popularity))", "score": -0.7755858165673999, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.original_language))", "score": -0.7952608946707187, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.status))", "score": -0.7975285533811984, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,2.6), movie.popularity),movie.popularity))", "score": -0.805526183312395, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,2.6), movie.popularity),movie.popularity))", "score": -0.8110805613450793, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))", "score": -0.025376763675012626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.revenue))", "score": -0.28666643566975836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.vote_count))", "score": -0.543489790536114, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.budget))", "score": -0.576817906476208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), person.death_day),movie.revenue))", "score": -0.7278407449048245, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.vote_count),movie.revenue))", "score": -0.7409980530064786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.budget),movie.revenue))", "score": -0.759652935914346, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),person.death_day))", "score": -0.7738448148738826, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.vote_count))", "score": -0.8047794625308597, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2007-06-22), movie.revenue),movie.revenue))", "score": -0.8084435886848951, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2007-06-22), movie.revenue),movie.budget))", "score": -0.8381075784709537, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-06-22), movie.revenue),movie.revenue))", "score": -0.8532185382355237, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.popularity))", "score": -0.8642643457424128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,2007-06-22), movie.revenue),movie.revenue))", "score": -0.8648526792676421, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies that are released before 2007-06-22.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,<,2007-06-22), movie.revenue),movie.revenue))", "score": -0.8659703259618254, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2007-06-22), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.06723317596788513, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.17906138580439693, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.2705782480921454, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "score": -0.2730223885786225, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),oscar.year,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.32702920335897373, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),language.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.33579125635694884, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3627009663510573, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(language),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3811627982982079, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),language.iso_639_1,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3811799179920907, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.38240645792865724, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "score": -0.3848505984151343, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3900074474746019, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.movie_id), movie.id),movie.popularity)", "score": -0.3914910504962806, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.revenue)", "score": -0.39177447635041424, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with an oscar nominee other than Jim Pearson?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,!=,Jim Pearson),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.revenue),movie.popularity)", "score": -0.41608216499283124, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.name,!=,Jim Pearson),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "score": -0.025258234156353865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.revenue))", "score": -0.4532753670719103, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.vote_average))", "score": -0.5403109634426073, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "score": -0.542903847679554, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.revenue),movie.popularity))", "score": -0.5847745017745183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "score": -0.6207602413815039, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.release_date))", "score": -0.6929936254528002, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.status))", "score": -0.7961718285587267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,738), movie.popularity),movie.popularity))", "score": -0.8028839161634096, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,738), movie.popularity),movie.popularity))", "score": -0.8153510761112557, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.id))", "score": -0.8253722036388353, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.id),movie.popularity))", "score": -0.8267929033972905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.vote_average),movie.popularity))", "score": -0.8443777041175053, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.release_date),movie.popularity))", "score": -0.8515722231604741, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,738), movie.popularity),movie.popularity))", "score": -0.868383653149067, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.027395520592935235, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.vote_count)", "score": -0.5855939399456114, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "score": -0.6489740428543886, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.6585128615045344, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,Rumored), movie.id),movie.vote_count)", "score": -0.683801001342706, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Rumored), movie.id),movie.vote_count)", "score": -0.724826373489823, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_count),movie.vote_count))", "score": -0.7394252853628132, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),country.name,=,Rumored), movie.id),movie.vote_count)", "score": -0.7769289320676572, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,Rumored), movie.id),movie.vote_count)", "score": -0.7833038680920671, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,<,Rumored), movie.id),movie.vote_count)", "score": -0.8216757795455384, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.id),movie.vote_count)", "score": -0.8267525809035449, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.8322199210173191, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Rumored), movie.id),movie.vote_count)", "score": -0.8416797015457373, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,<=,Rumored), movie.id),movie.vote_count)", "score": -0.8505598076390215, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_count),movie.vote_count)", "score": -0.85342803233549, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "score": -0.08306262826590682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),movie.popularity))", "score": -0.11198467945723678, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "score": -0.6225897613730922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.revenue))", "score": -0.6748117811330303, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.revenue),movie.popularity))", "score": -0.6978749919035181, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),movie.revenue))", "score": -0.7037338323243603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,738), movie.popularity),movie.popularity))", "score": -0.7151013556685939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.revenue),movie.popularity))", "score": -0.726797043094848, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.vote_average),movie.popularity))", "score": -0.7476250219442591, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),person.gender))", "score": -0.7730813033231243, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.vote_average),movie.popularity))", "score": -0.776547073135589, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,738), movie.popularity),person.gender))", "score": -0.8020033545144543, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,738), movie.popularity),movie.popularity))", "score": -0.8205625954833522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.original_language))", "score": -0.8282363421567425, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "What are the distinct popularities of movies with a vote count bigger or equal than 738 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.vote_average))", "score": -0.828664780343388, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,=,Released), movie.id),movie.runtime)", "score": -0.17111009712464784, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>=,Released), movie.id),movie.runtime)", "score": -0.18974728358869916, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>,Released), movie.id),movie.runtime)", "score": -0.3141756653480248, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,Released), movie.id),movie.runtime)", "score": -0.4701733684194376, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,!=,Released), movie.id),movie.runtime)", "score": -0.4719562860029474, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.4784676043682132, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>=,Released), movie.id),movie.runtime)", "score": -0.4888105548834889, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>=,Released), movie.id),movie.runtime)", "score": -0.4971047908322645, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Released), movie.id),movie.runtime)", "score": -0.5642557878482594, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,>=,Released), movie.id),movie.runtime)", "score": -0.5828929743123107, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,<=,Released), movie.id),movie.runtime)", "score": -0.6119800353596723, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>,Released), movie.id),movie.runtime)", "score": -0.6132389366428146, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>,Released), movie.id),movie.runtime)", "score": -0.6215331725915901, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(filter(getData(movie),movie.runtime,>=,Released),movie.runtime)", "score": -0.6906694517614835, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,>,Released), movie.id),movie.runtime)", "score": -0.7073213560716364, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.008612955734861316, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.title))", "score": -0.6276107451885764, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.release_date),movie.runtime))", "score": -0.6318024280953978, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.vote_count))", "score": -0.6681014320820395, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.release_date))", "score": -0.6852170250385825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), person.birth_day),movie.runtime))", "score": -0.7094812277246092, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.id),movie.runtime))", "score": -0.7181365374017332, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,ja), movie.runtime),movie.runtime))", "score": -0.7910101158668112, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.title),movie.runtime))", "score": -0.8010325911927794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.8453538085341279, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,ja), movie.runtime),movie.runtime))", "score": -0.8501279617667024, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),oscar_nominee.movie_id))", "score": -0.8672876379459922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),person.birth_day))", "score": -0.8714213988750998, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,ja), movie.runtime),movie.runtime))", "score": -0.87238916410206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,ja), movie.runtime),movie.runtime))", "score": -0.8841736061622214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.04020526972975883, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.budget),movie.budget)", "score": -0.20665255925064066, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.32898541665631753, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.budget)", "score": -0.3381185060912613, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.37391474364834026, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(oscar_nominee),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.3775356948696599, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,blind date),getData(movie),has_keyword.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.38400568823397974, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.3965567225129065, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,<=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.40789903663286853, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,blind date),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.budget)", "score": -0.41427506052913315, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id), movie.id),movie.budget)", "score": -0.4153758304911501, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.41653051705215394, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.4240620631650338, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.42430738192747536, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with the keyword blind date?", "inferred_code": "avg(distinct(merge(filter(getData(genre),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.4263796545907732, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,blind date),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "score": -0.04381202436343301, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,105000000), movie.original_language),movie.original_language))", "score": -0.25256774663284887, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,105000000), movie.original_language),movie.original_language))", "score": -0.5373348239372717, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,105000000), movie.original_language),movie.original_language))", "score": -0.559492910237168, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,105000000), movie.original_language),movie.original_language))", "score": -0.5914899492199766, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.vote_average),movie.original_language))", "score": -0.63624462900043, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,105000000), movie.original_language),movie.original_language))", "score": -0.655265295834397, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,105000000), movie.original_language),movie.original_language))", "score": -0.6795339369709836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.popularity),movie.original_language))", "score": -0.6880734306323575, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), language.name),movie.original_language))", "score": -0.7131739002215909, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,105000000), movie.original_language),movie.original_language))", "score": -0.7255240464146482, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language)", "score": -0.737636437927118, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,105000000), movie.original_language),movie.original_language))", "score": -0.7460905161715345, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.title))", "score": -0.7528819149156334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,105000000), movie.original_language),movie.original_language))", "score": -0.7682486024714308, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.09546128231756856, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.11068289045480746, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.20402612508155396, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.21924773321879287, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3027099686592029, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3179315767964418, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),oscar.category,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.34514964324744524, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3589178525727832, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),oscar.category,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3603712513846842, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),country.name,=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3741394607100221, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Cambodia), movie.title),movie.title))", "score": -0.38030035164032394, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.38178770588783817, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),person.birth_place,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3906477207586063, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),movie.status,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.39100631415066844, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "Which movies have not been produced in Cambodia?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Cambodia), movie.title),movie.title))", "score": -0.39135787907096276, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Cambodia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.09735864233516622, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.death_day))", "score": -0.3093054836645024, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.38662583399855066, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.death_day),person.birth_day))", "score": -0.4383004207193153, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.4817723899526847, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.name))", "score": -0.48694985565089155, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.542357064972748, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_day),person.birth_day))", "score": -0.555207022831842, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_place))", "score": -0.5690195804490941, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_day),person.birth_day))", "score": -0.5718454567459432, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Serge Houde), person.birth_day),person.death_day))", "score": -0.5914678425419577, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Serge Houde), person.birth_day),person.death_day))", "score": -0.5985726753278868, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1), person.birth_day),person.birth_day))", "score": -0.6072570060865332, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.birth_day))", "score": -0.6174925649862777, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Serge Houde),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1), person.birth_day),person.birth_day))", "score": -0.6238954931277247, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.08152816270012408, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.2971305179510292, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.336278610491989, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Oxnard), person.name),person.death_day))", "score": -0.3789891443448141, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,oscar_winner.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.38510239345133546, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),person.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.38635043946481434, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(filter(getData(person),person.death_place,=,Oxnard),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.4004826544167822, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.4203572190737015, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),person.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,oscar_winner.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.43517422242416076, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(person),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.44205826302858375, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.44215924022725445, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.44743950664963916, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.4485727543445668, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),cast.person_id,cast.person_id),person.death_place,=,Oxnard), person.name),person.name))", "score": -0.45018759633944444, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}, {"orig_question": "How many persons died in Oxnard?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Oxnard), person.name),person.death_day))", "score": -0.454124069700982, "correct_code": "count(filter(getData(person),person.death_place,=,Oxnard))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.popularity))", "score": -0.029464598665072117, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))", "score": -0.4057270879056887, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<=,347325802), movie.popularity),movie.popularity))", "score": -0.6536144608762697, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.revenue))", "score": -0.7083245086614625, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.revenue),movie.popularity))", "score": -0.7220365000321181, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.id))", "score": -0.7235383558218018, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,<,347325802), movie.popularity),movie.popularity))", "score": -0.7236159033272997, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.release_date))", "score": -0.7291374373380677, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<,347325802), movie.popularity),movie.popularity))", "score": -0.7362337297890917, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,!=,347325802), movie.popularity),movie.popularity))", "score": -0.7770400041845278, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,<,347325802), movie.popularity),movie.popularity))", "score": -0.809623915622069, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.status))", "score": -0.815969424242212, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.popularity),movie.vote_average))", "score": -0.8180527257864014, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.release_date),movie.popularity))", "score": -0.8389824224068434, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}, {"orig_question": "Is there a movie popularity with a movie revenue less than 347325802?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,347325802), movie.id),movie.popularity))", "score": -0.8611481977059157, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,347325802), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))", "score": -0.10541137718246318, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.death_day))", "score": -0.2574992630688939, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),movie.budget))", "score": -0.4435950670449529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_place))", "score": -0.44871412255452015, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.birth_day))", "score": -0.453015551349381, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_place),person.death_day))", "score": -0.472961572377244, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),movie.release_date))", "score": -0.5175362978188787, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,1930-09-08), person.death_day),person.death_day))", "score": -0.5186384202970657, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.birth_day),person.death_day))", "score": -0.524175909726182, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),oscar_nominee.person_id))", "score": -0.5752213452069554, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,<,1930-09-08), person.death_day),person.death_day))", "score": -0.5933564486040268, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1930-09-08), person.death_day),person.death_day))", "score": -0.5954757485596929, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),movie.budget))", "score": -0.5956829529313836, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.death_place))", "score": -0.6008020084409509, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}, {"orig_question": "On which dates have people died who were born before September 8th 1930?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1930-09-08), person.death_day),person.birth_day))", "score": -0.6051034372358117, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1930-09-08), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.11943811476611138, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.16387039400644124, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.21971749160780385, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.2328476564159242, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.2641497708481337, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.29906922281437365, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.number))", "score": -0.32752069886816876, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1948-06-03),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.33312703325761667, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.34311739603019537, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.34350150205470353, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.35315003343021717, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.year),oscar.sub_category))", "score": -0.3688314232729684, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1948-06-03),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.37189294997577865, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1948-06-03),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.number))", "score": -0.3719529781084986, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "For how many different sub categories were people born before 1948-06-03 nominated for an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1948-06-03),merge(getData(oscar_nominee),getData(person),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.sub_category),oscar.sub_category))", "score": -0.3862816130991342, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.05123445070230078, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.vote_count),movie.vote_count)", "score": -0.20351336984470156, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,3Mark Entertainment), movie.id),movie.vote_count)", "score": -0.3058556842164286, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.36125462399088487, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,3Mark Entertainment), movie.vote_count),movie.vote_count))", "score": -0.36344861664562234, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.3832866727515886, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,3Mark Entertainment), movie.id),movie.vote_count)", "score": -0.38391177259892156, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),movie.title,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.3886593714484268, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.4146019992215545, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),has_keyword.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.4161826799104519, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(movie),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.42266243031123274, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.vote_count)", "score": -0.4298648563702252, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.4330748191766178, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(production_company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.4358343643965116, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies produced by 3Mark Entertainment?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.43763989137888765, "correct_code": "sum(distinct(merge(filter(getData(company),company.name,=,3Mark Entertainment),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "score": -0.018265449592945515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.1), movie.revenue),movie.revenue))", "score": -0.514912480406565, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.revenue))", "score": -0.627688461832804, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "score": -0.6311526094323199, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.vote_count))", "score": -0.6385861694925552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.original_language))", "score": -0.6663328468912368, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.popularity),movie.revenue))", "score": -0.6965249480326747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.popularity))", "score": -0.7470964253061538, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,6.1), movie.revenue),movie.revenue))", "score": -0.7905796969771473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.1), movie.revenue),movie.revenue))", "score": -0.7952969613597816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.1), movie.revenue),movie.revenue))", "score": -0.8074097576663917, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),person.death_day))", "score": -0.8097662389391189, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),language.name))", "score": -0.8314877808206802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.budget))", "score": -0.8364980876558548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),spoken_language.iso_639_1))", "score": -0.8415592372530227, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,killer robot), person.birth_place),person.birth_place))", "score": -0.21184792049266962, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.25001077295858576, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.birth_place),person.birth_place))", "score": -0.28283151254304384, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,killer robot), person.birth_place),person.death_place))", "score": -0.29190131914312145, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.30113298264209415, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.31215534360769304, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.31966154520371376, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.keyword_id), person.birth_place),person.birth_place))", "score": -0.3214909438889594, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),has_keyword.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.3230244992950208, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.32453685962287643, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3303513015219912, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,killer robot),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3331408895339025, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.birth_place),person.death_place))", "score": -0.33933123607600896, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),oscar_winner.person_id,person.id),keyword.name,=,killer robot), person.birth_place),person.birth_place))", "score": -0.3503856756852478, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birth places of the oscar winner in the movies with the keyword killer robot?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,killer robot),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.3583209977949129, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,killer robot),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.08541377655613103, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.10535363611344283, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.2949530732161022, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,<,2), person.death_place),person.death_place))", "score": -0.3187507090507721, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.32758413471868714, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.movie_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.35150871550261237, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.35512513156716335, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.362958292755646, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.36315470792761106, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,has_genre.movie_id), person.death_place),person.death_place))", "score": -0.3641114082546816, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.3648560905679708, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.3666894872239588, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.37288230917193277, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.person_id),getData(person),crew.person_id,person.id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.38391977533631433, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))", "score": -0.38506914783553486, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.1640055511259457, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.1978744877141965, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.2562597038320286, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.id),oscar.number)", "score": -0.2624895431944492, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.number),oscar.number)", "score": -0.27154569140840856, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1975-08-12),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.28487216219462014, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar_nominee.oscar_id),oscar.number)", "score": -0.3014484956285372, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1975-08-12),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.31588892006904573, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<=,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3464941228330045, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.id),oscar.number)", "score": -0.3470752571709152, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1975-08-12),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.number),oscar.number)", "score": -0.3561313934755223, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), oscar.number),oscar.number)", "score": -0.39093759124927785, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar_nominee.person_id), oscar.number),oscar.number)", "score": -0.4108638757078405, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar_nominee.person_id), oscar.number),oscar.number)", "score": -0.4176623508833595, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all the oscar numbers of oscars with a nominated person born before 1975-08-12 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.number),oscar.number)", "score": -0.424905477746747, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,<,1975-08-12),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))", "score": -0.06876519571960671, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.death_place))", "score": -0.2697130131346057, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.death_day))", "score": -0.4060684877258609, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Encino, Kalifornien, USA), person.name),person.name))", "score": -0.43538244690716965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_place),person.name))", "score": -0.47865340083808405, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.birth_place))", "score": -0.5163414615017246, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.death_place),person.name))", "score": -0.547614663541026, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.death_day),person.name))", "score": -0.5479148325321148, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Encino, Kalifornien, USA), person.name),person.name))", "score": -0.6193189892728697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Encino, Kalifornien, USA), person.name),person.death_place))", "score": -0.6363302643221687, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,Encino, Kalifornien, USA), person.name),person.name))", "score": -0.6790355119665037, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_place),person.death_place))", "score": -0.6796012182530831, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Encino, Kalifornien, USA), person.name),person.name))", "score": -0.6844341072064708, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.birth_day),person.name))", "score": -0.6894029673931072, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}, {"orig_question": "Who died in Encino, Kalifornien, USA?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.gender),person.name))", "score": -0.7039366659519146, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Encino, Kalifornien, USA), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.06785249900713097, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.38149076704576146, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.name))", "score": -0.4018245451588882, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.name),person.death_day))", "score": -0.47752339304133784, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.4896551967103733, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.5449681277823402, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.birth_day),person.death_day))", "score": -0.5547140306298388, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.5598032768320991, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_place))", "score": -0.6046207957406295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),movie.revenue))", "score": -0.6382022910256637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),oscar.year))", "score": -0.6612539105553878, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),movie.vote_count))", "score": -0.6660195403237594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,Nancy Graham Tanen), person.death_day),person.death_day))", "score": -0.6712196763110114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), movie.revenue),person.death_day))", "score": -0.6961536771123065, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}, {"orig_question": "When did Nancy Graham Tanen die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Nancy Graham Tanen), person.death_day),person.name))", "score": -0.7154628131975187, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Nancy Graham Tanen), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.name), person.name))", "score": -0.21495627662807237, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>=,1938-03-04),person.name), person.name))", "score": -0.2714562942710472, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1938-03-04), person.name),person.name))", "score": -0.3820375543436967, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>,1938-03-04),person.name), person.name))", "score": -0.4586844263103558, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,>,1938-03-04),person.name), person.name))", "score": -0.4981533107784344, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1938-03-04), person.name),person.name))", "score": -0.5027677718899213, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,!=,1938-03-04),person.name), person.name))", "score": -0.5075309356179787, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>=,1938-03-04),person.name), person.name))", "score": -0.5151844439533306, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,>=,1938-03-04),person.name), person.name))", "score": -0.5546533284214092, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,>,1938-03-04), person.name),person.name))", "score": -0.5705539364716969, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,>,1938-03-04),person.name), person.name))", "score": -0.5936359581974102, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,>=,1938-03-04),person.name), person.name))", "score": -0.6501359758403851, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,!=,1938-03-04), person.name),person.name))", "score": -0.6842077876790427, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.name), oscar.year))", "score": -0.686044542628224, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}, {"orig_question": "Are there persons with a gender born after March 4th 1938? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,>=,1938-03-04), person.name),person.name))", "score": -0.6912841740413569, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1938-03-04),person.gender), person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.15834723912527068, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.17089100163908696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.1768319379567217, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(genre),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.22298219622642074, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.2323779623433954, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.2383188986610301, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.23872482584144858, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.2410536125545777, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.2438504720580511, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.2498972921169457, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.2518742851645515, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.2549254424532201, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.2578152214821862, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_winner.movie_id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.2902527663582176, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,production_country.movie_id), genre.name),genre.name))", "score": -0.2935129853109642, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),person.name))", "score": -0.0815186463369173, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Christopher J. Wood), person.name),person.name))", "score": -0.4074011500997585, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "score": -0.420806945402025, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_day,=,Christopher J. Wood), person.name),person.name))", "score": -0.4208136852903408, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),person.death_day))", "score": -0.4252018295301241, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "score": -0.427929691831783, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "score": -0.4410516608777058, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Christopher J. Wood), person.name),person.name))", "score": -0.44817440730746383, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.name),person.name))", "score": -0.4595614963666147, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.name),person.name))", "score": -0.4809860516175398, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.name),oscar.year))", "score": -0.4962413869870943, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.name))", "score": -0.49912050009189823, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "score": -0.5118134542128446, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.name))", "score": -0.5205450553428234, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "score": -0.533238102496746, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),movie.release_date))", "score": -0.33824935420852853, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.release_date))", "score": -0.3540318445811863, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.runtime),movie.release_date))", "score": -0.37825199827057077, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "score": -0.3788649724374409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),movie.runtime))", "score": -0.468734598303854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.runtime))", "score": -0.4845170886765118, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.runtime),movie.runtime))", "score": -0.5087372423658962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), person.birth_day),movie.runtime))", "score": -0.5093502165327664, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.popularity),movie.release_date))", "score": -0.5117005357096787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.release_date),movie.release_date))", "score": -0.5274830260823364, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),person.birth_day))", "score": -0.5435114861975308, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.popularity),movie.revenue))", "score": -0.5471963049421902, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),production_country.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "score": -0.6113335042063616, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "score": -0.6232508291135029, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,14.4037), person.birth_day),movie.release_date))", "score": -0.6236282373174855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.030798759920386266, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.runtime)", "score": -0.22426791037278035, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.28226991557651154, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,m), movie.id),movie.runtime)", "score": -0.3275575240892257, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,<,m), movie.id),movie.runtime)", "score": -0.3349620232170208, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.3633135945202265, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,person.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.3750812647670678, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.37906033177059323, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,>=,m), movie.id),movie.runtime)", "score": -0.3884212862451203, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.release_date),movie.runtime)", "score": -0.3945134147345656, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.41913412666528005, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.popularity,=,m), movie.id),movie.runtime)", "score": -0.41996451575117427, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,m), movie.id),movie.runtime)", "score": -0.4221428791929084, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.movie_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.4280742162565122, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(person),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.4317943660022, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.1738063707669495, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(production_country),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.24983420987084323, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2642063998668406, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(oscar_winner),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.27116246120024534, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(oscar_nominee),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2739145425519875, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.2809296878014703, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(production_company),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2852577982205662, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_keyword),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2912228985969104, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.number))", "score": -0.2974650864989007, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.3035958575967126, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.number),oscar.category))", "score": -0.30742304345071897, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.3086442060091883, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Thriller),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))", "score": -0.3115208105328915, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.3141018864835473, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "How many oscar categories are there for oscar won by movies in the genre Thriller ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Thriller),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),has_genre.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.31799737926782395, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Thriller),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.name))", "score": -0.19494609697721899, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.name))", "score": -0.3432643839623779, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.gender))", "score": -0.39153223647736013, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))", "score": -0.49234191863797605, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.name),person.name))", "score": -0.496361653378699, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.birth_day))", "score": -0.500450769206509, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.gender))", "score": -0.539850523462519, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.name), person.id))", "score": -0.559558549663052, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,>,m),person.name), person.name))", "score": -0.5947047302033752, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.gender), person.name))", "score": -0.5982362988870591, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,m),person.birth_day), person.name))", "score": -0.6204091075342149, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,=,m),person.name), person.name))", "score": -0.640660205623135, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,m),person.name), person.birth_day))", "score": -0.6487690561916679, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.name),person.gender))", "score": -0.6684886692673899, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}, {"orig_question": "Are there male persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,m), person.name),person.name))", "score": -0.6720933123142458, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,m),person.name), person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "score": -0.08831872742757266, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "score": -0.1704977042232459, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,>=,2000-01-05), movie.id),movie.revenue)", "score": -0.23643096275826805, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>=,2000-01-05), movie.id),movie.revenue)", "score": -0.24972813352789103, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>,2000-01-05),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "score": -0.28258989182644584, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "score": -0.3025254065701172, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>,2000-01-05), movie.id),movie.revenue)", "score": -0.3319071103235643, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,>,2000-01-05), movie.id),movie.revenue)", "score": -0.33233328352538316, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>=,2000-01-05),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "score": -0.3409462532850727, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,<=,2000-01-05), movie.id),movie.revenue)", "score": -0.3620398953917995, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.revenue),movie.revenue)", "score": -0.39757336173958063, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)", "score": -0.3984277273372323, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,>,2000-01-05),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.41084258995053696, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,>=,2000-01-05), movie.id),movie.revenue)", "score": -0.4187750723835823, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}, {"orig_question": "Find the average revenue of the movies that hired a crew personality who died after 2000-01-05.", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>=,2000-01-05), movie.id),movie.budget)", "score": -0.4215562086211339, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,2000-01-05), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.0523738515086253, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Angola),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.19307147258291818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Angola),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.23202432830525016, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Angola), company.name),company.name))", "score": -0.27020852265663264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,=,Angola), company.name),company.name))", "score": -0.3244643955144455, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Angola),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3422997351783274, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.37630454683669606, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),person.birth_place))", "score": -0.37694018274123264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_country.iso_3166_1,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.3794859412578546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,keyword.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.38488114949048846, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_keyword.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.39246552499485954, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_genre.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.40182425255776627, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(keyword),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.40231467949180083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.original_language,=,Angola), company.name),company.name))", "score": -0.4099765716606429, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}, {"orig_question": "Are there companies from Angola that have produced movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),has_keyword.keyword_id,company.id),movie.id,production_company.movie_id),movie.title,=,Angola), company.name),company.name))", "score": -0.41053437828152756, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(country),country.name,=,Angola),merge(getData(production_country),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.06631932226491169, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.11631705565435539, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.13658035520549844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,<,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.31207622037006216, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3551200552596287, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.3843486919718475, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3994964340885217, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4026034987213619, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.4051177886490724, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.40818639876860213, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4343464253612912, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4380120650074701, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),genre.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4561996657685179, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_nominee.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.46411514708348844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4720363253587371, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "score": -0.02373641057056375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "score": -0.3322148674924392, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_count),movie.vote_count))", "score": -0.5442233058703215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,no), movie.vote_count),movie.vote_count))", "score": -0.5902863496739883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_average),movie.vote_count))", "score": -0.6184158309188206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,!=,no), movie.vote_count),movie.vote_count))", "score": -0.6502608836453874, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(language),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "score": -0.7068842696317006, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,no), movie.vote_count),movie.vote_count))", "score": -0.7229764860870579, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.vote_count))", "score": -0.7293176038947422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.title))", "score": -0.7589894761622418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.revenue),movie.vote_count))", "score": -0.7623093405603796, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,no), movie.vote_count),movie.vote_count))", "score": -0.769702708144905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.revenue),movie.vote_count))", "score": -0.7936500890937168, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_average),movie.vote_count))", "score": -0.7960451179099417, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,no), movie.vote_count),movie.vote_count))", "score": -0.803341066261055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.31188800642604686, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3184049929964328, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.35529747669483663, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3618144632652226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.oscar_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.36391357182521145, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.3645636096221661, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.oscar_id),country.name,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "score": -0.3671657867637923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.original_language,=,en),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.status))", "score": -0.36733456815286847, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "score": -0.3776065407528252, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.38304603268217596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "score": -0.3841235273232112, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.387278421744086, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),country.iso_3166_1,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.389563019252562, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,en),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3900667551630002, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,en),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.393795408314472, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.06719773189537555, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)", "score": -0.31669043868395214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<=,6.4),movie.budget)", "score": -0.4294498759498883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.4), movie.id),movie.budget)", "score": -0.5833206990086371, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.648617345077099, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.6526082361997396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.6652467998912531, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.697947543917752, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget))", "score": -0.7479454408348829, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<,6.4),movie.budget)", "score": -0.7481991324938637, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.7540640450432307, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>=,6.4), movie.id),movie.budget)", "score": -0.8298403509224613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.id),movie.revenue)", "score": -0.8466785294213689, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,<=,6.4), movie.id),movie.budget)", "score": -0.8646332264110195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,<=,6.4), movie.id),movie.budget)", "score": -0.8922668067979631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.26579994518822914, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2857189965153149, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.31638039283977376, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3216829225074499, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.33384274672759023, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.33629944416685953, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.34160197383453567, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.352063421265479, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.353761798054676, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Libby Villa),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.3697994892925021, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.3719824725925648, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3722633701589945, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3844231777661034, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.38972569746596064, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Libby Villa),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.number),oscar.number))", "score": -0.3961233260979546, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.1918813546106328, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.19828303922989987, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), person.birth_day),movie.popularity))", "score": -0.20718220161047118, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.runtime),movie.popularity))", "score": -0.23290948771366957, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.26244239773795125, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), person.birth_day),movie.popularity))", "score": -0.2750364970565732, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.27697077235683326, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), oscar.year),movie.popularity))", "score": -0.292593668400377, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), person.birth_day),movie.popularity))", "score": -0.3313702619771828, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.vote_average),movie.popularity))", "score": -0.34052089088036874, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_average,=,writing (screenplay--original)),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.35422205029018194, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), movie.runtime),movie.popularity))", "score": -0.3606540605820352, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (screenplay--original)),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.36560842324330606, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.3777848198465991, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (screenplay--original)),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.3824139712215504, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.14163667613982897, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_day))", "score": -0.23011304434708546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.2327809261017579, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,=,Astoria, New York,), person.death_day),person.death_day))", "score": -0.2644356673860571, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.29526456207818863, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.3117442769498297, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_day))", "score": -0.31452032426620646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.31810956328454615, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.3209620429406164, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.gender,=,Astoria, New York,), person.death_day),person.death_day))", "score": -0.3407047747350704, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,=,Astoria, New York,),person.birth_place,=,Astoria, New York,), person.death_day),person.death_day))", "score": -0.3423264159133523, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_place))", "score": -0.34325910553267364, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.34983731133605794, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day,=,Astoria, New York,), person.death_day),person.death_day))", "score": -0.35930949881316027, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.3686132875265678, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.03278215824684594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.305111365756602, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.5532584063621471, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_place))", "score": -0.5976339994376758, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),movie.revenue))", "score": -0.6719959197944263, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.year,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.6742403380485484, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),language.name,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.6974612347694347, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,Jason Tobin), person.death_day),person.death_day))", "score": -0.7079642554890597, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_place),person.death_day))", "score": -0.7118613134516636, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>=,Jason Tobin), person.death_day),person.death_day))", "score": -0.7722507259022677, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),keyword.name,!=,Jason Tobin), person.death_day),person.death_day))", "score": -0.8184988371940563, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), movie.revenue),person.death_day))", "score": -0.8221395622385899, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Jason Tobin), person.death_day),person.death_place))", "score": -0.8699632069474319, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.name),person.death_day))", "score": -0.8702545176638523, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}, {"orig_question": "Which are the death days of all persons without Jason Tobin?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.name))", "score": -0.8764843164390186, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Jason Tobin), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.21529563690405365, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.2577782417807149, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3079065535976026, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(company),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.31040489658418957, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),person.death_place,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.31540709365367353, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), company.name),movie.title))", "score": -0.3159897126677273, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "score": -0.3276437743184596, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3340775626963157, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(company),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3528875014608508, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.35788969853033475, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), company.name),movie.title))", "score": -0.3584723175443885, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,company.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "score": -0.3793346724353569, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),genre.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.38167479167170837, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Lone Wolf McQuade Associates),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),company.name))", "score": -0.3963960684624273, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}, {"orig_question": "How many movies did the company with name Lone Wolf McQuade Associates produce? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Lone Wolf McQuade Associates), movie.budget),movie.title))", "score": -0.3978732141070092, "correct_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Lone Wolf McQuade Associates), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.15986978430310944, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.18670902711984813, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.1945238414301304, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.2213630842468691, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.24922177539842108, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.year,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.2851160843025913, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.title,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.28762336731518606, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.2966432599181392, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.2983670742069148, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.3132937257229489, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.year,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.31977014142961224, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.title,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.32227742444220703, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.title,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.3253813220198852, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.33129729295626453, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Are there any oscars sub categories where the vote average of the nomineed movies is 7.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.number,<=,7.4), oscar.sub_category),oscar.sub_category))", "score": -0.3312979131761065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,7.4), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.2568723653347415, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,!=,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.30489261636088755, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),oscar.year,>=,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.30912539084512797, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.31099551758392174, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>,1948),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.33182902653177454, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "score": -0.33500195445023817, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "score": -0.3428920014273518, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.3477848019614144, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>,1948),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.3531212401588477, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,1948),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.3571456208281008, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1948),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.386326812539459, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "score": -0.38698746585235627, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), movie.runtime),movie.release_date))", "score": -0.3940036419694527, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<,1948), oscar.number),movie.release_date))", "score": -0.3948775494473602, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,<,1948), movie.runtime),movie.release_date))", "score": -0.4018936889465664, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.030261686420999467, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.41376902515548863, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6), movie.vote_count),movie.vote_count))", "score": -0.48447449959348887, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_average))", "score": -0.5287604088662192, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6), movie.vote_count),movie.vote_count))", "score": -0.5888132945401594, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_average),movie.vote_count))", "score": -0.5971588782267645, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.revenue),movie.vote_count))", "score": -0.6810108117060736, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6), movie.vote_count),movie.vote_count))", "score": -0.7014086142880842, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.runtime),movie.vote_count))", "score": -0.744337587733753, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), oscar.year),movie.vote_count))", "score": -0.7893638304667547, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.title))", "score": -0.7937376255868003, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),oscar.year))", "score": -0.8089762086747214, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.runtime))", "score": -0.8304202313302085, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.revenue))", "score": -0.8506211991189048, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.title),movie.vote_count))", "score": -0.8716063789324835, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.14798633422035407, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.20499024184491563, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),cast.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.23627323896258987, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.2978001671612014, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),person.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.3102017136748627, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.3347998977897635, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),person.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.34020549096601393, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),crew.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.3407653966885652, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),company.name,=,Documentary), movie.id),movie.revenue)", "score": -0.3496275880572915, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.358763941219653, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.title,=,Documentary), movie.id),movie.revenue)", "score": -0.36064582133893275, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.original_language,=,Documentary), movie.id),movie.revenue)", "score": -0.36676827188991606, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(cast),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.3745907316495, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),movie.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.38315740775376234, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue earned by movies made as documentaries?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),cast.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)", "score": -0.38608709253213663, "correct_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "score": -0.30467855494859836, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "score": -0.3163170023929505, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.name,!=,David Kyle), country.name),country.name))", "score": -0.3304203603249545, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.death_day,>=,David Kyle), country.name),country.name))", "score": -0.3342465247710958, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "score": -0.3367286275959331, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.name,!=,David Kyle), country.name),country.name))", "score": -0.34205880776930664, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "score": -0.34550608709633396, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.death_day,>=,David Kyle), country.name),country.name))", "score": -0.34588497221544795, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.death_place,>=,David Kyle), country.name),country.name))", "score": -0.34820447998218096, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,country.iso_3166_1),person.name,>=,David Kyle), country.name),country.name))", "score": -0.3483670750402852, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.person_id),person.name,>=,David Kyle), country.name),country.name))", "score": -0.35459478019587454, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),person.death_place,>=,David Kyle), country.name),country.name))", "score": -0.35984293437210657, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),person.death_day,!=,David Kyle), country.name),country.name))", "score": -0.35998833709302536, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,production_country.movie_id),person.name,>=,David Kyle), country.name),country.name))", "score": -0.36224408286093446, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,production_country.iso_3166_1),person.death_day,>=,David Kyle), country.name),country.name))", "score": -0.4451132154083867, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.2804949227389298, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.322370855147023, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.34160454582816124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(language),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.3488124240764427, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),person.name,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.35248079185927467, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),language.name,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.3733145788504367, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.3751475987221135, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.person_id,language.iso_639_1), language.name),language.name))", "score": -0.37881525546719813, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(movie),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.3834804782362545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,=,2.3),getData(language),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.39068835648453587, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.4039120083584794, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,movie.id), language.name),language.name))", "score": -0.4063554508136974, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,<=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.40715617570746876, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(language),oscar_nominee.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.4099220073290091, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}, {"orig_question": "Is there a language in which a movie with a voting average of 2.3 was made that was nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.movie_id),movie.vote_average,=,2.3),getData(movie),oscar_nominee.oscar_id,language.iso_639_1), language.name),language.name))", "score": -0.41294265295001786, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,=,2.3), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.04414742525477777, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,49.3535), movie.revenue),movie.revenue))", "score": -0.20183003034253488, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,49.3535), movie.revenue),movie.revenue))", "score": -0.594073013326124, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), person.death_day),movie.revenue))", "score": -0.7439742779060907, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.vote_count))", "score": -0.7545671688094444, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,49.3535), movie.revenue),movie.revenue))", "score": -0.7634968319143809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.popularity))", "score": -0.80003555879739, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.vote_count),movie.revenue))", "score": -0.8112192248627252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),person.death_day))", "score": -0.8163848148360557, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.8427450616545684, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.popularity),movie.revenue))", "score": -0.8526212667748041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,49.3535), movie.revenue),movie.revenue))", "score": -0.8622491517271555, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.8727882464118011, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.8861174543089874, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,null,49.3535), movie.revenue),movie.revenue))", "score": -0.8950182953085459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.09622724437874614, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.10535776668064614, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.2686922237328824, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3022566534145735, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),spoken_language.iso_639_1,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.367096574646505, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.4019491783629915, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,????????? ????), movie.id),movie.runtime)", "score": -0.4052645929839894, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.4151842825591399, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.43643846555530025, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(genre),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.44112915808072983, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.4437205702849624, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.vote_average),movie.runtime)", "score": -0.44477760119108817, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.4474709817360185, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.44906251496394656, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(country),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.44949104720165295, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.26337601554101664, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2667898713570799, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.gender,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.2703231511526616, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2784758741793345, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3100862445376858, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.3313133110400455, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.34435234340267135, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),language.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.34961419018114637, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.gender,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.3512994790143163, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),genre.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3526134153941572, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.3533407376979357, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),genre.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.35668820594960154, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.37198459349479623, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3732144522719347, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.gender,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.37893172910644113, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.17687932177796029, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.name))", "score": -0.19903615638031624, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,!=,2014-01-01), person.name),person.name))", "score": -0.3960037060023751, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,2014-01-01),person.name), person.name))", "score": -0.4382364889315795, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.name,!=,2014-01-01),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.4650963487476988, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.name))", "score": -0.4921494712762069, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.5223343364944368, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.5388980427778638, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.name))", "score": -0.6263818731240463, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.death_day),person.name))", "score": -0.6265572557167616, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.627682530323157, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.name,!=,2014-01-01),person.name,>,2014-01-01), person.name),person.name))", "score": -0.6435810467234955, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.death_day),person.name))", "score": -0.6487140903191175, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),oscar.year))", "score": -0.6883532810898032, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),oscar.year))", "score": -0.7105101156921592, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.024454229809634853, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.popularity),movie.release_date))", "score": -0.4361291004533996, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.release_date)", "score": -0.6083356955017565, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.status),movie.release_date))", "score": -0.6396238280649413, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.popularity))", "score": -0.6409965949787875, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.06387), movie.release_date),movie.release_date))", "score": -0.6415183973222156, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.budget))", "score": -0.7011748748554965, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.06387), movie.release_date),movie.release_date))", "score": -0.7345135044961353, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,6.06387), movie.release_date),movie.release_date))", "score": -0.7391443681626697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.status))", "score": -0.7408132153286715, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.budget),movie.release_date))", "score": -0.753582127224945, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.budget)", "score": -0.7630515062302726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.release_date))", "score": -0.769444890152954, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.id),movie.popularity)", "score": -0.7943496268783183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.06387), movie.release_date),movie.release_date))", "score": -0.7974711277711322, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "score": -0.09459798154784949, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))", "score": -0.1723074431574787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,0.5), movie.budget),movie.budget))", "score": -0.6068140815514198, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,0.5), movie.budget),movie.budget))", "score": -0.6175461823622754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,0.5), movie.budget),movie.budget))", "score": -0.6516976307648292, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,0.5), movie.budget),movie.budget))", "score": -0.6860227070792462, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,0.5), movie.budget),movie.budget))", "score": -0.7043300376317347, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.release_date),movie.budget))", "score": -0.7333188483062258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,0.5), movie.budget),movie.budget))", "score": -0.7400455556853558, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.title))", "score": -0.7477014273208624, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.title),movie.budget))", "score": -0.7630230614486209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,0.5), movie.budget),movie.budget))", "score": -0.7879740411917737, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.release_date),movie.budget))", "score": -0.8031383464622195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.release_date))", "score": -0.8519606798690802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}, {"orig_question": "How much is the movie budget from movies that have not a movie vote average of 0.5?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.title))", "score": -0.8531789604385267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,0.5), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.15170289523200825, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), person.death_day),oscar.number))", "score": -0.27581321164428585, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.year),oscar.number))", "score": -0.27590610285604655, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.28601369271643545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.year,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.2900006785074435, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.3146924821111523, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.3327279590042278, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), person.name),oscar.number))", "score": -0.3697242774719968, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.37764328705442746, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.37822100688549737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.37850030738583407, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),language.iso_639_1,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.38920230043727416, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.number,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.3976066818851435, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.4058102599601936, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Bob Papenbrook), person.death_day),oscar.number))", "score": -0.4101240141126225, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.079771408396482, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average)", "score": -0.42043412471439073, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.4550614349209354, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.id),movie.vote_average)", "score": -0.5282417376112721, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.574653203417256, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count))", "score": -0.6475946724458481, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.7326545357282157, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.7592910479797865, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.7841221113267238, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), oscar.year),movie.vote_average))", "score": -0.7934094686570461, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.runtime))", "score": -0.8226429045244004, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count)", "score": -0.827377561730768, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.8302861690099235, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_count),movie.vote_average))", "score": -0.8603491802277858, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.8646098613317008, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.04576122739877233, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "score": -0.20199585062285572, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.22134987763637462, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "score": -0.26906741869247486, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<=,1956-10-11), movie.title),movie.title))", "score": -0.30411812876735017, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<=,1956-10-11), movie.title),movie.title))", "score": -0.3242876999708305, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.33046855628607885, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.release_date,<=,1956-10-11), movie.title),movie.title))", "score": -0.3612230708171264, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.title,<=,1956-10-11), movie.title),movie.title))", "score": -0.3717728107136806, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.37697488800104656, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.release_date,<,1956-10-11), movie.title),movie.title))", "score": -0.38026015341133795, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11),movie.title,<,1956-10-11), movie.title),movie.title))", "score": -0.39080989330789223, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3938218822454916, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "score": -0.40880826082901706, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movie titles got an oscar for a person who was born before 1956-10-11?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(person),person.birth_day,=,1956-10-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1956-10-11), movie.title),movie.title))", "score": -0.41107287468148074, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1956-10-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.14202807147151494, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.16580996493112785, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.215688239834943, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2518517462293134, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2862610285771796, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.28685220440998177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>=,380), country.name),country.name))", "score": -0.2967120645380121, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>=,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3073391412191655, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>,380), country.name),country.name))", "score": -0.3190765984005817, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.33228975619189716, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>=,380), country.name),country.name))", "score": -0.33463305627812145, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,380),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3379854653681089, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>,380), country.name),country.name))", "score": -0.3507155339861612, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,!=,380), country.name),country.name))", "score": -0.35671705836812195, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}, {"orig_question": "In what countries have movies with a vote count of over 380 been produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,380),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3590900134872462, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>,380), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1988-02-28), person.death_day),person.death_day))", "score": -0.23811374595970847, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1988-02-28), person.death_day),person.death_day))", "score": -0.2519716023525689, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1988-02-28), person.death_day),person.death_day))", "score": -0.275832630606601, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,1988-02-28), person.death_day),person.death_day))", "score": -0.2896904869994614, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,1988-02-28), person.death_day),person.death_day))", "score": -0.30611442765803076, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,1988-02-28), person.death_day),person.death_day))", "score": -0.3199722840508912, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "score": -0.36359937480301596, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1988-02-28), person.death_day),person.death_day))", "score": -0.4013182594499085, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1988-02-28), person.death_day),person.death_day))", "score": -0.43160005650133826, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1988-02-28), person.death_day),person.death_day))", "score": -0.557213887484977, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1988-02-28), person.death_day),person.death_day))", "score": -0.5867432802042458, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1988-02-28), person.death_day),person.death_day))", "score": -0.5949327721318696, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1988-02-28), person.death_day),person.death_day))", "score": -0.6244621798687149, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,1988-02-28), person.death_day),person.death_day))", "score": -0.6252145842008758, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of the people born on February 28th 1988?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>,1988-02-28), person.death_day),person.death_day))", "score": -0.6547439769201446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.07784225729119498, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.31893523906182963, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.name))", "score": -0.4360225948767038, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.46523448203515727, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.name),person.death_day))", "score": -0.5089540205226513, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.5153267628775211, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.5350321478472324, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.birth_day),person.death_day))", "score": -0.5571233353839489, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),movie.revenue))", "score": -0.5867177400068613, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<,Lasse Petterson), person.death_day),person.death_day))", "score": -0.6216355807409855, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_place))", "score": -0.6268356594518991, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Lasse Petterson), person.death_day),person.death_day))", "score": -0.6625394109432818, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), movie.revenue),person.death_day))", "score": -0.6661697647796245, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),movie.vote_count))", "score": -0.6764597448782297, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}, {"orig_question": "When did Lasse Petterson die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Lasse Petterson), person.death_day),person.name))", "score": -0.6771155766473385, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Lasse Petterson), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))", "score": -0.013086997390928445, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2607), movie.revenue),movie.revenue))", "score": -0.40618393937984365, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.vote_count))", "score": -0.6559813047751959, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), person.death_day),movie.revenue))", "score": -0.7267800251247536, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,2607), movie.revenue),movie.revenue))", "score": -0.7275978140060033, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2607), movie.revenue),movie.revenue))", "score": -0.7394318989936437, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),person.death_day))", "score": -0.7513088609084662, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.popularity),movie.revenue))", "score": -0.8012004772426735, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2607), movie.revenue),movie.revenue))", "score": -0.8225924295948062, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<=,2607), movie.revenue),movie.revenue))", "score": -0.8424681944416079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.vote_count),movie.revenue))", "score": -0.8656015673877846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.popularity))", "score": -0.8859158779487188, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.budget))", "score": -0.9060124183997686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.original_language))", "score": -0.9264063264236029, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a vote count of 2607 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),cast.person_id))", "score": -0.9388730551108893, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,2607), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.14342621740219555, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.23457439433000926, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.movie_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.2835817916867819, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.movie_id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.2846733789939204, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),crew.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.29134520527766067, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.2988876046212345, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,movie.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.30068167580852395, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.3143450511432423, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),person.gender,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.3249473008854979, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.35074869439952866, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.movie_id),keyword.name,!=,national park), person.gender),person.gender))", "score": -0.3619988608172806, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park),language.name,!=,national park), person.gender),person.gender))", "score": -0.3822603984701621, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,has_keyword.keyword_id),keyword.name,!=,national park),genre.name,!=,national park), person.gender),person.gender))", "score": -0.3990807294980067, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,spoken_language.iso_639_1),keyword.name,!=,national park),language.name,!=,national park), person.gender),person.gender))", "score": -0.40161216132903155, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}, {"orig_question": "Of which genders are crew members of movies with any keywords other than national park?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,spoken_language.iso_639_1),keyword.name,!=,national park),genre.name,!=,national park), person.gender),person.gender))", "score": -0.4184327288506289, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,national park),merge(merge(getData(has_keyword),merge(getData(movie),getData(crew),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),getData(person),crew.person_id,person.id),keyword.id,has_keyword.keyword_id), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))", "score": -0.028899473312776536, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,140), movie.vote_count),movie.vote_count))", "score": -0.43708613252965733, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,140), movie.vote_count),movie.vote_count))", "score": -0.4974493476911448, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,140), movie.vote_count),movie.vote_count))", "score": -0.5685216460260563, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,140), movie.id),movie.vote_count)", "score": -0.6773223777816916, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,140), movie.vote_count),movie.vote_count))", "score": -0.6773476991220377, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.revenue),movie.vote_count))", "score": -0.6855297136935405, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,140), movie.vote_count),movie.vote_count))", "score": -0.7325321707758121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,140), movie.vote_count),movie.vote_count))", "score": -0.7396509919199161, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.runtime),movie.vote_count))", "score": -0.7612236190470867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_average))", "score": -0.7733515970758162, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_average),movie.vote_count))", "score": -0.7847779441508465, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,140), movie.vote_count),movie.vote_count))", "score": -0.8116325411829166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,140), movie.vote_count),movie.vote_count))", "score": -0.8195012037758715, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the movie vote count for movies which run for 140 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,140), movie.vote_count),movie.vote_count))", "score": -0.8272008244530298, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,140), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.10137968076844174, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.1160218855288829, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.19598376386023064, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.23385513550352613, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan),movie.revenue)", "score": -0.2726215652189503, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.2927716638486472, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4003557048802523, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(filter(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan),movie.revenue)", "score": -0.4555726883318074, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),production_country.movie_id,production_country.iso_3166_1),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.4646928418278993, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.original_language,=,Japan), movie.id),movie.revenue)", "score": -0.4735755512699231, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan), movie.revenue),movie.revenue)", "score": -0.47637200254847645, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan), movie.id),movie.budget)", "score": -0.4783808338795847, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),oscar_winner.movie_id,movie.id),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.48324348319335847, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,oscar_winner.oscar_id),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.4851081669539617, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,oscar_winner.oscar_id),getData(movie),production_country.movie_id,movie.id),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.4918539983676476, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.038951543870904076, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>=,7000000), movie.id),movie.revenue)", "score": -0.29835479134436416, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,7000000), movie.id),movie.revenue)", "score": -0.7160071296855515, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.budget)", "score": -0.7552423652079099, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,<=,7000000), movie.id),movie.revenue)", "score": -0.7669416732689571, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.vote_count)", "score": -0.7984092529099981, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,7000000), movie.id),movie.revenue)", "score": -0.8132514923581978, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,<=,7000000), movie.id),movie.revenue)", "score": -0.8439346346600562, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.revenue),movie.revenue)", "score": -0.8682143935332918, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(filter(getData(movie),movie.budget,<=,7000000),movie.revenue)", "score": -0.8742197137404627, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),person.death_day)", "score": -0.8759148367327363, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,!=,7000000), movie.id),movie.revenue)", "score": -0.8770681679228288, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>,7000000), movie.id),movie.revenue)", "score": -0.8865011338570441, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,7000000), movie.id),movie.revenue)", "score": -0.8915758015528193, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,<=,7000000), movie.id),movie.revenue)", "score": -0.9010942879732502, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.20903050227613082, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.21181880689912377, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.22833181464061109, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.27084146331745323, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2736297679404462, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.2901427756819335, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.31223281574794176, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.3150211203709347, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,>=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.33122259575253044, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.331534128112422, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,>=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3363376019509859, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.34416224674576346, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3492772529442189, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,>=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.3494846588895166, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.11281),getData(oscar_winner),person.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.3570518530063719, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.07302519424919526, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.revenue)", "score": -0.19960002455679832, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.revenue),movie.revenue)", "score": -0.20734363511792017, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.33184468544550794, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.revenue),movie.revenue)", "score": -0.34385203466760267, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.36432732317353567, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.36720010620100557, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,correspondence),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.revenue)", "score": -0.39155462985600215, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.death_day),movie.revenue)", "score": -0.4018997498832117, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.4253101777178692, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.4279180433006293, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.44011724325572005, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(company),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.44348510606735736, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(genre),keyword.name,=,correspondence),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.44401051493107396, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of the movies with the keyword name correspondence?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,correspondence),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.revenue)", "score": -0.44487167097788016, "correct_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,correspondence), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.16265026894164186, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,American Wedding), movie.id),movie.budget)", "score": -0.3125337733744714, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.32730971973741435, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),language.name,=,American Wedding), movie.id),movie.budget)", "score": -0.347717846461241, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.36841029630932287, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "score": -0.3974021149574771, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.42629578693226866, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.42919642877024955, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.436209996037447, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "score": -0.43850269152938565, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),person.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.46526002068478056, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.46739624214220654, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.4702969917314698, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,American Wedding), movie.id),movie.budget)", "score": -0.4963881821523315, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,American Wedding), movie.id),movie.budget)", "score": -0.4976013508940705, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "score": -0.26110207758409887, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "score": -0.26294594244272684, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_winner.oscar_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.270062780113631, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_nominee.oscar_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3059372571141282, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_winner.oscar_id),oscar.category,=,42),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3077446353254812, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "score": -0.3399577852032119, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "score": -0.3418016500618398, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(crew),oscar.id,oscar_nominee.oscar_id),oscar.category,=,Camera),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.34361910291192727, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.status),movie.status))", "score": -0.3446809852370676, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.3465248500956955, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "score": -0.34659539788764915, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "score": -0.34843926274627707, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,Camera),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "score": -0.3491897707029694, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,Camera),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.popularity),movie.status))", "score": -0.35103363556159733, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.popularity),movie.status))", "score": -0.37370089429889247, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.2359815207506778, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.3013475722114006, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),person.birth_place))", "score": -0.3028593633608603, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.3204427730864756, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.32057799560010203, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_winner.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.35756230007046497, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.36366206612824997, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.36381840363320944, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.37086775256358956, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_place,<=,1903-02-16), oscar.category),person.birth_place))", "score": -0.3717082482948498, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_winner.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.3767927692182387, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),person.birth_place))", "score": -0.38289254263016037, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), person.birth_place),oscar.category))", "score": -0.4022328155748119, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), oscar.category),person.birth_place))", "score": -0.4121487027794822, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,oscar.id), oscar.number),person.birth_place))", "score": -0.41880599410635677, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,6900000), genre.name),genre.name))", "score": -0.13932145073835606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>,6900000), genre.name),genre.name))", "score": -0.1456697197911584, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,!=,6900000), genre.name),genre.name))", "score": -0.1556825086485179, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,>,6900000), genre.name),genre.name))", "score": -0.19842588938787858, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,<,6900000), genre.name),genre.name))", "score": -0.21006179437204994, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,<,6900000), genre.name),genre.name))", "score": -0.227391378727154, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>=,6900000), genre.name),genre.name))", "score": -0.2488277141251186, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,>=,6900000), genre.name),genre.name))", "score": -0.2681610604442531, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,=,6900000), genre.name),genre.name))", "score": -0.33069765473508855, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,=,6900000), genre.name),genre.name))", "score": -0.3429478600915168, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,6900000), genre.name),genre.name))", "score": -0.3958617429803671, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>,6900000), genre.name),genre.name))", "score": -0.40221000289600206, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.budget,<=,6900000), genre.name),genre.name))", "score": -0.43133711835707345, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,null,6900000), genre.name),genre.name))", "score": -0.4345678300699038, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,6900000), genre.name),person.death_place))", "score": -0.47554345938502024, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.runtime))", "score": -0.15853950724167196, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.runtime))", "score": -0.2127160640490204, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1984),movie.runtime),movie.runtime))", "score": -0.2539658521009459, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(oscar),oscar.year,>=,1984),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.2731773667515482, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,>=,1984),movie.runtime),movie.runtime))", "score": -0.2799454513886071, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.3130015410373147, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.title))", "score": -0.32689549203425483, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.vote_count))", "score": -0.3315616717139245, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.title))", "score": -0.3361299843323051, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,!=,1984),movie.runtime),movie.runtime))", "score": -0.34830648219120763, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(oscar),oscar.year,>=,1984),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.title))", "score": -0.36500035394278324, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,1984),movie.runtime),movie.runtime))", "score": -0.3753717962478811, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,>=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.vote_count))", "score": -0.38490338160298465, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1984),movie.runtime),movie.release_date))", "score": -0.4011140817034363, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}, {"orig_question": "What ist the movie title wit the maximum runtime with an oscar since 1984?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,1984),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime),movie.runtime))", "score": -0.4045953128540815, "correct_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>,1984),movie.runtime),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.06478735544078518, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.22726717525581105, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,2.3),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.30250976730327517, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.37626024950481185, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.movie_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.43393259824815533, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.4443577140867842, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.45577998148074805, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,spoken_language.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.46190920660593227, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,2.3),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.year),oscar.number))", "score": -0.48347339719261184, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.year))", "score": -0.48401828409848285, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.3), oscar.sub_category),oscar.number))", "score": -0.4960241626977222, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),spoken_language.movie_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))", "score": -0.5006247924466037, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.3), oscar.number),oscar.year))", "score": -0.5106078621029155, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.number),oscar.sub_category))", "score": -0.5110754455868406, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie vote average must be at least 2.3?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_average,>=,2.3), oscar.year),oscar.number))", "score": -0.5188052465848907, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,2.3), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.1890547126084466, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "score": -0.2425961869388553, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "score": -0.2459132784365225, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.24893330892377094, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Quick Six Entertainment),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "score": -0.2670071595378092, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,None),None,None),None,None,Quick Six Entertainment), None),None))", "score": -0.2727341643512158, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,None),None,None),None,None,Quick Six Entertainment), None),None))", "score": -0.2810574032668456, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Quick Six Entertainment),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1),company.name,!=,Quick Six Entertainment), country.name),country.name))", "score": -0.28396029404020984, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),company.name,None,Quick Six Entertainment), None),None))", "score": -0.29083196122353167, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.295444867980152, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.company_id,movie.id),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment), country.name),country.name))", "score": -0.3011081244138311, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(production_company),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.30132448387232347, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))", "score": -0.31025569814575615, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_company.movie_id,movie.id),company.name,None,Quick Six Entertainment), None),None))", "score": -0.32214168129575943, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "What are the countries names where production companies produced movies except the company Quick Six Entertainment?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,production_country.iso_3166_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_company.movie_id,movie.id),company.name,None,Quick Six Entertainment), None),None))", "score": -0.3408652245132741, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Quick Six Entertainment),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),production_company.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.status,=,Cymraeg),movie.vote_average),movie.vote_average))", "score": -0.14030530153831933, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.3128885129852526, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.3947488844890893, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.4195226977689385, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.4241969225859869, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "score": -0.4350434312907486, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),person.gender,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.4355668946223033, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.4547007166184586, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),country.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.46668236718349604, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Cymraeg), movie.vote_average),movie.vote_average)", "score": -0.4746605430579935, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Cymraeg), movie.id),movie.vote_average)", "score": -0.5009697523210189, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.vote_average))", "score": -0.5023303055641062, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),genre.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.5166712330905027, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.vote_count))", "score": -0.5224241425954081, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}, {"orig_question": "When was the movie with the highest average vote spoken in Cymraeg released?", "inferred_code": "done(extractValues(max(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average),movie.vote_average))", "score": -0.5239289133010729, "correct_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Cymraeg),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "score": -0.014771381614991697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.vote_count))", "score": -0.5913629364113149, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))", "score": -0.5923089739771967, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,97), movie.revenue),movie.revenue))", "score": -0.696457029600424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.popularity),movie.revenue))", "score": -0.7003933236592275, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),person.death_day))", "score": -0.7048854064087209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,97), movie.revenue),movie.revenue))", "score": -0.7578815829947416, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), person.death_day),movie.revenue))", "score": -0.8116002128117543, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,97), movie.revenue),movie.revenue))", "score": -0.8214182716801588, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.runtime,>,97), movie.revenue),movie.revenue))", "score": -0.8289708748816338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.popularity))", "score": -0.8369179200271901, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.budget))", "score": -0.8663813304046926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),cast.person_id))", "score": -0.8665968011955556, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.vote_count),movie.revenue))", "score": -0.9039365694516164, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a runtime longer than 97 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>,97), movie.revenue),movie.revenue))", "score": -0.9073394996121351, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,97), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.02293960657698335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,262), movie.status),movie.status))", "score": -0.5171084855755907, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), country.name),movie.status))", "score": -0.53822312970442, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.vote_average),movie.status))", "score": -0.5600083889512462, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,262), movie.status),movie.status))", "score": -0.5733528886994463, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.popularity),movie.status))", "score": -0.5838149013070506, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.popularity))", "score": -0.5986814946008963, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,262), movie.status),movie.status))", "score": -0.631167605992232, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,262), movie.status),movie.status))", "score": -0.633624390240584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.original_language))", "score": -0.6426329463793081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), production_country.movie_id),movie.status))", "score": -0.65188120026869, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),country.name))", "score": -0.6549483388735098, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),production_country.movie_id))", "score": -0.6618873924089712, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),production_country.iso_3166_1))", "score": -0.67079751194251, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), production_country.iso_3166_1),movie.status))", "score": -0.693243664696638, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.25583974026694434, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.2774006675284574, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.2832942135235382, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.3025727826108797, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.3037550977349173, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,!=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.30485514078505127, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,>=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.318409208626052, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.32413370987239276, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,!=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.32531602499643036, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.33002725586747356, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,>=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.33997013588756503, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,>=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.3458636818826458, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.35048814574997283, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.3515881888001067, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)), movie.id),movie.runtime)", "score": -0.36172544759676867, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "score": -0.01141039432695834, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.24827), movie.original_language),movie.original_language))", "score": -0.4393868009719881, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),language.name))", "score": -0.7130601861208561, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), language.name),movie.original_language))", "score": -0.7284153406435507, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.24827), movie.original_language),movie.original_language))", "score": -0.7488223928885418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,6.24827), movie.original_language),movie.original_language))", "score": -0.7631225745353731, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.24827), movie.original_language),movie.original_language))", "score": -0.7668169300231966, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,6.24827), movie.original_language),movie.original_language))", "score": -0.7755919117407757, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,6.24827), movie.original_language),movie.original_language))", "score": -0.7974101464424166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,6.24827), movie.original_language),movie.original_language))", "score": -0.800892235703941, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.title))", "score": -0.8026755311220768, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.popularity),movie.original_language))", "score": -0.8137328927332419, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,<,6.24827), movie.original_language),movie.original_language))", "score": -0.8360598105864483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.revenue),movie.original_language))", "score": -0.8599798981958884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.budget))", "score": -0.8694291569918278, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.1045669267782637, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.runtime))", "score": -0.21782905767713548, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,!=,special achievement award), movie.runtime),movie.runtime))", "score": -0.2651187739021297, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.2679321219659739, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), person.birth_day),movie.runtime))", "score": -0.3171030935961229, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.32330653411684407, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.3298711119206383, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.34317959669641523, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.id),movie.runtime))", "score": -0.34507986390445805, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,!=,special achievement award),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.34792285981954363, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award), movie.release_date),movie.runtime))", "score": -0.35081687957180596, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.35114550311316656, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.category,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.35591583549103234, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,special achievement award),oscar.category,=,special achievement award), movie.release_date),movie.runtime))", "score": -0.36163684854365846, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "What are the movie runtimes of movies who had an oscar nominee in the category special achievement award? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,special achievement award), movie.runtime),movie.runtime))", "score": -0.37613054315091854, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))", "score": -0.28724033798789605, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.original_language))", "score": -0.2902018543682061, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.original_language))", "score": -0.34350365068530664, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.original_language))", "score": -0.4070391025743447, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.title))", "score": -0.42432434525107965, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.title))", "score": -0.4272858616313897, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.original_language),movie.original_language))", "score": -0.4465405460796319, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.vote_average),movie.original_language))", "score": -0.44950206245994195, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.title))", "score": -0.48058765794849023, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.original_language))", "score": -0.487787742036744, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), country.name),movie.original_language))", "score": -0.5013553168973885, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Rumored), movie.status),movie.original_language))", "score": -0.5028038587770425, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.original_language))", "score": -0.5287402537069283, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))", "score": -0.5406227892817697, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.title))", "score": -0.5441231098375283, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.22643486218823372, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "score": -0.25474127048229434, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.runtime))", "score": -0.28692737982512684, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.288550515087209, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.runtime))", "score": -0.31523378811918745, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "score": -0.31685692338126964, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.32939227078008715, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.33792515125762673, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.3437149577516847, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.runtime))", "score": -0.34904303272410214, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "score": -0.35769867907414776, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "score": -0.36623155955168735, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,105),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.movie_id), movie.runtime),movie.title))", "score": -0.3699461780141637, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.title))", "score": -0.3720213660457453, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}, {"orig_question": "Which movies with a runtime below 105 minutes won an oscar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,105),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.runtime))", "score": -0.37734944101816276, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,<,105), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.20607795021351194, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.33123918077762937, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.year,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.37939955494221067, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.3981683125239215, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.40022741458233213, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.40503899953182554, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.42458014390285825, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.5056013931971393, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.522483663771709, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.5530859400969348, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.5553953192647896, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.runtime),movie.vote_count))", "score": -0.5595326741677127, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.5925178168326966, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Imagine Me & You), movie.release_date),movie.runtime))", "score": -0.5955121490624151, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Imagine Me & You), person.birth_day),movie.runtime))", "score": -0.6681837033911275, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,best picture),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3471732909452643, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,best picture),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3678760193923724, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),genre.name,=,best picture),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.37629622178271577, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.3943260948396124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.39509145498489107, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),language.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.41629116282253387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.4163651993510986, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "score": -0.41719072968133214, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "score": -0.41795608982661075, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.4225369139655997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.4233022741108784, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),language.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "score": -0.4391557976642536, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.gender),person.gender))", "score": -0.4392298441606372, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.4399965422087178, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}, {"orig_question": "Which genders have one the Oscar for Best Picture?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,best picture),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.gender),person.gender))", "score": -0.4420222112235951, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,best picture), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.2657877222022324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2716576599923379, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.34553792859800636, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.3514078663881119, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.41363153984084144, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.4191546138026436, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.43048073088216776, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.4360038048439699, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.4391761817305405, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,movie.id), oscar.sub_category),oscar.category))", "score": -0.443928305023676, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.4446992556923427, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.4487086816394231, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,movie.id), oscar.sub_category),oscar.category))", "score": -0.44945137898547816, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.category),oscar.category))", "score": -0.44949975646613527, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Name the Oscar categories where the nominated persons born before 1952-12-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<,1952-12-05),oscar_nominee.person_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.45072263892048525, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1952-12-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "score": -0.08875986059508803, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.23193507602553304, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950), language.name),language.name))", "score": -0.23854592515843523, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),movie.revenue,<,25035950), language.name),language.name))", "score": -0.2762313401993782, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,<,25035950), language.name),language.name))", "score": -0.32750313607530174, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3303994388750542, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,>,25035950), language.name),language.name))", "score": -0.3326367776649376, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,!=,25035950), language.name),language.name))", "score": -0.3394165602426512, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),person.name))", "score": -0.34697899159373846, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),movie.original_language))", "score": -0.3604373191503887, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),genre.name))", "score": -0.36147430900560135, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,<,25035950),movie.revenue,<,25035950), language.name),language.name))", "score": -0.36709939881178416, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "score": -0.3705965893828777, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,<,25035950), language.name),language.name))", "score": -0.3976182819606038, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.budget,<,25035950), language.name),language.name))", "score": -0.39874983660203384, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "score": -0.19206572754581067, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "score": -0.2299597736564574, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "score": -0.24785700421779072, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "score": -0.27678919125917334, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "score": -0.2834078129014013, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "score": -0.30468528007783807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "score": -0.319529969055238, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,>,P??????), country.name),country.name))", "score": -0.326148590697466, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.iso_639_1),language.name,<,P??????), country.name),country.name))", "score": -0.3262823278162186, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,movie.id),language.name,None,P??????), None),None))", "score": -0.3280688662166066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,P??????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.32945991509890393, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.iso_639_1),language.name,!=,P??????), country.name),country.name))", "score": -0.3319651519149621, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,country.iso_3166_1),language.name,None,P??????), None),None))", "score": -0.3396347643770764, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,P??????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.34214003749124006, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}, {"orig_question": "Are there names of countries that produced movies translated in a language different than \"P??????\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,spoken_language.movie_id),language.name,!=,P??????), country.name),country.name))", "score": -0.34880860502848154, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),spoken_language.movie_id,movie.id),language.name,!=,P??????), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.10712939497722034, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(language),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.20357748114387783, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.28419425294670125, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,<=,8.58322), keyword.name),keyword.name))", "score": -0.2889760578826572, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,=,8.58322), keyword.name),keyword.name))", "score": -0.307599090628975, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),spoken_language.iso_639_1,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.319426177979251, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,=,8.58322), keyword.name),keyword.name))", "score": -0.3266494088836921, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(oscar),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.3376599291879865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(language),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.3424943864751946, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,8.58322),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3450662773638841, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.35327437958922187, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.revenue,=,8.58322), keyword.name),keyword.name))", "score": -0.3614602575867639, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(movie),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.36414819513382957, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),cast.person_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.3740711715743456, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "Provide the Keyword Name of movies who have a popularity score  = 8.58322", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(person),has_keyword.keyword_id,keyword.id),movie.popularity,=,8.58322), keyword.name),keyword.name))", "score": -0.3766443008909848, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,8.58322),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.1352528246705071, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.1515492250623269, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,!=,1886-10-12),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.22859765838968224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.23410111702512823, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2400812058591682, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,!=,1886-10-12),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.27795912008868295, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.2918944071978171, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.30819080758963696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.31400965366272443, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.3233201314445319, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.3303060540545443, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.3396165318363517, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.3442587843205464, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.36055518471236625, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,!=,1886-10-12),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3683977558869124, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.07233022140415454, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.16970827197687627, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.runtime)", "score": -0.34556391802986514, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "score": -0.35780720812831923, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.release_date),movie.runtime)", "score": -0.363019988731878, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Aloha Pictures), movie.runtime),movie.runtime))", "score": -0.36951363609988136, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Aloha Pictures),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.3855229993995847, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3925741862758555, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4039421830557578, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.41120144763266525, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.42131023286939445, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_country.iso_3166_1), movie.id),movie.runtime)", "score": -0.426880391745924, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), oscar.id),movie.runtime)", "score": -0.43131902597938276, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),movie.title,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4331188160654996, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(person),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4386625038546133, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "score": -0.018212091195891844, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.runtime),movie.runtime))", "score": -0.5185321853678033, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>=,Released), movie.runtime),movie.runtime))", "score": -0.5544520302391902, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.release_date))", "score": -0.6582065310976759, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), person.birth_day),movie.runtime))", "score": -0.6696694831080094, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,!=,Released), movie.runtime),movie.runtime))", "score": -0.6781996772806451, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime))", "score": -0.7022280434794084, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.title))", "score": -0.7036172237894789, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.runtime))", "score": -0.7099359373278276, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,!=,Released), movie.runtime),movie.runtime))", "score": -0.7136074588815973, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>,Released), movie.runtime),movie.runtime))", "score": -0.7511953397370235, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),person.birth_day))", "score": -0.7517756310007826, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Released), movie.runtime),movie.runtime))", "score": -0.7585614011804864, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),person.gender,!=,Released), movie.runtime),movie.runtime))", "score": -0.7931473539392755, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),country.name,!=,Released), movie.runtime),movie.runtime))", "score": -0.8296385095636651, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)", "score": -0.03951816549415262, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>,50), movie.id),movie.revenue)", "score": -0.36580677331242856, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,50), movie.id),movie.revenue)", "score": -0.3941919110494184, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.popularity)", "score": -0.6546830469370322, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.budget)", "score": -0.7024762989080616, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,50), movie.id),movie.revenue)", "score": -0.7042351416164471, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(filter(getData(movie),movie.popularity,>,50),movie.revenue)", "score": -0.7259120511356937, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),person.gender,>=,50), movie.id),movie.revenue)", "score": -0.8515922776759026, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,null,50), movie.id),movie.revenue)", "score": -0.8909241734003338, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>=,50), movie.id),movie.revenue)", "score": -0.8911114382457508, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,50), movie.id),movie.revenue)", "score": -0.8916413067825498, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,>=,50), movie.id),movie.revenue)", "score": -0.8988486962217558, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.revenue),movie.revenue)", "score": -0.8992489562637616, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.vote_count)", "score": -0.9024383353711518, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a popularity more than or equal to 50?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>=,50), movie.id),movie.revenue)", "score": -0.9418532547742146, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,>=,50), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.22583692838652236, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.24631302481052963, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.2464334567175426, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.2669095531415499, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.31952546607653576, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.3285558788348632, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.34903197525887053, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.34915240716588347, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.34919995837392276, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.3624903032498904, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,movie.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.36962850215438847, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.3696760644388343, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,>=,6.2), oscar.id),oscar.number)", "score": -0.36979656071306066, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.39620323828161336, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.4213827181450867, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<=,2016-01-13), genre.name),genre.name))", "score": -0.18347210351333676, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.22792841515094714, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,2016-01-13),getData(cast),movie.id,cast.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2740652804361874, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,2016-01-13),getData(cast),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2750733326056302, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<=,Released), person.death_place),genre.name))", "score": -0.2767944633122591, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,<=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3019234319324474, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.release_date,<=,2016-01-13), genre.name),genre.name))", "score": -0.30202961457093414, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,2016-01-13),getData(has_genre),movie.id,cast.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3068232723445949, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,Released),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3078313245140378, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),person.birth_day,<=,Released), genre.name),genre.name))", "score": -0.33183989797194985, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),movie.release_date,<=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3361522754437762, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.birth_day,<=,2016-01-13),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3554989134189311, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.release_date,<=,2016-01-13), person.death_place),genre.name))", "score": -0.35992689814526657, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<,2016-01-13), genre.name),genre.name))", "score": -0.37868669907930613, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What is the genre name for movies with the status Released and in which persons were involved who died before or at 2016-01-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,<=,2016-01-13), genre.name),genre.name))", "score": -0.3823551056258782, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-01-13),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.10851730191804677, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,special effects), person.death_place),person.death_place))", "score": -0.19285575869203428, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.birth_place))", "score": -0.19950294802120047, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),company.name))", "score": -0.24489233723123852, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.2524777000925944, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.3058230726344766, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.30751751809404126, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "score": -0.31015991323087705, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.31132079313661254, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.31232075958547595, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "score": -0.32094669531811876, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.351275398741161, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects), person.death_place),person.death_place))", "score": -0.35809934789788944, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,special effects), person.death_place),person.birth_place))", "score": -0.3627480878400986, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.death_place))", "score": -0.3635052890412644, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>=,2000-01-01), company.name),company.name))", "score": -0.15900285487382346, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "score": -0.18348266179786862, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2000-01-01), company.name),company.name))", "score": -0.18562227405799986, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "score": -0.20801731387651115, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2000-01-01), company.name),company.name))", "score": -0.21010208098204503, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.23249712080055632, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,2000-01-01), company.name),company.name))", "score": -0.28483512085943485, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2000-01-01), company.name),company.name))", "score": -0.30745556628908616, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,2000-01-01), company.name),company.name))", "score": -0.30931492778348, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.3319353732131313, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>=,2000-01-01), company.name),company.name))", "score": -0.3425998291199392, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,<=,2000-01-01), company.name),company.name))", "score": -0.36185957623342063, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "score": -0.3670796496805143, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2000-01-01), company.name),company.name))", "score": -0.3692192619406456, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<=,2000-01-01), company.name),company.name))", "score": -0.388479009054127, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))", "score": -0.00629054586897837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.original_language),movie.original_language))", "score": -0.7356750365070184, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),language.name))", "score": -0.7618381768188556, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.original_language))", "score": -0.7850218677849625, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.title))", "score": -0.7870204239807208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.revenue),movie.original_language))", "score": -0.8085637355179642, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.budget))", "score": -0.8184309392891009, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), language.name),movie.original_language))", "score": -0.8197949195237015, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.original_language))", "score": -0.8341084981293534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.original_language),movie.original_language))", "score": -0.8422567840389092, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.revenue))", "score": -0.845550158592232, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.vote_count))", "score": -0.8602862745246966, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,=,Post Production), movie.original_language),movie.original_language))", "score": -0.862027465896972, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Post Production), movie.original_language),movie.original_language))", "score": -0.8873015042117913, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Post Production), movie.original_language),movie.original_language))", "score": -0.9048996563724359, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.02476782432201852, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.21623433675788406, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,<,1940-04-05),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.266383910298035, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.2914062477949444, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.363957320626883, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,<,1940-04-05), movie.title),movie.title))", "score": -0.3784243426943241, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1940-04-05),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.37945920133446315, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.3948738391225443, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.39708833046882025, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.budget))", "score": -0.40596410550821876, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.4272577019624999, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4318138403826848, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.435182935755617, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4393659285988136, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "Name the movie titles which cast an oscar wining personality born before 1940-04-05.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<,1940-04-05), movie.title),movie.title))", "score": -0.4467292247574408, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1940-04-05),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.16426320648345535, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "score": -0.22502042928411212, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.number))", "score": -0.23152828455469018, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2550402143815446, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,production_company.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2566966405047766, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2573131083618194, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),company.name))", "score": -0.2835976114335689, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2981920140566647, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), movie.title),movie.title))", "score": -0.2987898232433909, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,movie.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.3009964241761519, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.31007398973443223, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.3139419104752032, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,has_keyword.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "score": -0.3157974371822014, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,production_company.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "score": -0.31745386330543335, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,expiration),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), movie.title),oscar.category))", "score": -0.3180703311624762, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.0581165941421874, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.1743602682010522, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,TV Movie),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.25217500167978285, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.25931350553745364, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,<,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.2942352775643742, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),person.death_place,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.39185598832826163, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.39881816247132934, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,<=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.3993457594020005, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4004413853671526, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4070117147207403, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,<,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4266768921151455, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),has_genre.genre_id,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4297382365710535, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4407741871348461, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,spoken_language.iso_639_1),movie.revenue),movie.vote_count))", "score": -0.44408705251856506, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4821045860158724, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.09346446546163313, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.19372453550772623, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.number))", "score": -0.2616656799303287, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.28070033431142966, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.gender,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.2847000166506842, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.2879187718025207, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.number),oscar.sub_category))", "score": -0.29954130400370116, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.3018765976010988, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.year))", "score": -0.3090359449922283, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.year),oscar.sub_category))", "score": -0.31100541212160393, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.35212293771627273, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.36021016716496274, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.number))", "score": -0.36088447838922866, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.category))", "score": -0.3715895461969754, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar sub categories people won an oscar which did not die in Ventura, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.number,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))", "score": -0.3773146017395313, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Ventura, Kalifornien), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))", "score": -0.1216347691079136, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.runtime))", "score": -0.30429950621328317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.title))", "score": -0.36806890633306466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.release_date))", "score": -0.425895514752483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),person.birth_place))", "score": -0.4378542926569935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.vote_average))", "score": -0.4554372754355427, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.vote_average),movie.status))", "score": -0.49765311073861085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.popularity))", "score": -0.5084891345759388, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),production_country.iso_3166_1))", "score": -0.5166058566828724, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,139000000), movie.status),movie.status))", "score": -0.5776616822404321, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),person.birth_day))", "score": -0.5902317788859364, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),oscar.sub_category))", "score": -0.5954799082537647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),oscar_winner.movie_id))", "score": -0.5998580482264515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),production_country.movie_id))", "score": -0.6002798702975269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}, {"orig_question": "Give me the status of all movies with revenue other than 139000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.original_language))", "score": -0.605693402554607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,139000000), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.0049334284631186165, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.title),movie.title))", "score": -0.7190504311365657, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.7856004757803613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.budget))", "score": -0.7926647801432409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.800573504235079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.title))", "score": -0.8149584872662672, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Post Production), movie.title),movie.title))", "score": -0.8347566365046077, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), company.name),movie.title))", "score": -0.8540324313580641, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,=,Post Production), movie.title),movie.title))", "score": -0.855496311072784, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),company.name))", "score": -0.8632387061152258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.title),movie.title))", "score": -0.8660049079699093, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.original_language))", "score": -0.8672836561236181, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Post Production), movie.title),movie.title))", "score": -0.8910941718859249, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.vote_count))", "score": -0.9220686097178259, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.title))", "score": -0.9496922237813124, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.1074074036997121, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "score": -0.16720361381044682, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.name))", "score": -0.21167809015073952, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.birth_day))", "score": -0.256535939880852, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_place))", "score": -0.25927103185647454, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.2785805676715381, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.27944036957818236, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.28784340703180483, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.birth_day))", "score": -0.2952237650955328, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.death_day))", "score": -0.31633214999158676, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "score": -0.3383767777822728, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "score": -0.33923657968891713, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.34009822231944953, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),oscar.year))", "score": -0.34197266955396394, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.death_day))", "score": -0.34763961714253955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.08906049262441328, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.1480316897058124, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.21140494592005254, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.22824977463747842, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.33744878546426654, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.3448020490898804, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "score": -0.34515771112018534, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "score": -0.3720938651309722, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.3910458385129117, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), keyword.id),movie.vote_average)", "score": -0.39518207196229344, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.id),movie.vote_average)", "score": -0.39570443203182987, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,<=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.4037732461712795, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),movie.vote_average)", "score": -0.43414015407660195, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.450017044951659, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.45511876193325784, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.06335250543284171, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.1764560946055732, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.2505127570487444, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Dennis Gordon),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.2843570648074143, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.3056877652969055, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.runtime),movie.runtime)", "score": -0.31320260315899073, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.3194800978809009, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.3773776248892039, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.3824537169111868, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,=,Dennis Gordon),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.4046322901135127, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.4053422448688417, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.release_date),movie.runtime)", "score": -0.4077687218232032, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.4164471520991274, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,Dennis Gordon), movie.id),movie.runtime)", "score": -0.41744396148114493, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of distinct movies where a person named \"Dennis Gordon\" was part of the crew ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Dennis Gordon), movie.runtime),movie.runtime)", "score": -0.42017303846305654, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Dennis Gordon),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "score": -0.02804672324054991, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,156), movie.vote_count),movie.vote_count))", "score": -0.28210415110879694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,156), movie.vote_count),movie.vote_count))", "score": -0.381565170147951, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,156), movie.vote_count),movie.vote_count))", "score": -0.7250971959620074, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.revenue),movie.vote_count))", "score": -0.7266507365457073, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.title))", "score": -0.8086337109743909, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,156), movie.vote_count),movie.vote_count))", "score": -0.8421833680658892, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,156), movie.vote_count),movie.vote_count))", "score": -0.8560169566953846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.title),movie.vote_count))", "score": -0.8571657755128399, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,156), movie.vote_count),movie.vote_count))", "score": -0.8691919611483172, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), person.death_day),movie.vote_count))", "score": -0.8732201673738018, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.budget),movie.vote_count))", "score": -0.9192962863198773, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))", "score": -0.9293209413881414, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_average))", "score": -0.9388808866679028, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which are the vote counts of the movies with a runtime lower than 156?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,156), movie.vote_count),movie.vote_count))", "score": -0.944465540775127, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,156), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.13129598599552847, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.1633013199197715, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.20670341948749257, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.2495131255124383, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.25003566705781877, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.26573943520349314, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.26623423719360084, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.name,=,Gerard Johnstone),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.2743871221245429, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.release_date,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.30701452704833154, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,Gerard Johnstone),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.popularity)", "score": -0.3081300936461736, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(filter(getData(person),person.name,=,Gerard Johnstone),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.popularity)", "score": -0.32604565211154907, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.32623450665941894, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.3441631537848296, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,Gerard Johnstone),getData(movie),crew.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.34961558695361195, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a crew member named \"Gerard Johnstone\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.homepage,=,Gerard Johnstone), movie.id),movie.popularity)", "score": -0.37908736914704483, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,Gerard Johnstone), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.27664341300953055, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.2805613639019853, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.310783121821603, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.3147010727140577, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Polski),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.317855882116446, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.3201420221600371, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.3240599730524918, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.34464502087603033, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.title))", "score": -0.34856297176848505, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.3542817309721095, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,movie.id), language.name),movie.title))", "score": -0.3565530291951169, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.3581996818645642, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,movie.id), language.name),movie.title))", "score": -0.360471022173918, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.3787847717744492, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have been translated to Polski?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.title))", "score": -0.38270272266690386, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Polski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "score": -0.2545265665103216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), movie.original_language),movie.original_language))", "score": -0.26793808097136207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "score": -0.2901613967330177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),language.name))", "score": -0.29761869812500663, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), movie.original_language),language.name))", "score": -0.31103021258604713, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), language.name),movie.original_language))", "score": -0.3502067996014375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), language.name),movie.original_language))", "score": -0.363618314062478, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), language.name),language.name))", "score": -0.3932989312161226, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), language.name),language.name))", "score": -0.4067104456771631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),movie.original_language))", "score": -0.4096288825276051, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,Sky High), language.name),language.name))", "score": -0.42943622340086796, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,=,Sky High), language.name),language.name))", "score": -0.49002560608665213, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "score": -0.49457155116604584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,=,Sky High), language.name),language.name))", "score": -0.512470611258647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),genre.name))", "score": -0.51393695937482, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.title),movie.title))", "score": -0.2707457009382779, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(getData(genre),movie.original_language,=,af), movie.title),movie.title))", "score": -0.3559158507414395, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(getData(person),movie.original_language,=,af), movie.title),movie.title))", "score": -0.3728976759739453, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(getData(country),movie.original_language,=,af), movie.title),movie.title))", "score": -0.4288073394127423, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),genre.name,=,af), movie.title),movie.title))", "score": -0.47617673386412207, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "score": -0.51627174781222, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "score": -0.5179247577350475, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "score": -0.5228528119525653, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "score": -0.5245058218753929, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "score": -0.5314292207876571, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "score": -0.5380102849280024, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "score": -0.5410203270047843, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),genre.name,=,af), movie.title),movie.title))", "score": -0.5426733270636245, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "score": -0.5476013812811422, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many movies in africaans exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,af), movie.title),movie.title))", "score": -0.5492543912039698, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,af), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Algeria), movie.title),movie.title))", "score": -0.1151581616140902, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,!=,Algeria), movie.title),movie.title))", "score": -0.14401724049821496, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Algeria), movie.title),movie.title))", "score": -0.31207317719236016, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Algeria), movie.title),movie.title))", "score": -0.3403597280014909, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,!=,Algeria), movie.title),movie.title))", "score": -0.44091818341985345, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),company.name,!=,Algeria), movie.title),movie.title))", "score": -0.525306558702141, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.original_language,!=,Algeria), movie.title),movie.title))", "score": -0.530182337778387, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Algeria), movie.title),movie.title))", "score": -0.5348474741913378, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,!=,Algeria), movie.title),movie.title))", "score": -0.5680165053345263, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),genre.name,!=,Algeria), movie.title),movie.title))", "score": -0.5872935185916589, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,!=,Algeria), movie.title),movie.title))", "score": -0.6045611859299242, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Algeria), movie.title),movie.title))", "score": -0.6126973053906113, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),production_country.movie_id,!=,Algeria), movie.title),movie.title))", "score": -0.62461898336187, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Algeria), movie.title),movie.title))", "score": -0.641556384274736, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_place,!=,Algeria), movie.title),movie.title))", "score": -0.6756867082440294, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))", "score": -0.08124223681079457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),person.birth_day))", "score": -0.30422064246522496, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), person.birth_day),movie.release_date))", "score": -0.321672042402497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,9.3582), movie.release_date),movie.release_date))", "score": -0.45705541832285235, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.budget))", "score": -0.4633263606010587, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.runtime))", "score": -0.4881269592224271, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), person.birth_day),person.birth_day))", "score": -0.5446504480569274, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.revenue))", "score": -0.591685082334152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),person.death_day))", "score": -0.5953135746894986, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.runtime),movie.release_date))", "score": -0.5983745060293586, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,9.3582), movie.release_date),movie.release_date))", "score": -0.6048120246632607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.budget),movie.release_date))", "score": -0.6479136548368842, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),crew.movie_id))", "score": -0.6710689324318082, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,9.3582), movie.release_date),person.birth_day))", "score": -0.6800338239772827, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}, {"orig_question": "On which dates were movies released with a higher popularity than 9.3582?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,9.3582), person.birth_day),movie.release_date))", "score": -0.6974852239145548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,9.3582), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.06876456495956518, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.24066138033377887, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.3366703427448137, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.39516131742548294, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4478895295469556, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.46450704482002475, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(company),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4758680392114911, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.4834371552130147, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.status))", "score": -0.49580981784654726, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),person.gender))", "score": -0.4994199403410054, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.5031043915184685, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.522034490200697, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),merge(getData(movie),getData(cast),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.5314323340585536, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.release_date))", "score": -0.533083665865497, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.release_date))", "score": -0.5578765751852188, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.092852804486916, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.15026949244236074, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.15279343278785423, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.26738082729434615, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.2807776113221057, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.3247975152497909, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3273214555952844, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.sub_category))", "score": -0.33819429927755046, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.34071823962304393, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),person.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.352383755551228, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.3570002633267142, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.3718168494035154, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.number))", "score": -0.3783457613616665, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),company.name))", "score": -0.40258698078785876, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), keyword.name),oscar.number))", "score": -0.407307936954929, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.09612433375400756, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.19869997266734682, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.name),person.gender))", "score": -0.22369671400157448, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.name),person.name))", "score": -0.23288542712290652, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.24371424959435303, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.2915651086138373, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000),movie.budget,<=,550000), person.name),person.gender))", "score": -0.3037285364685549, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,spoken_language.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.30689371796424175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,>=,550000), person.name),person.gender))", "score": -0.32627235291491374, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.name),person.name))", "score": -0.33546106603624576, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.3462898885076923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.name),person.name))", "score": -0.36045780737047345, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.budget,<=,550000),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.36428033148407246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.3684886719401009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.37128662984191996, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.15386625995443165, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "score": -0.1842790368094568, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "score": -0.20775187694878258, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_count))", "score": -0.27544791570520416, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "score": -0.33581606605771946, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_count))", "score": -0.34109039344315273, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.35713279157461275, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.35719622788155686, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_count))", "score": -0.3645632335824785, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.37278275565324603, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.3785882304510618, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.37871526698019403, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(country),country.name,=,Morocco),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.38342472028426655, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Morocco),movie.popularity),movie.vote_average))", "score": -0.3841325520778428, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}, {"orig_question": "What is the rating of the movie with the highest popularity which was produced in Morocco?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),country.name,=,Morocco),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.vote_average))", "score": -0.3889320044574159, "correct_code": "done(extractValues(max(merge(merge(filter(getData(country),country.name,=,Morocco),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.024301224100576325, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.24559385289734006, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,Warrior), company.name),company.name))", "score": -0.34728288948368374, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.363797903198842, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Warrior),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.36409930833815185, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),company.name,!=,Warrior), company.name),company.name))", "score": -0.3887321460816331, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.39834002204650537, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),person.birth_place))", "score": -0.40015130625844353, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,>=,Warrior), company.name),company.name))", "score": -0.4033739874546607, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(production_company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.4040250185862502, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.status,!=,Warrior), company.name),company.name))", "score": -0.4056270054592565, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.40627726899957056, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),person.death_place))", "score": -0.4100945644415598, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,production_company.movie_id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.4200546293364162, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the companies names when the produced movie title was not Warrior?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,!=,Warrior), company.name),company.name))", "score": -0.4222351711222082, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Warrior),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.name,=,War), country.name),country.name))", "score": -0.22643188713791285, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2599430333993749, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.26565387808595287, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.27897302310665306, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.28138912382881515, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(getData(has_genre),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.2841010334174941, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,production_country.movie_id), country.name),country.name))", "score": -0.2960676507376034, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.29733826705245664, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_genre.genre_id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.3051544032060889, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.name,=,War), country.name),country.name))", "score": -0.31008176548907634, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.3104216792994575, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),genre.id,has_genre.genre_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.name,=,War), country.name),country.name))", "score": -0.310660328265057, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.3117758536613824, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_genre.genre_id,production_country.movie_id), country.name),country.name))", "score": -0.3271841860127775, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}, {"orig_question": "How many countries have movies in the genre War?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id),genre.name,=,War), country.name),country.name))", "score": -0.3343207299974355, "correct_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,=,War),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.id,has_genre.genre_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.18713561593221856, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.24106407402161242, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.24928981941833592, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2528073679623452, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.310772859660031, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.movie_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3251378152152162, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3256904670417266, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.32843493933628065, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.33336356061193967, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.33539336567029865, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.33666068473300415, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_nominee.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.34402659993334045, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_day,<=,1975-10-25), person.death_place),person.death_place))", "score": -0.36414889901153347, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_nominee.person_id,person.id),person.id,cast.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.36718369639582027, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,<=,1975-10-25), person.death_place),person.death_place))", "score": -0.37198764254633027, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))", "score": -0.07312176757549692, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,Sardaarji), company.name),company.name))", "score": -0.14735155664296776, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.23989268110328807, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,Sardaarji), company.name),company.name))", "score": -0.26501581083885994, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Sardaarji), company.name),company.name))", "score": -0.2787585003327715, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_average,=,Sardaarji), company.name),company.name))", "score": -0.2861705881790935, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Sardaarji), company.name),company.name))", "score": -0.2927548420214833, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Sardaarji),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.29908459713236896, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.homepage,=,Sardaarji), company.name),company.name))", "score": -0.3249023603997198, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),person.birth_place))", "score": -0.34462544053107663, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,Sardaarji), company.name),company.name))", "score": -0.3502466696107831, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,=,Sardaarji), company.name),company.name))", "score": -0.3640935641196938, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,<=,Sardaarji), company.name),company.name))", "score": -0.3815726021462275, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.original_language,=,Sardaarji), company.name),company.name))", "score": -0.38677417109898465, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), person.birth_place),company.name))", "score": -0.3992818064384299, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.09080858943929834, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.1256405457416271, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.2479262647968099, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.2942623592418302, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "score": -0.34608193936132, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,theatre audience), movie.id),movie.vote_average)", "score": -0.37093212237400774, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.3827013102314249, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.41753326653375367, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.43781860916117554, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.id),movie.vote_average)", "score": -0.45002622151408433, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.45419644127749603, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id), movie.id),movie.vote_average)", "score": -0.4548951721905303, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),movie.vote_average)", "score": -0.459010428024785, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.runtime),movie.vote_average)", "score": -0.46625153197371033, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), keyword.id),movie.vote_average)", "score": -0.4700113485109031, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.007269757574249525, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,1100000), movie.original_language),movie.original_language))", "score": -0.6222457356125233, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1100000), movie.original_language),movie.original_language))", "score": -0.7585178084045765, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),language.name))", "score": -0.7668216594101978, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,1100000), movie.original_language),movie.original_language))", "score": -0.7715811254529399, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,1100000), movie.original_language),movie.original_language))", "score": -0.7842964055089396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,1100000), movie.original_language),movie.original_language))", "score": -0.7918545128850383, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), language.name),movie.original_language))", "score": -0.7987087729925406, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.popularity),movie.original_language))", "score": -0.8037171724790824, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.revenue),movie.original_language))", "score": -0.817514932488848, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.budget))", "score": -0.8183291324021411, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,1100000), movie.original_language),movie.original_language))", "score": -0.8476768853215617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.budget),movie.original_language))", "score": -0.8503015998358023, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.title))", "score": -0.8526174791695666, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.revenue))", "score": -0.8559494980218005, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.07847777270848523, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,160), genre.name),genre.name))", "score": -0.14546367755077724, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.2220467728258085, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "score": -0.26025782012652016, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>,160), genre.name),genre.name))", "score": -0.27540773583393635, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>=,160), genre.name),genre.name))", "score": -0.2756208428178707, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>=,160), genre.name),genre.name))", "score": -0.2790254421772657, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "score": -0.3313653339066623, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>,160), genre.name),genre.name))", "score": -0.34239364067622835, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>=,160), genre.name),genre.name))", "score": -0.34570114348154285, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<=,160), genre.name),genre.name))", "score": -0.34595012301463923, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.homepage,>=,160), genre.name),genre.name))", "score": -0.34683615080654784, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.36199510983861355, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),person.birth_day,>=,160), genre.name),genre.name))", "score": -0.3715394270929139, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.3872124179407158, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))", "score": -0.02485112563772418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.popularity),movie.popularity))", "score": -0.3808061238105438, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.popularity),movie.popularity))", "score": -0.4120428319747589, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.revenue))", "score": -0.6354579049821041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.release_date))", "score": -0.639716597246661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),person.gender))", "score": -0.6762895304436825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,Released), movie.popularity),movie.popularity))", "score": -0.7006441708381317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.release_date),movie.popularity))", "score": -0.7388901018730394, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.status))", "score": -0.7393671590562008, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.original_language))", "score": -0.7488992530579708, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.popularity))", "score": -0.7636788987747423, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.vote_average))", "score": -0.7798903304810665, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Released), movie.popularity),movie.popularity))", "score": -0.8044913168723724, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.popularity),movie.popularity))", "score": -0.8304621334846161, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}, {"orig_question": "What are the different popularities for released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,Released), movie.popularity),movie.popularity))", "score": -0.8414968400338694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.08425573990098201, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.26211009160033427, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_day))", "score": -0.43925622836104594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5111664614232723, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_place),person.name))", "score": -0.5172825342451688, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5375492268649396, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.birth_place))", "score": -0.5421119107340928, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_day),person.name))", "score": -0.5430822855269071, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_place),person.name))", "score": -0.5644277817045804, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.6492155202140566, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.6797424076648895, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.6802021868934389, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_place),person.death_place))", "score": -0.695136885944521, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.birth_day),person.name))", "score": -0.7092704361712094, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),cast.person_id))", "score": -0.7143664731120225, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.10275195251027339, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.category))", "score": -0.28136949120133786, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.year,=,1995), oscar.number),oscar.number))", "score": -0.282635376022964, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.2891239691963504, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.30164589105066003, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.32054544992105716, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.sub_category))", "score": -0.33582518317907556, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,!=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.3541941334530778, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.person_id), oscar.number),oscar.number))", "score": -0.35732674758366517, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.36182837463274353, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.3779885365372936, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.38485916692389566, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.year,=,1995), oscar.category),oscar.number))", "score": -0.38608073814534827, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.number),oscar.number))", "score": -0.39579144697967183, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1995), oscar.number),oscar.number))", "score": -0.39835784632697374, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.14875312297002813, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.26336058359824, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2662757843358104, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_count)", "score": -0.26815809220818687, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.year,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2998420414863955, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.30490382924540543, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.vote_count,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.32617483725467195, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,>=,63),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.vote_count)", "score": -0.3287090288272997, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.vote_count,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3287807679409741, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.runtime,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3397977656115219, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,63),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.runtime,>,63),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3424036755129643, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,<=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.34801099953708714, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.name,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.34992922926571646, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.35888995634664606, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movies vote count for movies nominated for oscars with an oscar number of 63 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),person.death_day,>=,63),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3780490167853313, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,63), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_count))", "score": -0.08900995658041211, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))", "score": -0.20916171104909154, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.revenue),movie.vote_count))", "score": -0.41631999531091424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<=,238), movie.vote_count),movie.vote_count))", "score": -0.4290826740980265, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,238), movie.vote_count),movie.vote_count))", "score": -0.4842024865865824, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.revenue),movie.vote_count))", "score": -0.5364717497795937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,=,238), movie.vote_count),movie.vote_count))", "score": -0.6352674785375712, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,238), movie.vote_count),movie.vote_count))", "score": -0.6378407898664591, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.runtime),movie.vote_count))", "score": -0.6423806838065502, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_average),movie.vote_count))", "score": -0.6518880418807385, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), person.death_day),movie.vote_count))", "score": -0.6909965566665051, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_count))", "score": -0.7040757368631603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,238), movie.vote_count),movie.vote_average))", "score": -0.7185086630124715, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,null,238), movie.vote_count),movie.vote_count))", "score": -0.7242473341830191, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes did the movies get that are longer than 238 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<=,238), movie.revenue),movie.vote_count))", "score": -0.7563927281953511, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,238), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.0398757526376286, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,!=,184376254), country.name),country.name))", "score": -0.2021363176090211, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>=,184376254), country.name),country.name))", "score": -0.26055496628903213, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,184376254), country.name),country.name))", "score": -0.2882969036446293, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,>,184376254), country.name),country.name))", "score": -0.2888157617876153, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.3784677600192861, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.revenue,>,184376254), country.name),country.name))", "score": -0.37900377172728644, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(genre),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.3987672064349728, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.4038564486142339, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.4038864601702523, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.408179946285832, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),production_country.iso_3166_1))", "score": -0.43160883858856064, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.43779045761554714, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.443252805892052, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries have movies been produced that had a revenue off more than 184376254?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,184376254), country.name),country.name))", "score": -0.4479546912680751, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,184376254),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.19172435040991606, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.21498386992514545, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.23761069675707966, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.company_id), company.name),company.name))", "score": -0.23776030011052043, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,None,Documentary), None),None))", "score": -0.24656380431745942, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),country.name,!=,Documentary), company.name),company.name))", "score": -0.24767320661881953, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.2574991323320356, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.26486606249914024, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,None,Documentary), None),None))", "score": -0.2664885441051472, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),has_genre.movie_id,movie.id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.2695867568127742, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),company.name,!=,Documentary), company.name),company.name))", "score": -0.2703474455361961, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),has_genre.movie_id,has_genre.genre_id),getData(company),production_company.company_id,company.id),country.name,!=,Documentary), company.name),company.name))", "score": -0.2709327432937011, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Documentary),getData(company),production_company.company_id,company.id),genre.name,!=,Documentary), company.name),company.name))", "score": -0.271546719157204, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),genre.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,Documentary), company.name),company.name))", "score": -0.2794567432923179, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many production companies were involved in movies that did not belong to the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.company_id), company.name),company.name))", "score": -0.2887083914133502, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.36622343860017353, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3690527150624786, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3745122025968455, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.37734147905915055, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3801127286203181, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.38294200508262316, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3843023896013353, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.38840149261699003, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3912307690792951, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3914277174840182, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3934224316016633, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.4005477594843462, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.4161887664844336, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Heather Fielding),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.41901804294673867, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average of the oscars numbers when the oscar winner name is Heather Fielding?", "inferred_code": "avg(distinct(merge(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.46336421927377297, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Heather Fielding),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "score": -0.04882528074567906, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,<,2013-01-14), movie.id),movie.revenue)", "score": -0.45032407313313455, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(filter(getData(movie),movie.release_date,<=,2013-01-14),movie.revenue)", "score": -0.5957538108941576, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,!=,2013-01-14), movie.id),movie.revenue)", "score": -0.6119590432947293, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,<=,2013-01-14), movie.id),movie.revenue)", "score": -0.6416317742190243, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,=,2013-01-14), movie.id),movie.revenue)", "score": -0.6678304607071067, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),person.birth_day,=,2013-01-14), movie.id),movie.revenue)", "score": -0.6819964569153821, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),person.gender,=,2013-01-14), movie.id),movie.revenue)", "score": -0.6830910190418108, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,2013-01-14), movie.id),movie.revenue)", "score": -0.6953618011978441, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.budget)", "score": -0.705732303228461, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(filter(getData(movie),movie.release_date,<,2013-01-14),movie.revenue)", "score": -0.7374880373417411, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(filter(getData(movie),movie.release_date,>=,2013-01-14),movie.revenue)", "score": -0.7771964027168341, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,=,2013-01-14), movie.id),movie.revenue)", "score": -0.8397885413310731, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.homepage,=,2013-01-14), movie.id),movie.revenue)", "score": -0.8418740650534452, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.vote_count)", "score": -0.8548501271705864, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.07374726169480035, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.1914098209072188, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), person.death_day),oscar.number))", "score": -0.23170309006725204, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.category))", "score": -0.26179469817563794, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,person.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.26853000942888405, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.sub_category))", "score": -0.28500945597843513, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_day,<,1999-03-07),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.3040252421014199, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))", "score": -0.3131112889108787, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,<,1999-03-07), oscar.number),oscar.number))", "score": -0.3543750975610071, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.36530322138241145, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_day,<,1999-03-07),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,person.id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.3735958230361308, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar_nominee.movie_id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.3816463985332058, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.id))", "score": -0.38467625054249394, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,<,1999-03-07), oscar.number),oscar.category))", "score": -0.3901568581629632, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}, {"orig_question": "What are the oscar number of the oscar nomineed persons which have died before 1999-03-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.movie_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<,1999-03-07), oscar.number),oscar.number))", "score": -0.3939175619059154, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,<=,1999-03-07), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),country.name))", "score": -0.03697851124053422, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "score": -0.22185610925352764, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id),movie.budget,>=,200000), country.name),country.name))", "score": -0.27840666802378866, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<=,200000), country.name),country.name))", "score": -0.2981023001045318, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,200000), country.name),country.name))", "score": -0.31543930534721465, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,>=,200000), country.name),country.name))", "score": -0.353550737835157, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>=,200000), country.name),country.name))", "score": -0.35888048186347055, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,!=,200000), country.name),country.name))", "score": -0.3743887558885534, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "score": -0.3886944438525715, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.movie_id),movie.budget,>=,200000), country.name),country.name))", "score": -0.39341392699751704, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),genre.name))", "score": -0.3951295838314095, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.budget,>=,200000), country.name),country.name))", "score": -0.3973817391351247, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.budget,>=,200000), country.name),country.name))", "score": -0.3995035998173503, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>=,200000), country.name),country.name))", "score": -0.4012616461854869, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000), country.name),production_country.iso_3166_1))", "score": -0.40258214545256205, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.19234541281112705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.19429942428354774, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.24026841779619337, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.sub_category))", "score": -0.2583654360030887, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.2603194474755094, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.2969441822681332, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2988981937405539, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.306288440988155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3129797281622379, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3149337396346586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),person.birth_day,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.34294020961314087, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.34486718725319954, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),person.birth_day,>=,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.34489422108556156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.36090273314730426, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "Is there an oscar edition where a movie released after 2016-03-17 won?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>=,2016-03-17),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.4615643144437892, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,2016-03-17),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.26463292153179485, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.27181893038543414, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.27198483033287857, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.27917083918651786, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(oscar),oscar_winner.oscar_id,person.id), person.name),person.name))", "score": -0.3049887765543286, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.35686521616252775, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "score": -0.36044287457840024, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(oscar),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.3613903794903367, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.364051225016167, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.3642171249636114, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "score": -0.36762888343203953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "score": -0.36779478337948396, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.3714030407842744, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.name),person.death_place))", "score": -0.3749807435058905, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.oscar_id,person.id), person.name),person.name))", "score": -0.37532368912253705, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09742940452037743, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(language),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.2487368162002518, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.24904242398970702, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.27978311985110393, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3038391766496384, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.31583842554601865, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(cast),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.33382284367125525, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,1995-11-22), keyword.name),keyword.name))", "score": -0.33434647505346576, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,cast.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3454293852758672, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(oscar),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.36750124293268677, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3720564907559423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))", "score": -0.37729125529659197, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "score": -0.37746294822596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.38571999196121226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}, {"orig_question": "Do keywords exist for movies released after 1995-11-22?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,1995-11-22),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),spoken_language.iso_639_1,keyword.id), keyword.name),keyword.name))", "score": -0.38872710160276314, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>,1995-11-22), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.1703660383668876, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.1830093863240984, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.19454745309481764, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.1995804909442117, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2582918431700907, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),movie.status,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.28147410366823933, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2824732578980207, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.30565551839616933, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.30660423581064106, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.32212179257256396, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.32317534043075435, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "score": -0.3497063694271661, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.movie_id),movie.status,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.35753283672124975, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.3592817057241596, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "score": -0.36627750201254905, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.10368554719791638, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.14966077391997387, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.21615674938852417, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,<=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2550731211848304, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.26138337493080127, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2656521002758277, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2902141882221941, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.30104834790688784, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,<,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.30305986704908466, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar_winner.oscar_id,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.30408726564745536, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,>=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.32155691943974674, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,>,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3414690065840355, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,<=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.34491332072660885, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,documentary (feature)), movie.title),movie.title))", "score": -0.3644404587609996, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,>=,documentary (feature)), movie.title),movie.title))", "score": -0.37481336980950125, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.030599916757637402, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,182016617), movie.budget),movie.budget))", "score": -0.27151254418640747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,182016617), movie.budget),movie.budget))", "score": -0.43859536054878845, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,182016617), movie.budget),movie.budget))", "score": -0.6666166544273437, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.release_date),movie.budget))", "score": -0.699676733402157, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.7298894408122578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.revenue),movie.budget))", "score": -0.7512888125456811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.title))", "score": -0.7623394879592524, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,182016617), movie.budget),movie.budget))", "score": -0.7678325847336964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,182016617), movie.budget),movie.budget))", "score": -0.7745007038429321, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), person.death_place),movie.budget))", "score": -0.8061750940360071, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.release_date))", "score": -0.8105610164893733, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),person.death_place))", "score": -0.8229306492103206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,>,182016617), movie.budget),movie.budget))", "score": -0.8245463446328358, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,null,182016617), movie.budget),movie.budget))", "score": -0.836532092125708, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.10653100122236675, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.13947060580892645, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.16354933588245232, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "score": -0.2524401448975822, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(merge(getData(person),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.311796707425202, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(merge(getData(person),getData(person),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.35220029381084594, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.3701421486861968, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,!=,m),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.37432568450394693, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.377818198423546, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m),movie.vote_average)", "score": -0.3881168710523946, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_place,!=,m), movie.id),movie.vote_average)", "score": -0.4113325645259078, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.vote_average)", "score": -0.43373918127629174, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,!=,m), movie.id),movie.vote_average)", "score": -0.4386152140602899, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,m), movie.id),movie.vote_average)", "score": -0.4511910624510488, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.5061823856747956, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.21412550469742164, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.26340045160359643, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.27618678081572173, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.28744696851589724, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.2949761649437382, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2981785049614229, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3180430433945409, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3184363336566197, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.336721915422072, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.oscar_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3400347675402421, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3404280578023209, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.34425111184991297, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.360292627246431, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,Paul Hirsch),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.36829764091049305, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies are there for which Paul Hirsch received an Oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3822843624674865, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Paul Hirsch),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.10250712789330986, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.1041467258492047, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.16538647429314032, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "score": -0.25514409905672747, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.2811538093954606, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,oscar_nominee.person_id), movie.id),movie.vote_average)", "score": -0.29029958552687024, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2919507868779838, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.30585536421547044, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,person.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "score": -0.3194062959216113, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average)", "score": -0.363789535995899, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,person.id), movie.id),movie.vote_average)", "score": -0.36884811677899, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.36945935632679333, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3710989542826882, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_place,=,Falmouth, Massachusetts),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.vote_average)", "score": -0.37507374653764, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the average vote average of movies with oscar nominees died in Falmouth, Massachusetts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,oscar.id), movie.id),movie.vote_average)", "score": -0.38533992736611317, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,Falmouth, Massachusetts),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.04076054334707002, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.17180363101931678, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,35841901), company.name),company.name))", "score": -0.220504824903461, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.26463396653906446, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,35841901), company.name),company.name))", "score": -0.3352923665680286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,35841901), company.name),company.name))", "score": -0.3377285546661663, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,35841901), company.name),company.name))", "score": -0.37907477447402926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,35841901), company.name),company.name))", "score": -0.40619131758211424, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,=,35841901), company.name),company.name))", "score": -0.40990108282432713, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),movie.title))", "score": -0.41354926965028316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),production_company.company_id))", "score": -0.42825595798429056, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.42932131189114014, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,35841901), company.name),company.name))", "score": -0.43537353481936686, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.birth_place))", "score": -0.43789871079368725, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,=,35841901),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.43838694892621366, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.02404731250778267, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3197631516772746, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(has_genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3244883162680445, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.release_date))", "score": -0.33636407564730314, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,has_genre.genre_id), movie.popularity),movie.popularity))", "score": -0.3476823497293943, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3655879761226885, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),person.gender))", "score": -0.37821573087872484, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.revenue))", "score": -0.3800915237687892, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.status))", "score": -0.38045355495083255, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.4014917639099542, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.movie_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.4186952516030401, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,spoken_language.iso_639_1),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.42396152056066944, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,genre.id), movie.popularity),movie.popularity))", "score": -0.42994745898153597, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.id,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.43319610738427305, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies in the Adventure genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.4342425612681949, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.22914998299463296, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.23466937696019682, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.2541235247841645, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.2596429187497284, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.3198886597717837, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_day),person.death_place))", "score": -0.32283709186754905, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3254080537373476, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.32667555272697135, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3283564858331129, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.33219494669253524, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_day),person.death_place))", "score": -0.3478106336570806, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.35164909451650295, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_place),person.death_place))", "score": -0.35333001862391905, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>=,af),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3571684794833414, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,>,af),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.3821453704600196, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.23303307728201617, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.36578073115379084, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.41224677363061346, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.5175891059043352, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(getData(movie),movie.vote_count,<=,1183),movie.revenue),movie.revenue))", "score": -0.6052954069673433, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.6078063384193229, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.6230600750326478, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count,=,1183),movie.revenue),movie.revenue))", "score": -0.6310290478551595, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count,<=,1183),movie.revenue),movie.revenue))", "score": -0.6338985746966006, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,has_keyword.keyword_id),movie.vote_count,=,1183),movie.revenue),movie.revenue))", "score": -0.6403107263931261, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,has_keyword.keyword_id),movie.vote_count,<=,1183),movie.revenue),movie.revenue))", "score": -0.6431802662481085, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(getData(movie),movie.vote_count,=,1183),movie.revenue),movie.revenue))", "score": -0.6488815493285074, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "score": -0.653072839093511, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,oscar_nominee.oscar_id),movie.vote_count,=,1183),movie.revenue),movie.revenue))", "score": -0.6535147358492976, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),keyword.id,oscar_nominee.oscar_id),movie.vote_count,<=,1183),movie.revenue),movie.revenue))", "score": -0.6563842626907387, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.0865455509877282, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.vote_average)", "score": -0.3176530599742365, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.vote_average)", "score": -0.35162696461345033, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,de), movie.id),movie.vote_average)", "score": -0.4571229593935315, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.vote_average)", "score": -0.48272065932493746, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.popularity)", "score": -0.6234015928370127, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),country.name,=,de), movie.id),movie.vote_average)", "score": -0.7008934436070939, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.title,=,de),movie.vote_average)", "score": -0.7105138061603989, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),production_country.movie_id,=,de), movie.id),movie.vote_average)", "score": -0.7345401557496674, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,=,de),movie.vote_average)", "score": -0.7388462370689648, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,de), movie.id),movie.vote_average)", "score": -0.7881695083773123, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.runtime)", "score": -0.7971427479350114, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,de), movie.vote_average),movie.vote_average))", "score": -0.7972664359185728, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.popularity)", "score": -0.8497922259037065, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.popularity)", "score": -0.8545091018235209, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.11031186332642029, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.3450808158801377, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.394619886935536, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.homepage,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.41496125051348265, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.tagline,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.4341948829362162, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),genre.name,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.48739866635575474, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.497012870657612, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5311817856495046, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),person.gender,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5352963008661044, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5523816298971773, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5669473890219981, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.596433698294601, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,The Object of My Affection), movie.popularity),movie.popularity)", "score": -0.6260980021279254, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),has_genre.movie_id,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6394710760789676, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6648146060916909, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.016261438191577327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.5260578602577916, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.5411443748874083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.5650656871341816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.5862819157360865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,cast.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.6127656826610152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.6127964546374497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.6154198543736129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,cast.movie_id),getData(movie),spoken_language.movie_id,movie.id),movie.budget,!=,260000000), movie.title),movie.title))", "score": -0.6366870198273357, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.budget))", "score": -0.6677286988633568, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,260000000), movie.title),movie.title))", "score": -0.6727409773084219, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,260000000), movie.title),movie.title))", "score": -0.6820719652387197, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,260000000), movie.title),movie.title))", "score": -0.6926728085891227, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,260000000), movie.title),movie.title))", "score": -0.75759371084132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}, {"orig_question": "What are the Names of the Movie Titles Where the Movie Budget is not 260000000", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,260000000), movie.title),movie.title))", "score": -0.7577366047116811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,260000000), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.10874807243190147, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))", "score": -0.19937963121795635, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>=,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.22179885788194365, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>,2012-08-06), company.name),company.name))", "score": -0.22921545734090615, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>,2012-08-06), company.name),company.name))", "score": -0.2504825626822264, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2012-08-06), company.name),company.name))", "score": -0.25534309535209837, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2012-08-06), company.name),company.name))", "score": -0.25895088537693645, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2012-08-06), company.name),company.name))", "score": -0.262212479303832, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,>,2012-08-06), company.name),company.name))", "score": -0.27009500657286906, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>=,2012-08-06), company.name),company.name))", "score": -0.2887867114998863, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,2012-08-06), company.name),company.name))", "score": -0.3149143495110785, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06),movie.title,>,2012-08-06), company.name),company.name))", "score": -0.3246994598940017, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,>,2012-08-06),movie.title,>,2012-08-06), company.name),company.name))", "score": -0.3271434294143887, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,>=,2012-08-06), company.name),company.name))", "score": -0.3296662515946819, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>=,2012-08-06), company.name),company.name))", "score": -0.34472645668225393, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.11366987925079126, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.1580881550489016, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.19430244164053265, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.20663002623185944, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.20679564675806486, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.30168194848036567, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.31247217255677834, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.3452095756172871, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,!=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3565117327010022, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),language.name))", "score": -0.37441012218522557, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.37540357592581164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,86),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),language.name))", "score": -0.3823974825272964, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,86), language.name),language.name))", "score": -0.4079865637962652, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,=,86),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.408439184880699, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}, {"orig_question": "In which languages are movies with a runtime of 86 minutes translated? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4106244087768566, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,=,86), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.gender))", "score": -0.03165299193642568, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), movie.popularity),person.gender))", "score": -0.4086913003557129, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.name),person.gender))", "score": -0.5163829459779663, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.name))", "score": -0.5175979079649551, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(person),movie.release_date,>,2002-01-25), person.gender),person.gender))", "score": -0.5819239102274878, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),movie.popularity))", "score": -0.5859779061720474, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2002-01-25), person.gender),person.gender))", "score": -0.6843190304207383, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2002-01-25), person.gender),person.gender))", "score": -0.6859337798523484, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.death_place))", "score": -0.7094643654272659, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), movie.revenue),person.gender))", "score": -0.7327824964158935, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,<,2002-01-25), person.gender),person.gender))", "score": -0.763618897573906, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),person.birth_day,>,2002-01-25), person.gender),person.gender))", "score": -0.7680121444136603, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.death_place),person.gender))", "score": -0.7817024721734924, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),cast.person_id))", "score": -0.79753302950121, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,>,2002-01-25), person.gender),person.gender))", "score": -0.8020370386511786, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.vote_average)", "score": -0.09469990369330156, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))", "score": -0.31592381203518016, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,Released),movie.vote_average)", "score": -0.4522010910914875, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average)", "score": -0.5573623514426566, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,Released), movie.id),movie.vote_average)", "score": -0.5725133102615987, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(filter(getData(movie),movie.status,>=,Released),movie.vote_average)", "score": -0.583782839710189, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Released), movie.id),movie.vote_average)", "score": -0.6338994085254215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.vote_count)", "score": -0.6417388968058056, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>=,Released), movie.id),movie.vote_average)", "score": -0.700798169813517, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Released), movie.id),movie.vote_average)", "score": -0.762239257716741, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.popularity)", "score": -0.81692858250939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_count))", "score": -0.8366853652332793, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(filter(getData(movie),movie.status,!=,Released),movie.vote_average)", "score": -0.8374433660212648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.vote_average)", "score": -0.8885476925763944, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the movie vote average of the released movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>,Released), movie.id),movie.vote_average)", "score": -0.8975478474119339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.07326375530839728, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.2101850459248008, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year))", "score": -0.23977407217466876, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.sub_category))", "score": -0.27800325755286764, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3173188031163518, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.3211832071626194, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3273168108858713, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3562306694585202, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<=,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3637251908469062, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year))", "score": -0.3766953627910723, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3798167823688378, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,1975-05-30),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3802933123635962, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3991899315302557, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.41601875864492116, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Is there any oscar sub category for movies for which a cast member who died before 1975-05-30 was nominated?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.4200811371424521, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,<,1975-05-30),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.name))", "score": -0.39857034879969433, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.death_day))", "score": -0.3999508795677684, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.name))", "score": -0.4173336130916141, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.death_day))", "score": -0.4773046125774272, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.name),person.name))", "score": -0.5538626139168628, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.birth_day),person.name))", "score": -0.5722740751807578, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.birth_day), person.death_day))", "score": -0.5738944475888275, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.death_day))", "score": -0.5833066841005348, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.birth_day), person.name))", "score": -0.5912771811126731, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.name))", "score": -0.6006894176243804, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,1938-12-16),person.name), person.death_day))", "score": -0.6186336790560745, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,1938-12-16), person.name),person.name))", "score": -0.6204714340274222, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.name),person.death_day))", "score": -0.6325968776945956, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.birth_day))", "score": -0.6352603537379764, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,!=,1938-12-16),person.name), person.name))", "score": -0.6360164125799201, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "score": -0.12145326612517238, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.gender),person.gender))", "score": -0.20515647111460567, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1980-03-27), person.gender),person.gender))", "score": -0.3934755581431091, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1980-03-27), person.gender),person.gender))", "score": -0.39554521022364497, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1980-03-27), person.gender),person.gender))", "score": -0.45022013364359736, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1980-03-27), person.gender),person.gender))", "score": -0.48912951489910483, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.name),person.gender))", "score": -0.5556754721328616, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1980-03-27), person.gender),person.gender))", "score": -0.5728327198885381, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,=,1980-03-27),person.gender), person.gender))", "score": -0.5938645588757936, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1980-03-27), person.gender),person.gender))", "score": -0.618143345694989, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.name))", "score": -0.6370247737504542, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.name),person.gender))", "score": -0.6393786771222949, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,null,1980-03-27), person.gender),person.gender))", "score": -0.6425827401690185, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,<,1980-03-27),person.gender), person.gender))", "score": -0.6893198202888016, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.gender),person.name))", "score": -0.7207279787398875, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),oscar.number)", "score": -0.2717439778741792, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),movie.title)", "score": -0.3111336001883093, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),movie.runtime)", "score": -0.33998492023799387, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.34711141561054737, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),oscar.number)", "score": -0.3476076421340511, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),movie.title))", "score": -0.3741189417909804, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),oscar.number)", "score": -0.37621591011733424, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),movie.title))", "score": -0.4121697392059702, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),movie.runtime)", "score": -0.41307150048831176, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),movie.title)", "score": -0.41560553243146436, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.title),movie.title))", "score": -0.4172028832941323, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), oscar.id),oscar.number)", "score": -0.4262879628112608, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.42734860948853076, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.runtime))", "score": -0.4345358723497038, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.status),movie.title))", "score": -0.43904890007838704, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.031775354113051435, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.budget)", "score": -0.43212610194663725, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.title)", "score": -0.44869455441800776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,10.4764), movie.title),movie.title))", "score": -0.5720250284612121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.release_date),movie.title))", "score": -0.6141192269824387, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.status),movie.title))", "score": -0.6904994202159287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.runtime),movie.title))", "score": -0.6961489272616745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,10.4764), movie.title),movie.title))", "score": -0.712804762119049, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,10.4764), movie.title),movie.title))", "score": -0.7479284083783568, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,10.4764), movie.title),movie.title))", "score": -0.7887099659383239, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,10.4764), movie.title),movie.title))", "score": -0.7940530409650819, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),production_company.movie_id)", "score": -0.7954751759062841, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,10.4764), movie.title),movie.title))", "score": -0.8000396718816774, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.runtime)", "score": -0.8183376108474464, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),oscar.number)", "score": -0.8372659783012779, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "score": -0.038678029843140393, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,69), movie.revenue),movie.revenue))", "score": -0.2767304557492025, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,69), movie.revenue),movie.revenue))", "score": -0.3334594744374044, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.vote_count))", "score": -0.5947611278970726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),person.death_day))", "score": -0.6304106659372337, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,69), movie.revenue),movie.revenue))", "score": -0.6344985443283804, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,69), movie.revenue),movie.revenue))", "score": -0.691560931794811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,69), movie.revenue),movie.revenue))", "score": -0.6934940892388113, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.popularity),movie.revenue))", "score": -0.7009067689650692, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), person.death_day),movie.revenue))", "score": -0.7261144673102535, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,null,69), movie.revenue),movie.revenue))", "score": -0.7566556411911733, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),cast.person_id))", "score": -0.7927651948411949, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.budget))", "score": -0.8154618091066368, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.original_language))", "score": -0.8285719103296287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),cast.movie_id))", "score": -0.8315914220293052, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "score": -0.14159305835299113, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "score": -0.14307941810616343, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.2901193418397707, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "score": -0.3086613166299044, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "score": -0.30980376306422386, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "score": -0.316642768409931, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "score": -0.3166709850194206, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.32804390846650333, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.33457239110811937, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.release_date),movie.runtime)", "score": -0.336757481281789, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.release_date),movie.runtime)", "score": -0.3382438410349613, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.id),movie.runtime)", "score": -0.34948228608661625, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.id),movie.runtime)", "score": -0.35043471881747607, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Action), movie.runtime),movie.runtime)", "score": -0.35832878896158216, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What the total runtime of all movies not part of the Action genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Action), movie.runtime),movie.runtime)", "score": -0.35981514871475445, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Action),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.number))", "score": -0.36478828608233654, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.number))", "score": -0.3683035608069268, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "avg(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), oscar.category),oscar.number)", "score": -0.3758553976959486, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "avg(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.number)", "score": -0.37861071367800786, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), oscar.category),oscar.number))", "score": -0.39055137089323305, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.category))", "score": -0.3989814626885097, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), oscar.number),oscar.number))", "score": -0.4036332250058054, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "avg(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(oscar),has_genre.movie_id,movie.id), oscar.category),oscar.number)", "score": -0.4123325867791302, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "avg(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(oscar),has_genre.movie_id,movie.id), movie.title),oscar.number)", "score": -0.41508790276118945, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.number))", "score": -0.4247918388519187, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.number))", "score": -0.4263089257588793, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id), movie.title),oscar.category))", "score": -0.42688540548339116, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary), movie.title),oscar.number))", "score": -0.4362178477478144, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), movie.title),oscar.number))", "score": -0.4418982661798661, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of oscars nominations in the genre Documentary?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Documentary),getData(movie),has_genre.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),genre.id,has_genre.genre_id), oscar.category),oscar.number))", "score": -0.4495288199412664, "correct_code": "avg(distinct(merge(merge(filter(getData(genre),genre.name,=,Documentary),getData(has_genre),genre.id,has_genre.genre_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_genre.movie_id,movie.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))", "score": -0.007923145945824217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.revenue),movie.budget))", "score": -0.5894804612544249, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,75000000), movie.budget),movie.budget))", "score": -0.6689386927100713, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,75000000), movie.budget),movie.budget))", "score": -0.7344795366443577, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.title),movie.budget))", "score": -0.7860916868594359, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.title))", "score": -0.7954373351458344, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.release_date),movie.budget))", "score": -0.8051240459826658, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), person.death_place),movie.budget))", "score": -0.8064288512614439, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.release_date))", "score": -0.8105496159914765, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.revenue))", "score": -0.816442011964682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.original_language),movie.budget))", "score": -0.820246936455078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,75000000), movie.budget),movie.budget))", "score": -0.8358424802936497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,!=,75000000), movie.budget),movie.budget))", "score": -0.8563054701007786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.vote_count),movie.budget))", "score": -0.8713729993251036, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}, {"orig_question": "What are the movie budgets of the movies which don't have a revenue of 75000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), person.death_day),movie.budget))", "score": -0.8733912722018431, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,75000000), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.020999062020564452, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.45336758592748083, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1939-12-17), person.death_place),person.death_place))", "score": -0.4625221962633077, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.5200774409087882, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1939-12-17),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.5810970866860229, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.6066478660009015, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "score": -0.6228754396142904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_day),person.death_place))", "score": -0.6367349546926562, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.6529849489144041, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1939-12-17),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.683607600439326, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1939-12-17), person.death_place),person.death_place))", "score": -0.685692803801336, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1939-12-17),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.7210821297253136, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "score": -0.7624445271503646, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1939-12-17), person.death_place),person.death_place))", "score": -0.7703578347864095, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1939-12-17), person.death_place),person.death_place))", "score": -0.7840965861978475, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.15986163530616293, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.17912809792699894, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.1925804284546757, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,=,jewelry store), movie.title),movie.title))", "score": -0.3279831913870325, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.335762703597614, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.3505393160396211, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,keyword.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.3850419841757564, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.38618090774455777, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),company.name,!=,jewelry store), movie.title),movie.title))", "score": -0.39307684635117934, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(getData(oscar),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.41100145551899914, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(getData(person),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.4133063969347859, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.41974274489621166, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),genre.name,!=,jewelry store), movie.title),movie.title))", "score": -0.42075377797687075, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),movie.title,!=,jewelry store), movie.title),movie.title))", "score": -0.42261976528708256, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(getData(language),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.42369554612378124, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.06356798800698016, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.2628155847924063, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.4546386347064981, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_day),person.name))", "score": -0.5048528834158788, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_day))", "score": -0.5094724217342446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.5435561621737424, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_place))", "score": -0.5477410474704811, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.death_day))", "score": -0.5642557063983986, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.5846161333577354, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.621510828804397, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.6230817947174858, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.6259956284338841, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.6409466368932044, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),oscar.year))", "score": -0.6418257871555397, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1957-08-15), person.name),person.name))", "score": -0.6538862314919243, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.14885661703006195, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.17062750276935787, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.2516161069135173, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.2926672494655045, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.3005336896832289, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.30607334870860453, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.32230457542252483, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.3278442344479004, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.3289051172793347, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.33826343525011476, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.35067600301863056, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.3600343209894107, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.37813184641784703, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(language),language.name,=,6.6),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.39649606654638286, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(person),language.name,=,6.6),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.41363467248059294, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.name))", "score": -0.2381507064673431, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.death_day))", "score": -0.2439674028141569, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.birth_day))", "score": -0.2639802402416325, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.name))", "score": -0.2828522895931995, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.death_day))", "score": -0.28866898594001333, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.name))", "score": -0.3017148119249796, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.death_day))", "score": -0.3075315082717935, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.death_day),person.birth_day))", "score": -0.30868182336748895, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.birth_place))", "score": -0.3140860292179732, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.32352060745248234, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3275443456992691, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.death_day))", "score": -0.3293373037992962, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.movie_id,person.id), person.birth_day),person.name))", "score": -0.3873647206031718, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),merge(getData(oscar),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.death_day),person.death_day))", "score": -0.40765076501801567, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),merge(getData(oscar),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.death_day),person.name))", "score": -0.4182699029775797, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.release_date))", "score": -0.2119394821311289, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.title))", "score": -0.28376319829476415, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.release_date),movie.status))", "score": -0.34114615444195806, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.status),movie.release_date))", "score": -0.39433834899318754, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.title))", "score": -0.41647718615556173, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.title))", "score": -0.43133967371387283, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.release_date))", "score": -0.4486964728297981, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines), movie.release_date),movie.title))", "score": -0.46146520423947196, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.release_date))", "score": -0.4635589603881092, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Philippines), movie.status),movie.title))", "score": -0.4661620651568228, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Philippines), movie.release_date),movie.title))", "score": -0.47758272908426136, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Philippines), movie.title),movie.title))", "score": -0.47808843862283956, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),company.name,=,Philippines), movie.release_date),movie.title))", "score": -0.4790922422863649, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines), movie.release_date),movie.release_date))", "score": -0.48436042477968444, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.title,=,Philippines), movie.release_date),movie.title))", "score": -0.49244521664257246, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.18580962898282458, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.20086235568723584, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.23733833295409568, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(person),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.2397808406611465, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.26724250731536847, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.28229523401977974, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.2932062155635133, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(person),movie.id,cast.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.3212137189936904, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.33507906459296355, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),cast.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.33633544513821595, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<=,25), person.death_place),person.death_place))", "score": -0.33743237482831884, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,25),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.34793457309749254, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),cast.person_id,person.id),movie.runtime,<,25), person.death_place),person.death_place))", "score": -0.3513881441542414, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,<=,25), person.death_place),person.death_place))", "score": -0.3524850829815116, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many distinct death places have crew members that worked on movies with a runtime smaller than 25 ? ", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.runtime,<,25),person.death_place,=,25), person.death_place),person.death_place))", "score": -0.4246950329545296, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,<,25),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.0843920697516296, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,<=,59),movie.runtime),movie.popularity))", "score": -0.3558517572528217, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>,59),movie.runtime),movie.popularity))", "score": -0.5344461378699634, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,!=,59),movie.runtime),movie.popularity))", "score": -0.5576210496074054, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.vote_average),movie.popularity))", "score": -0.5854067564068828, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.release_date))", "score": -0.5935640688112471, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.revenue))", "score": -0.6550276036432479, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,=,59),movie.runtime),movie.popularity))", "score": -0.6560160097724292, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.runtime),movie.popularity))", "score": -0.7250722518965919, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.runtime),movie.popularity))", "score": -0.7332639120597411, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),getData(movie),movie.id,movie.id),movie.runtime),movie.popularity))", "score": -0.741671296793059, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,>=,59),movie.runtime),movie.popularity))", "score": -0.7621326126682106, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.id))", "score": -0.7733939643076155, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),person.birth_day))", "score": -0.7938284630945418, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.vote_average))", "score": -0.8061583395174239, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.2157859970387759, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.22282911057834276, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.22301392832359085, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.2657622531011204, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.27299018438593536, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,ar),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2847720972933073, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.30420394620097646, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.31198545700642405, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar),language.name,!=,ar), language.name),language.name))", "score": -0.3180928216721773, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.31921338829123896, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.33527561450399856, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),language.name))", "score": -0.34871773736587836, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3490197731632074, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,!=,ar), language.name),person.name))", "score": -0.3554362760115764, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "How many spoken languages are there in all movies except the ones that are originally in arabic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,!=,ar), language.name),language.name))", "score": -0.361823300787961, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ar),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.05919302211775179, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.2163912673395281, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.2773645467620848, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.2964905132617952, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3192822697719592, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.3257125472664959, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3258635154440951, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.33465263935639694, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.3456302496546898, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),cast.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.35275131629729, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.release_date),movie.runtime)", "score": -0.3585820345044899, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),person.death_place,=,Family), movie.id),movie.runtime)", "score": -0.3585893950513025, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3839291752245103, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),spoken_language.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.4039619484368362, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.4109396518912043, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.03133424272527918, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,160583018), movie.vote_average),movie.vote_average))", "score": -0.4027192768990062, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,160583018), movie.vote_average),movie.vote_average))", "score": -0.43777491425862536, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.4534767636505421, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_count))", "score": -0.6108900280087255, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), oscar.year),movie.vote_average))", "score": -0.6770363433170132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.popularity))", "score": -0.7122303218930028, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.popularity),movie.vote_average))", "score": -0.7605273706722073, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_count),movie.vote_average))", "score": -0.7700237018871121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,160583018), movie.vote_average),movie.vote_average))", "score": -0.7765344259678386, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),oscar.year))", "score": -0.7769330115406774, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.7895743913250044, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.status))", "score": -0.8016132683842443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.runtime),movie.vote_average))", "score": -0.8263228518771939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.runtime))", "score": -0.8284164638607763, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.15892350689302606, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.18981392825441704, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.20949037607202461, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.21346724897592984, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2218966568481905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.2226010394844052, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.23185309800662737, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.24548845958334847, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.2534914608457962, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2539178674556091, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.38512108402034195, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.40513204098444633, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title)", "score": -0.4231496275884383, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20), movie.id),movie.title)", "score": -0.4324003966809693, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20), movie.title),movie.title)", "score": -0.46228931394284745, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.02731608557344632, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2814520356635079, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.33079277713166455, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.34210338425369236, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.3497774817571852, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3619311512644875, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),person.death_place))", "score": -0.3679259967621828, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3704675903918123, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3871633186366771, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4033843711779806, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40583949093302685, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40728997914181225, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40883401256203106, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.movie_id,genre.id), genre.name),genre.name))", "score": -0.4113529785505733, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),company.name))", "score": -0.4224275850082265, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.09868504074774061, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.20541127484536953, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.21008853237996752, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.2342982356632569, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.24752069151358097, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.2509503142429923, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.2987069918670681, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.30723715907320487, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.3085206119960807, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.3303151216857925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.33247921385331725, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.336841495548331, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.3482920426785433, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.3517162235508586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.35748933079129, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.16364900938705046, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.18587850379387677, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.1913917824013662, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.22397564488012392, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2354412735326968, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,genre.id), genre.name),genre.name))", "score": -0.24390474066510445, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.28499064529603096, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,genre.id), genre.name),genre.name))", "score": -0.2891450282273681, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),language.iso_639_1,has_genre.movie_id), genre.name),genre.name))", "score": -0.2963579603401847, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2993968840568842, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),language.name,=,Magyar),genre.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.3007699197364257, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.30589348606206546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.30782735255148563, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),language.name,=,Magyar),has_genre.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.3123417907593363, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many genres for movies with the spoken language Magyar are there?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),language.name,=,Magyar),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.33192047655984963, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
